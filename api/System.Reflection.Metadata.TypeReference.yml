items:
- uid: System.Reflection.Metadata.TypeReference
  id: TypeReference
  parent: System.Reflection.Metadata
  children:
  - System.Reflection.Metadata.TypeReference.Name
  - System.Reflection.Metadata.TypeReference.Namespace
  - System.Reflection.Metadata.TypeReference.ResolutionScope
  href: System.Reflection.Metadata.TypeReference.yml
  name: TypeReference
  fullName: System.Reflection.Metadata.TypeReference
  type: Struct
  source:
    remote: &o0
      path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/TypeReference.cs
      branch: master
      repo: https://github.com/chenkennt/corefx.git
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/TypeReference.cs
    startLine: 8
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.Metadata
  syntax:
    content: public struct TypeReference
    content.vb: Public Structure TypeReference
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
- uid: System.Reflection.Metadata.TypeReference.ResolutionScope
  id: ResolutionScope
  parent: System.Reflection.Metadata.TypeReference
  href: System.Reflection.Metadata.TypeReference.yml
  name: ResolutionScope
  fullName: System.Reflection.Metadata.TypeReference.ResolutionScope
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/TypeReference.cs
    startLine: 52
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.Metadata
  summary: Resolution scope in which the target type is defined and is uniquely identified by the specified @'System.Reflection.Metadata.TypeReference.Namespace' and @'System.Reflection.Metadata.TypeReference.Name'.
  remarks: >-
    Resolution scope can be one of the following handles:

    <list type="bullet"><item><description>@'System.Reflection.Metadata.TypeReferenceHandle' of the enclosing type, if the target type is a nested type.</description></item><item><description>@'System.Reflection.Metadata.ModuleReferenceHandle', if the target type is defined in another module within the same assembly as this one.</description></item><item><description>@'System.Reflection.Metadata.EntityHandle.ModuleDefinition', if the target type is defined in the current module. This should not occur in a CLI compressed metadata module.</description></item><item><description>@'System.Reflection.Metadata.AssemblyReferenceHandle', if the target type is defined in a different assembly from the current module.</description></item><item><description>Nil handle if the target type must be resolved by searching the @'System.Reflection.Metadata.MetadataReader.ExportedTypes' for a matching @'System.Reflection.Metadata.TypeReference.Namespace' and @'System.Reflection.Metadata.TypeReference.Name'.</description></item></list>
  syntax:
    content: public EntityHandle ResolutionScope { get; }
    content.vb: Public ReadOnly Property ResolutionScope As EntityHandle
    parameters: []
    return:
      type: System.Reflection.Metadata.EntityHandle
- uid: System.Reflection.Metadata.TypeReference.Name
  id: Name
  parent: System.Reflection.Metadata.TypeReference
  href: System.Reflection.Metadata.TypeReference.yml
  name: Name
  fullName: System.Reflection.Metadata.TypeReference.Name
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/TypeReference.cs
    startLine: 68
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.Metadata
  summary: Name of the target type.
  syntax:
    content: public StringHandle Name { get; }
    content.vb: Public ReadOnly Property Name As StringHandle
    parameters: []
    return:
      type: System.Reflection.Metadata.StringHandle
- uid: System.Reflection.Metadata.TypeReference.Namespace
  id: Namespace
  parent: System.Reflection.Metadata.TypeReference
  href: System.Reflection.Metadata.TypeReference.yml
  name: Namespace
  fullName: System.Reflection.Metadata.TypeReference.Namespace
  type: Property
  source:
    remote: *o0
    path: src/System.Reflection.Metadata/src/System/Reflection/Metadata/TypeReference.cs
    startLine: 84
  assemblies:
  - System.Reflection.Metadata
  namespace: System.Reflection.Metadata
  summary: Full name of the namespace where the target type is defined, or nil if the type is nested or defined in a root namespace.
  syntax:
    content: public StringHandle Namespace { get; }
    content.vb: Public ReadOnly Property Namespace As StringHandle
    parameters: []
    return:
      type: System.Reflection.Metadata.StringHandle
references:
- uid: System.Reflection.Metadata
  isExternal: false
  name: System.Reflection.Metadata
  fullName: System.Reflection.Metadata
  type: Namespace
- uid: System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: false
  href: System.ValueType.yml
  name: Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
    href: System.ValueType.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
    href: System.ValueType.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ValueType.ToString
  parent: System.ValueType
  isExternal: false
  href: System.ValueType.yml
  name: ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
    href: System.ValueType.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
    href: System.ValueType.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ValueType
  parent: System
  isExternal: false
  href: System.ValueType.yml
  name: ValueType
  fullName: System.ValueType
  type: Class
- uid: System.Object
  parent: System
  isExternal: false
  href: System.Object.yml
  name: Object
  fullName: System.Object
  type: Class
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Reflection.Metadata.TypeReference.Namespace
- uid: System.Reflection.Metadata.TypeReference.Name
- uid: System.Reflection.Metadata.TypeReferenceHandle
  parent: System.Reflection.Metadata
  isExternal: false
  href: System.Reflection.Metadata.TypeReferenceHandle.yml
  name: TypeReferenceHandle
  fullName: System.Reflection.Metadata.TypeReferenceHandle
  type: Struct
- uid: System.Reflection.Metadata.ModuleReferenceHandle
  parent: System.Reflection.Metadata
  isExternal: false
  href: System.Reflection.Metadata.ModuleReferenceHandle.yml
  name: ModuleReferenceHandle
  fullName: System.Reflection.Metadata.ModuleReferenceHandle
  type: Struct
- uid: System.Reflection.Metadata.EntityHandle.ModuleDefinition
- uid: System.Reflection.Metadata.AssemblyReferenceHandle
  parent: System.Reflection.Metadata
  isExternal: false
  href: System.Reflection.Metadata.AssemblyReferenceHandle.yml
  name: AssemblyReferenceHandle
  fullName: System.Reflection.Metadata.AssemblyReferenceHandle
  type: Struct
- uid: System.Reflection.Metadata.MetadataReader.ExportedTypes
- uid: System.Reflection.Metadata.EntityHandle
  parent: System.Reflection.Metadata
  isExternal: false
  href: System.Reflection.Metadata.EntityHandle.yml
  name: EntityHandle
  fullName: System.Reflection.Metadata.EntityHandle
  type: Struct
  summary: Represents a metadata entity (type reference/definition/specification, method definition, custom attribute, etc.).
- uid: System.Reflection.Metadata.StringHandle
  parent: System.Reflection.Metadata
  isExternal: false
  href: System.Reflection.Metadata.StringHandle.yml
  name: StringHandle
  fullName: System.Reflection.Metadata.StringHandle
  type: Struct
