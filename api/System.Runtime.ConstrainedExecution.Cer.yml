items:
- uid: System.Runtime.ConstrainedExecution.Cer
  id: Cer
  parent: System.Runtime.ConstrainedExecution
  children:
  - System.Runtime.ConstrainedExecution.Cer.MayFail
  - System.Runtime.ConstrainedExecution.Cer.None
  - System.Runtime.ConstrainedExecution.Cer.Success
  href: System.Runtime.ConstrainedExecution.Cer.yml
  name: Cer
  fullName: System.Runtime.ConstrainedExecution.Cer
  type: Enum
  source:
    remote: &o0
      path: src/mscorlib/src/System/Runtime/Reliability/ReliabilityContractAttribute.cs
      branch: master
      repo: https://github.com/chenkennt/coreclr.git
    path: src/mscorlib/src/System/Runtime/Reliability/ReliabilityContractAttribute.cs
    startLine: 37
  assemblies:
  - mscorlib
  namespace: System.Runtime.ConstrainedExecution
  summary: Specifies a method's behavior when called within a constrained execution region.
  syntax:
    content: public enum Cer
    content.vb: Public Enum Cer
- uid: System.Runtime.ConstrainedExecution.Cer.None
  id: None
  parent: System.Runtime.ConstrainedExecution.Cer
  href: System.Runtime.ConstrainedExecution.Cer.yml
  name: None
  fullName: System.Runtime.ConstrainedExecution.Cer.None
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/Runtime/Reliability/ReliabilityContractAttribute.cs
    startLine: 40
  assemblies:
  - mscorlib
  namespace: System.Runtime.ConstrainedExecution
  summary: 'The method, type, or assembly has no concept of a CER. It does not take advantage of CER guarantees. This implies the following:'
  syntax:
    content: None = 0
- uid: System.Runtime.ConstrainedExecution.Cer.MayFail
  id: MayFail
  parent: System.Runtime.ConstrainedExecution.Cer
  href: System.Runtime.ConstrainedExecution.Cer.yml
  name: MayFail
  fullName: System.Runtime.ConstrainedExecution.Cer.MayFail
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/Runtime/Reliability/ReliabilityContractAttribute.cs
    startLine: 41
  assemblies:
  - mscorlib
  namespace: System.Runtime.ConstrainedExecution
  summary: In the face of exceptional conditions, the method might fail. In this case, the method will report back to the calling method whether it succeeded or failed. The method must have a CER around the method body to ensure that it can report the return value.
  syntax:
    content: MayFail = 1
- uid: System.Runtime.ConstrainedExecution.Cer.Success
  id: Success
  parent: System.Runtime.ConstrainedExecution.Cer
  href: System.Runtime.ConstrainedExecution.Cer.yml
  name: Success
  fullName: System.Runtime.ConstrainedExecution.Cer.Success
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/Runtime/Reliability/ReliabilityContractAttribute.cs
    startLine: 42
  assemblies:
  - mscorlib
  namespace: System.Runtime.ConstrainedExecution
  summary: In the face of exceptional conditions, the method is guaranteed to succeed. You should always construct a CER around the method that is called, even when it is called from within a non-CER region. A method is successful if it accomplishes what is intended. For example, marking @'System.Collections.ArrayList.Count' with ReliabilityContractAttribute(Cer.Success) implies that when it is run under a CER, it always returns a count of the number of elements in the @'System.Collections.ArrayList' and it can never leave the internal fields in an undetermined state.
  syntax:
    content: Success = 2
references:
- uid: System.Runtime.ConstrainedExecution
  isExternal: false
  name: System.Runtime.ConstrainedExecution
  fullName: System.Runtime.ConstrainedExecution
  type: Namespace
