items:
- uid: System.AppDomain
  id: AppDomain
  parent: System
  children:
  - System.AppDomain.ApplyPolicy(System.String)
  - System.AppDomain.AssemblyLoad
  - System.AppDomain.AssemblyResolve
  - System.AppDomain.BaseDirectory
  - System.AppDomain.CreateComInstanceFrom(System.String,System.String)
  - System.AppDomain.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
  - System.AppDomain.CreateInstance(System.String,System.String)
  - System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  - System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  - System.AppDomain.CreateInstance(System.String,System.String,System.Object[])
  - System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)
  - System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  - System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  - System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])
  - System.AppDomain.CreateInstanceFrom(System.String,System.String)
  - System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  - System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  - System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])
  - System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String)
  - System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  - System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  - System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])
  - System.AppDomain.CurrentDomain
  - System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)
  - System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})
  - System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder},System.Security.SecurityContextSource)
  - System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)
  - System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)
  - System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)
  - System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String)
  - System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})
  - System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)
  - System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)
  - System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)
  - System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)
  - System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})
  - System.AppDomain.DomainManager
  - System.AppDomain.DomainUnload
  - System.AppDomain.DynamicDirectory
  - System.AppDomain.ExecuteAssembly(System.String)
  - System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence)
  - System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])
  - System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
  - System.AppDomain.ExecuteAssembly(System.String,System.String[])
  - System.AppDomain.ExecuteAssembly(System.String,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
  - System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.Security.Policy.Evidence,System.String[])
  - System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.String[])
  - System.AppDomain.ExecuteAssemblyByName(System.String)
  - System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence)
  - System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence,System.String[])
  - System.AppDomain.ExecuteAssemblyByName(System.String,System.String[])
  - System.AppDomain.FriendlyName
  - System.AppDomain.GetAssemblies
  - System.AppDomain.GetCurrentThreadId
  - System.AppDomain.GetData(System.String)
  - System.AppDomain.Id
  - System.AppDomain.IsCompatibilitySwitchSet(System.String)
  - System.AppDomain.IsDefaultAppDomain
  - System.AppDomain.IsFinalizingForUnload
  - System.AppDomain.IsFullyTrusted
  - System.AppDomain.IsHomogenous
  - System.AppDomain.Load(System.Byte[])
  - System.AppDomain.Load(System.Byte[],System.Byte[])
  - System.AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)
  - System.AppDomain.Load(System.Reflection.AssemblyName)
  - System.AppDomain.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)
  - System.AppDomain.Load(System.String)
  - System.AppDomain.Load(System.String,System.Security.Policy.Evidence)
  - System.AppDomain.MonitoringIsEnabled
  - System.AppDomain.MonitoringSurvivedMemorySize
  - System.AppDomain.MonitoringSurvivedProcessMemorySize
  - System.AppDomain.MonitoringTotalAllocatedMemorySize
  - System.AppDomain.MonitoringTotalProcessorTime
  - System.AppDomain.PauseManager
  - System.AppDomain.PermissionSet
  - System.AppDomain.ProcessExit
  - System.AppDomain.ReflectionOnlyGetAssemblies
  - System.AppDomain.ResourceResolve
  - System.AppDomain.SetData(System.String,System.Object)
  - System.AppDomain.SetData(System.String,System.Object,System.Security.IPermission)
  - System.AppDomain.SetupInformation
  - System.AppDomain.ToString
  - System.AppDomain.TypeResolve
  - System.AppDomain.UnhandledException
  href: System.AppDomain.yml
  name: AppDomain
  fullName: System.AppDomain
  type: Class
  source:
    remote: &o0
      path: src/mscorlib/src/System/AppDomain.cs
      branch: master
      repo: https://github.com/chenkennt/coreclr.git
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 199
  assemblies:
  - mscorlib
  namespace: System
  summary: Represents an application domain, which is an isolated environment where applications execute. This class cannot be inherited.
  syntax:
    content: 'public sealed class AppDomain : _AppDomain, IEvidenceFactory'
    content.vb: Public NotInheritable Class AppDomain Implements _AppDomain, IEvidenceFactory
  inheritance:
  - System.Object
  implements:
  - System._AppDomain
  - System.Security.IEvidenceFactory
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.AppDomain.AssemblyLoad
  id: AssemblyLoad
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: AssemblyLoad
  fullName: System.AppDomain.AssemblyLoad
  type: Event
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 222
  assemblies:
  - mscorlib
  namespace: System
  summary: Occurs when an assembly is loaded.
  syntax:
    content: public event AssemblyLoadEventHandler AssemblyLoad
    content.vb: Public Event AssemblyLoad As AssemblyLoadEventHandler
- uid: System.AppDomain.TypeResolve
  id: TypeResolve
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: TypeResolve
  fullName: System.AppDomain.TypeResolve
  type: Event
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 227
  assemblies:
  - mscorlib
  namespace: System
  summary: Occurs when the resolution of a type fails.
  syntax:
    content: public event ResolveEventHandler TypeResolve
    content.vb: Public Event TypeResolve As ResolveEventHandler
- uid: System.AppDomain.ResourceResolve
  id: ResourceResolve
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: ResourceResolve
  fullName: System.AppDomain.ResourceResolve
  type: Event
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 251
  assemblies:
  - mscorlib
  namespace: System
  summary: Occurs when the resolution of a resource fails because the resource is not a valid linked or embedded resource in the assembly.
  syntax:
    content: public event ResolveEventHandler ResourceResolve
    content.vb: Public Event ResourceResolve As ResolveEventHandler
- uid: System.AppDomain.AssemblyResolve
  id: AssemblyResolve
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: AssemblyResolve
  fullName: System.AppDomain.AssemblyResolve
  type: Event
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 275
  assemblies:
  - mscorlib
  namespace: System
  summary: Occurs when the resolution of an assembly fails.
  syntax:
    content: public event ResolveEventHandler AssemblyResolve
    content.vb: Public Event AssemblyResolve As ResolveEventHandler
- uid: System.AppDomain.DomainManager
  id: DomainManager
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: DomainManager
  fullName: System.AppDomain.DomainManager
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1104
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the domain manager that was provided by the host when the application domain was initialized.
  syntax:
    content: public AppDomainManager DomainManager { get; }
    content.vb: Public ReadOnly Property DomainManager As AppDomainManager
    parameters: []
    return:
      type: System.AppDomainManager
      description: An object that represents the domain manager provided by the host when the application domain was initialized, or null if no domain manager was provided.
- uid: System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)
  id: DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: DefineDynamicAssembly(AssemblyName, AssemblyBuilderAccess)
  fullName: System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1182
  assemblies:
  - mscorlib
  namespace: System
  summary: Defines a dynamic assembly with the specified name and access mode.
  syntax:
    content: public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access)
    content.vb: Public Function DefineDynamicAssembly(name As AssemblyName, access As AssemblyBuilderAccess) As AssemblyBuilder
    parameters:
    - id: name
      type: System.Reflection.AssemblyName
      description: The unique identity of the dynamic assembly.
    - id: access
      type: System.Reflection.Emit.AssemblyBuilderAccess
      description: The access mode for the dynamic assembly.
    return:
      type: System.Reflection.Emit.AssemblyBuilder
      description: A dynamic assembly with the specified name and access mode.
  exceptions:
  - type: System.ArgumentNullException
    description: '*name* is null.'
  - type: System.ArgumentException
    description: The Name property of *name* is null.-or- The Name property of *name* begins with white space, or contains a forward or backward slash.
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
- uid: System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})
  id: DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: DefineDynamicAssembly(AssemblyName, AssemblyBuilderAccess, IEnumerable<CustomAttributeBuilder>)
  name.vb: DefineDynamicAssembly(AssemblyName, AssemblyBuilderAccess, IEnumerable(Of CustomAttributeBuilder))
  fullName: System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.Collections.Generic.IEnumerable<System.Reflection.Emit.CustomAttributeBuilder>)
  fullName.vb: System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.Collections.Generic.IEnumerable(Of System.Reflection.Emit.CustomAttributeBuilder))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1195
  assemblies:
  - mscorlib
  namespace: System
  summary: Defines a dynamic assembly with the specified name, access mode, and custom attributes.
  syntax:
    content: public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, IEnumerable<CustomAttributeBuilder> assemblyAttributes)
    content.vb: Public Function DefineDynamicAssembly(name As AssemblyName, access As AssemblyBuilderAccess, assemblyAttributes As IEnumerable(Of CustomAttributeBuilder)) As AssemblyBuilder
    parameters:
    - id: name
      type: System.Reflection.AssemblyName
      description: The unique identity of the dynamic assembly.
    - id: access
      type: System.Reflection.Emit.AssemblyBuilderAccess
      description: The access mode for the dynamic assembly.
    - id: assemblyAttributes
      type: System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder}
      description: An enumerable list of attributes to be applied to the assembly, or null if there are no attributes.
    return:
      type: System.Reflection.Emit.AssemblyBuilder
      description: A dynamic assembly with the specified name and features.
  exceptions:
  - type: System.ArgumentNullException
    description: '*name* is null.'
  - type: System.ArgumentException
    description: The Name property of *name* is null.-or- The Name property of *name* starts with white space, or contains a forward or backward slash.
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
- uid: System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder},System.Security.SecurityContextSource)
  id: DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder},System.Security.SecurityContextSource)
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: DefineDynamicAssembly(AssemblyName, AssemblyBuilderAccess, IEnumerable<CustomAttributeBuilder>, SecurityContextSource)
  name.vb: DefineDynamicAssembly(AssemblyName, AssemblyBuilderAccess, IEnumerable(Of CustomAttributeBuilder), SecurityContextSource)
  fullName: System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.Collections.Generic.IEnumerable<System.Reflection.Emit.CustomAttributeBuilder>, System.Security.SecurityContextSource)
  fullName.vb: System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.Collections.Generic.IEnumerable(Of System.Reflection.Emit.CustomAttributeBuilder), System.Security.SecurityContextSource)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1212
  assemblies:
  - mscorlib
  namespace: System
  summary: Defines a dynamic assembly with the specified name, access mode, and custom attributes, and using the specified source for its security context.
  syntax:
    content: public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, IEnumerable<CustomAttributeBuilder> assemblyAttributes, SecurityContextSource securityContextSource)
    content.vb: Public Function DefineDynamicAssembly(name As AssemblyName, access As AssemblyBuilderAccess, assemblyAttributes As IEnumerable(Of CustomAttributeBuilder), securityContextSource As SecurityContextSource) As AssemblyBuilder
    parameters:
    - id: name
      type: System.Reflection.AssemblyName
      description: The unique identity of the dynamic assembly.
    - id: access
      type: System.Reflection.Emit.AssemblyBuilderAccess
      description: The access mode for the dynamic assembly.
    - id: assemblyAttributes
      type: System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder}
      description: An enumerable list of attributes to be applied to the assembly, or null if there are no attributes.
    - id: securityContextSource
      type: System.Security.SecurityContextSource
      description: The source of the security context.
    return:
      type: System.Reflection.Emit.AssemblyBuilder
      description: A dynamic assembly with the specified name and features.
  exceptions:
  - type: System.ArgumentNullException
    description: '*name* is null.'
  - type: System.ArgumentException
    description: The Name property of *name* is null.-or- The Name property of *name* starts with white space, or contains a forward or backward slash.
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
  - type: System.ArgumentOutOfRangeException
    description: The value of *securityContextSource* was not one of the enumeration values.
- uid: System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String)
  id: DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String)
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: DefineDynamicAssembly(AssemblyName, AssemblyBuilderAccess, String)
  fullName: System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1230
  assemblies:
  - mscorlib
  namespace: System
  summary: Defines a dynamic assembly using the specified name, access mode, and storage directory.
  syntax:
    content: public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, string dir)
    content.vb: Public Function DefineDynamicAssembly(name As AssemblyName, access As AssemblyBuilderAccess, dir As String) As AssemblyBuilder
    parameters:
    - id: name
      type: System.Reflection.AssemblyName
      description: The unique identity of the dynamic assembly.
    - id: access
      type: System.Reflection.Emit.AssemblyBuilderAccess
      description: The mode in which the dynamic assembly will be accessed.
    - id: dir
      type: System.String
      description: The name of the directory where the assembly will be saved. If *dir* is null, the directory defaults to the current directory.
    return:
      type: System.Reflection.Emit.AssemblyBuilder
      description: A dynamic assembly with the specified name and features.
  exceptions:
  - type: System.ArgumentNullException
    description: '*name* is null.'
  - type: System.ArgumentException
    description: The Name property of *name* is null.-or- The Name property of *name* begins with white space, or contains a forward or backward slash.
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
- uid: System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)
  id: DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: DefineDynamicAssembly(AssemblyName, AssemblyBuilderAccess, Evidence)
  fullName: System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.Security.Policy.Evidence)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1247
  assemblies:
  - mscorlib
  namespace: System
  summary: Defines a dynamic assembly using the specified name, access mode, and evidence.
  syntax:
    content: public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, Evidence evidence)
    content.vb: Public Function DefineDynamicAssembly(name As AssemblyName, access As AssemblyBuilderAccess, evidence As Evidence) As AssemblyBuilder
    parameters:
    - id: name
      type: System.Reflection.AssemblyName
      description: The unique identity of the dynamic assembly.
    - id: access
      type: System.Reflection.Emit.AssemblyBuilderAccess
      description: The mode in which the dynamic assembly will be accessed.
    - id: evidence
      type: System.Security.Policy.Evidence
      description: The evidence supplied for the dynamic assembly. The evidence is used unaltered as the final set of evidence used for policy resolution.
    return:
      type: System.Reflection.Emit.AssemblyBuilder
      description: A dynamic assembly with the specified name and features.
  exceptions:
  - type: System.ArgumentNullException
    description: '*name* is null.'
  - type: System.ArgumentException
    description: The Name property of *name* is null.-or- The Name property of *name* begins with white space, or contains a forward or backward slash.
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
- uid: System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)
  id: DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: DefineDynamicAssembly(AssemblyName, AssemblyBuilderAccess, PermissionSet, PermissionSet, PermissionSet)
  fullName: System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.Security.PermissionSet, System.Security.PermissionSet, System.Security.PermissionSet)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1265
  assemblies:
  - mscorlib
  namespace: System
  summary: Defines a dynamic assembly using the specified name, access mode, and permission requests.
  syntax:
    content: public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions)
    content.vb: Public Function DefineDynamicAssembly(name As AssemblyName, access As AssemblyBuilderAccess, requiredPermissions As PermissionSet, optionalPermissions As PermissionSet, refusedPermissions As PermissionSet) As AssemblyBuilder
    parameters:
    - id: name
      type: System.Reflection.AssemblyName
      description: The unique identity of the dynamic assembly.
    - id: access
      type: System.Reflection.Emit.AssemblyBuilderAccess
      description: The mode in which the dynamic assembly will be accessed.
    - id: requiredPermissions
      type: System.Security.PermissionSet
      description: The required permissions request.
    - id: optionalPermissions
      type: System.Security.PermissionSet
      description: The optional permissions request.
    - id: refusedPermissions
      type: System.Security.PermissionSet
      description: The refused permissions request.
    return:
      type: System.Reflection.Emit.AssemblyBuilder
      description: A dynamic assembly with the specified name and features.
  exceptions:
  - type: System.ArgumentNullException
    description: '*name* is null.'
  - type: System.ArgumentException
    description: The Name property of *name* is null.-or- The Name property of *name* begins with white space, or contains a forward or backward slash.
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
- uid: System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)
  id: DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: DefineDynamicAssembly(AssemblyName, AssemblyBuilderAccess, String, Evidence)
  fullName: System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.String, System.Security.Policy.Evidence)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1287
  assemblies:
  - mscorlib
  namespace: System
  summary: Defines a dynamic assembly using the specified name, access mode, storage directory, and evidence.
  syntax:
    content: public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, string dir, Evidence evidence)
    content.vb: Public Function DefineDynamicAssembly(name As AssemblyName, access As AssemblyBuilderAccess, dir As String, evidence As Evidence) As AssemblyBuilder
    parameters:
    - id: name
      type: System.Reflection.AssemblyName
      description: The unique identity of the dynamic assembly.
    - id: access
      type: System.Reflection.Emit.AssemblyBuilderAccess
      description: The mode in which the dynamic assembly will be accessed.
    - id: dir
      type: System.String
      description: The name of the directory where the assembly will be saved. If *dir* is null, the directory defaults to the current directory.
    - id: evidence
      type: System.Security.Policy.Evidence
      description: The evidence supplied for the dynamic assembly. The evidence is used unaltered as the final set of evidence used for policy resolution.
    return:
      type: System.Reflection.Emit.AssemblyBuilder
      description: A dynamic assembly with the specified name and features.
  exceptions:
  - type: System.ArgumentNullException
    description: '*name* is null.'
  - type: System.ArgumentException
    description: The Name property of *name* is null.-or- The Name property of *name* begins with white space, or contains a forward or backward slash.
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
- uid: System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)
  id: DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: DefineDynamicAssembly(AssemblyName, AssemblyBuilderAccess, String, PermissionSet, PermissionSet, PermissionSet)
  fullName: System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.String, System.Security.PermissionSet, System.Security.PermissionSet, System.Security.PermissionSet)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1303
  assemblies:
  - mscorlib
  namespace: System
  summary: Defines a dynamic assembly using the specified name, access mode, storage directory, and permission requests.
  syntax:
    content: public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, string dir, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions)
    content.vb: Public Function DefineDynamicAssembly(name As AssemblyName, access As AssemblyBuilderAccess, dir As String, requiredPermissions As PermissionSet, optionalPermissions As PermissionSet, refusedPermissions As PermissionSet) As AssemblyBuilder
    parameters:
    - id: name
      type: System.Reflection.AssemblyName
      description: The unique identity of the dynamic assembly.
    - id: access
      type: System.Reflection.Emit.AssemblyBuilderAccess
      description: The mode in which the dynamic assembly will be accessed.
    - id: dir
      type: System.String
      description: The name of the directory where the assembly will be saved. If *dir* is null, the directory defaults to the current directory.
    - id: requiredPermissions
      type: System.Security.PermissionSet
      description: The required permissions request.
    - id: optionalPermissions
      type: System.Security.PermissionSet
      description: The optional permissions request.
    - id: refusedPermissions
      type: System.Security.PermissionSet
      description: The refused permissions request.
    return:
      type: System.Reflection.Emit.AssemblyBuilder
      description: A dynamic assembly with the specified name and features.
  exceptions:
  - type: System.ArgumentNullException
    description: '*name* is null.'
  - type: System.ArgumentException
    description: The Name property of *name* is null.-or- The Name property of *name* begins with white space, or contains a forward or backward slash.
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
- uid: System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)
  id: DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: DefineDynamicAssembly(AssemblyName, AssemblyBuilderAccess, Evidence, PermissionSet, PermissionSet, PermissionSet)
  fullName: System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.Security.Policy.Evidence, System.Security.PermissionSet, System.Security.PermissionSet, System.Security.PermissionSet)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1326
  assemblies:
  - mscorlib
  namespace: System
  summary: Defines a dynamic assembly using the specified name, access mode, evidence, and permission requests.
  syntax:
    content: public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, Evidence evidence, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions)
    content.vb: Public Function DefineDynamicAssembly(name As AssemblyName, access As AssemblyBuilderAccess, evidence As Evidence, requiredPermissions As PermissionSet, optionalPermissions As PermissionSet, refusedPermissions As PermissionSet) As AssemblyBuilder
    parameters:
    - id: name
      type: System.Reflection.AssemblyName
      description: The unique identity of the dynamic assembly.
    - id: access
      type: System.Reflection.Emit.AssemblyBuilderAccess
      description: The mode in which the dynamic assembly will be accessed.
    - id: evidence
      type: System.Security.Policy.Evidence
      description: The evidence supplied for the dynamic assembly. The evidence is used unaltered as the final set of evidence used for policy resolution.
    - id: requiredPermissions
      type: System.Security.PermissionSet
      description: The required permissions request.
    - id: optionalPermissions
      type: System.Security.PermissionSet
      description: The optional permissions request.
    - id: refusedPermissions
      type: System.Security.PermissionSet
      description: The refused permissions request.
    return:
      type: System.Reflection.Emit.AssemblyBuilder
      description: A dynamic assembly with the specified name and features.
  exceptions:
  - type: System.ArgumentNullException
    description: '*name* is null.'
  - type: System.ArgumentException
    description: The Name property of *name* is null.-or- The Name property of *name* begins with white space, or contains a forward or backward slash.
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
- uid: System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)
  id: DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: DefineDynamicAssembly(AssemblyName, AssemblyBuilderAccess, String, Evidence, PermissionSet, PermissionSet, PermissionSet)
  fullName: System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.String, System.Security.Policy.Evidence, System.Security.PermissionSet, System.Security.PermissionSet, System.Security.PermissionSet)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1350
  assemblies:
  - mscorlib
  namespace: System
  summary: Defines a dynamic assembly using the specified name, access mode, storage directory, evidence, and permission requests.
  syntax:
    content: public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, string dir, Evidence evidence, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions)
    content.vb: Public Function DefineDynamicAssembly(name As AssemblyName, access As AssemblyBuilderAccess, dir As String, evidence As Evidence, requiredPermissions As PermissionSet, optionalPermissions As PermissionSet, refusedPermissions As PermissionSet) As AssemblyBuilder
    parameters:
    - id: name
      type: System.Reflection.AssemblyName
      description: The unique identity of the dynamic assembly.
    - id: access
      type: System.Reflection.Emit.AssemblyBuilderAccess
      description: The mode in which the dynamic assembly will be accessed.
    - id: dir
      type: System.String
      description: The name of the directory where the assembly will be saved. If *dir* is null, the directory defaults to the current directory.
    - id: evidence
      type: System.Security.Policy.Evidence
      description: The evidence supplied for the dynamic assembly. The evidence is used unaltered as the final set of evidence used for policy resolution.
    - id: requiredPermissions
      type: System.Security.PermissionSet
      description: The required permissions request.
    - id: optionalPermissions
      type: System.Security.PermissionSet
      description: The optional permissions request.
    - id: refusedPermissions
      type: System.Security.PermissionSet
      description: The refused permissions request.
    return:
      type: System.Reflection.Emit.AssemblyBuilder
      description: A dynamic assembly with the specified name and features.
  exceptions:
  - type: System.ArgumentNullException
    description: '*name* is null.'
  - type: System.ArgumentException
    description: The Name property of *name* is null.-or- The Name property of *name* begins with white space, or contains a forward or backward slash.
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
- uid: System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)
  id: DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: DefineDynamicAssembly(AssemblyName, AssemblyBuilderAccess, String, Evidence, PermissionSet, PermissionSet, PermissionSet, Boolean)
  fullName: System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.String, System.Security.Policy.Evidence, System.Security.PermissionSet, System.Security.PermissionSet, System.Security.PermissionSet, System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1376
  assemblies:
  - mscorlib
  namespace: System
  summary: Defines a dynamic assembly using the specified name, access mode, storage directory, evidence, permission requests, and synchronization option.
  syntax:
    content: public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, string dir, Evidence evidence, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions, bool isSynchronized)
    content.vb: Public Function DefineDynamicAssembly(name As AssemblyName, access As AssemblyBuilderAccess, dir As String, evidence As Evidence, requiredPermissions As PermissionSet, optionalPermissions As PermissionSet, refusedPermissions As PermissionSet, isSynchronized As Boolean) As AssemblyBuilder
    parameters:
    - id: name
      type: System.Reflection.AssemblyName
      description: The unique identity of the dynamic assembly.
    - id: access
      type: System.Reflection.Emit.AssemblyBuilderAccess
      description: The mode in which the dynamic assembly will be accessed.
    - id: dir
      type: System.String
      description: The name of the directory where the dynamic assembly will be saved. If *dir* is null, the directory defaults to the current directory.
    - id: evidence
      type: System.Security.Policy.Evidence
      description: The evidence supplied for the dynamic assembly. The evidence is used unaltered as the final set of evidence used for policy resolution.
    - id: requiredPermissions
      type: System.Security.PermissionSet
      description: The required permissions request.
    - id: optionalPermissions
      type: System.Security.PermissionSet
      description: The optional permissions request.
    - id: refusedPermissions
      type: System.Security.PermissionSet
      description: The refused permissions request.
    - id: isSynchronized
      type: System.Boolean
      description: true to synchronize the creation of modules, types, and members in the dynamic assembly; otherwise, false.
    return:
      type: System.Reflection.Emit.AssemblyBuilder
      description: A dynamic assembly with the specified name and features.
  exceptions:
  - type: System.ArgumentNullException
    description: '*name* is null.'
  - type: System.ArgumentException
    description: The Name property of *name* is null.-or- The Name property of *name* begins with white space, or contains a forward or backward slash.
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
- uid: System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})
  id: DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: DefineDynamicAssembly(AssemblyName, AssemblyBuilderAccess, String, Evidence, PermissionSet, PermissionSet, PermissionSet, Boolean, IEnumerable<CustomAttributeBuilder>)
  name.vb: DefineDynamicAssembly(AssemblyName, AssemblyBuilderAccess, String, Evidence, PermissionSet, PermissionSet, PermissionSet, Boolean, IEnumerable(Of CustomAttributeBuilder))
  fullName: System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.String, System.Security.Policy.Evidence, System.Security.PermissionSet, System.Security.PermissionSet, System.Security.PermissionSet, System.Boolean, System.Collections.Generic.IEnumerable<System.Reflection.Emit.CustomAttributeBuilder>)
  fullName.vb: System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.String, System.Security.Policy.Evidence, System.Security.PermissionSet, System.Security.PermissionSet, System.Security.PermissionSet, System.Boolean, System.Collections.Generic.IEnumerable(Of System.Reflection.Emit.CustomAttributeBuilder))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1404
  assemblies:
  - mscorlib
  namespace: System
  summary: Defines a dynamic assembly with the specified name, access mode, storage directory, evidence, permission requests, synchronization option, and custom attributes.
  syntax:
    content: public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, string dir, Evidence evidence, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions, bool isSynchronized, IEnumerable<CustomAttributeBuilder> assemblyAttributes)
    content.vb: Public Function DefineDynamicAssembly(name As AssemblyName, access As AssemblyBuilderAccess, dir As String, evidence As Evidence, requiredPermissions As PermissionSet, optionalPermissions As PermissionSet, refusedPermissions As PermissionSet, isSynchronized As Boolean, assemblyAttributes As IEnumerable(Of CustomAttributeBuilder)) As AssemblyBuilder
    parameters:
    - id: name
      type: System.Reflection.AssemblyName
      description: The unique identity of the dynamic assembly.
    - id: access
      type: System.Reflection.Emit.AssemblyBuilderAccess
      description: The mode in which the dynamic assembly will be accessed.
    - id: dir
      type: System.String
      description: The name of the directory where the dynamic assembly will be saved. If *dir* is null, the current directory is used.
    - id: evidence
      type: System.Security.Policy.Evidence
      description: The evidence that is supplied for the dynamic assembly. The evidence is used unaltered as the final set of evidence used for policy resolution.
    - id: requiredPermissions
      type: System.Security.PermissionSet
      description: The required permissions request.
    - id: optionalPermissions
      type: System.Security.PermissionSet
      description: The optional permissions request.
    - id: refusedPermissions
      type: System.Security.PermissionSet
      description: The refused permissions request.
    - id: isSynchronized
      type: System.Boolean
      description: true to synchronize the creation of modules, types, and members in the dynamic assembly; otherwise, false.
    - id: assemblyAttributes
      type: System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder}
      description: An enumerable list of attributes to be applied to the assembly, or null if there are no attributes.
    return:
      type: System.Reflection.Emit.AssemblyBuilder
      description: A dynamic assembly with the specified name and features.
  exceptions:
  - type: System.ArgumentNullException
    description: '*name* is null.'
  - type: System.ArgumentException
    description: The Name property of *name* is null.-or- The Name property of *name* starts with white space, or contains a forward or backward slash.
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
- uid: System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})
  id: DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: DefineDynamicAssembly(AssemblyName, AssemblyBuilderAccess, String, Boolean, IEnumerable<CustomAttributeBuilder>)
  name.vb: DefineDynamicAssembly(AssemblyName, AssemblyBuilderAccess, String, Boolean, IEnumerable(Of CustomAttributeBuilder))
  fullName: System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.String, System.Boolean, System.Collections.Generic.IEnumerable<System.Reflection.Emit.CustomAttributeBuilder>)
  fullName.vb: System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.String, System.Boolean, System.Collections.Generic.IEnumerable(Of System.Reflection.Emit.CustomAttributeBuilder))
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1433
  assemblies:
  - mscorlib
  namespace: System
  summary: Defines a dynamic assembly using the specified name, access mode, storage directory, and synchronization option.
  syntax:
    content: public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, string dir, bool isSynchronized, IEnumerable<CustomAttributeBuilder> assemblyAttributes)
    content.vb: Public Function DefineDynamicAssembly(name As AssemblyName, access As AssemblyBuilderAccess, dir As String, isSynchronized As Boolean, assemblyAttributes As IEnumerable(Of CustomAttributeBuilder)) As AssemblyBuilder
    parameters:
    - id: name
      type: System.Reflection.AssemblyName
      description: The unique identity of the dynamic assembly.
    - id: access
      type: System.Reflection.Emit.AssemblyBuilderAccess
      description: The mode in which the dynamic assembly will be accessed.
    - id: dir
      type: System.String
      description: The name of the directory where the dynamic assembly will be saved. If *dir* is null, the current directory is used.
    - id: isSynchronized
      type: System.Boolean
      description: true to synchronize the creation of modules, types, and members in the dynamic assembly; otherwise, false.
    - id: assemblyAttributes
      type: System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder}
      description: An enumerable list of attributes to be applied to the assembly, or null if there are no attributes.
    return:
      type: System.Reflection.Emit.AssemblyBuilder
      description: A dynamic assembly with the specified name and features.
  exceptions:
  - type: System.ArgumentNullException
    description: '*name* is null.'
  - type: System.ArgumentException
    description: The Name property of *name* is null.-or- The Name property of *name* starts with white space, or contains a forward or backward slash.
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
- uid: System.AppDomain.ApplyPolicy(System.String)
  id: ApplyPolicy(System.String)
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: ApplyPolicy(String)
  fullName: System.AppDomain.ApplyPolicy(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1488
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the assembly display name after policy has been applied.
  syntax:
    content: public string ApplyPolicy(string assemblyName)
    content.vb: Public Function ApplyPolicy(assemblyName As String) As String
    parameters:
    - id: assemblyName
      type: System.String
      description: The assembly display name, in the form provided by the @'System.Reflection.Assembly.FullName' property.
    return:
      type: System.String
      description: A string containing the assembly display name after policy has been applied.
- uid: System.AppDomain.CreateInstance(System.String,System.String)
  id: CreateInstance(System.String,System.String)
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: CreateInstance(String, String)
  fullName: System.AppDomain.CreateInstance(System.String, System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1506
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates a new instance of the specified type defined in the specified assembly.
  syntax:
    content: public ObjectHandle CreateInstance(string assemblyName, string typeName)
    content.vb: Public Function CreateInstance(assemblyName As String, typeName As String) As ObjectHandle
    parameters:
    - id: assemblyName
      type: System.String
      description: The display name of the assembly. See @'System.Reflection.Assembly.FullName'.
    - id: typeName
      type: System.String
      description: The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the @'System.Type.FullName' property.
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: An object that is a wrapper for the new instance specified by *typeName*. The return value needs to be unwrapped to access the real object.
  exceptions:
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
  - type: System.ArgumentNullException
    description: '*assemblyName* or *typeName* is null.'
  - type: System.BadImageFormatException
    description: '*assemblyName* is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and *assemblyName* was compiled with a later version.'
  - type: System.IO.FileLoadException
    description: An assembly or module was loaded twice with two different evidences.
  - type: System.IO.FileNotFoundException
    description: '*assemblyName* was not found.'
  - type: System.MethodAccessException
    description: The caller does not have permission to call this constructor.
  - type: System.MissingMethodException
    description: No matching public constructor was found.
  - type: System.TypeLoadException
    description: '*typename* was not found in *assemblyName*.'
  - type: System.NullReferenceException
    description: This instance is null.
- uid: System.AppDomain.CreateInstanceFrom(System.String,System.String)
  id: CreateInstanceFrom(System.String,System.String)
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: CreateInstanceFrom(String, String)
  fullName: System.AppDomain.CreateInstanceFrom(System.String, System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1528
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates a new instance of the specified type defined in the specified assembly file.
  syntax:
    content: public ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName)
    content.vb: Public Function CreateInstanceFrom(assemblyFile As String, typeName As String) As ObjectHandle
    parameters:
    - id: assemblyFile
      type: System.String
      description: The name, including the path, of a file that contains an assembly that defines the requested type. The assembly is loaded using the @'System.Reflection.Assembly.LoadFrom(System.String)'  method.
    - id: typeName
      type: System.String
      description: The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the @'System.Type.FullName' property.
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: An object that is a wrapper for the new instance, or null if *typeName* is not found. The return value needs to be unwrapped to access the real object.
  exceptions:
  - type: System.ArgumentNullException
    description: '*assemblyFile* is null.-or- *typeName* is null.'
  - type: System.IO.FileNotFoundException
    description: '*assemblyFile* was not found.'
  - type: System.TypeLoadException
    description: '*typeName* was not found in *assemblyFile*.'
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
  - type: System.MissingMethodException
    description: No parameterless public constructor was found.
  - type: System.MethodAccessException
    description: The caller does not have sufficient permission to call this constructor.
  - type: System.BadImageFormatException
    description: '*assemblyFile* is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and *assemblyFile* was compiled with a later version.'
  - type: System.IO.FileLoadException
    description: An assembly or module was loaded twice with two different evidences.
  - type: System.NullReferenceException
    description: This instance is null.
- uid: System.AppDomain.CreateComInstanceFrom(System.String,System.String)
  id: CreateComInstanceFrom(System.String,System.String)
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: CreateComInstanceFrom(String, String)
  fullName: System.AppDomain.CreateComInstanceFrom(System.String, System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1550
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates a new instance of a specified COM type. Parameters specify the name of a file that contains an assembly containing the type and the name of the type.
  syntax:
    content: public ObjectHandle CreateComInstanceFrom(string assemblyName, string typeName)
    content.vb: Public Function CreateComInstanceFrom(assemblyName As String, typeName As String) As ObjectHandle
    parameters:
    - id: assemblyName
      type: System.String
      description: The name of a file containing an assembly that defines the requested type.
    - id: typeName
      type: System.String
      description: The name of the requested type.
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: An object that is a wrapper for the new instance specified by *typeName*. The return value needs to be unwrapped to access the real object.
  exceptions:
  - type: System.ArgumentNullException
    description: '*assemblyName* or *typeName* is null.'
  - type: System.TypeLoadException
    description: The type cannot be loaded.
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
  - type: System.MissingMethodException
    description: No public parameterless constructor was found.
  - type: System.IO.FileNotFoundException
    description: '*assemblyName* is not found.'
  - type: System.MemberAccessException
    description: '*typeName* is an abstract class. -or-This member was invoked with a late-binding mechanism.'
  - type: System.NotSupportedException
    description: The caller cannot provide activation attributes for an object that does not inherit from @'System.MarshalByRefObject'.
  - type: System.ArgumentException
    description: '*assemblyName* is an empty string ("").'
  - type: System.BadImageFormatException
    description: '*assemblyName* is not a valid assembly.'
  - type: System.IO.FileLoadException
    description: An assembly or module was loaded twice with two different evidences.
  - type: System.NullReferenceException
    description: The COM object that is being referred to is null.
- uid: System.AppDomain.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
  id: CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: CreateComInstanceFrom(String, String, Byte[], AssemblyHashAlgorithm)
  name.vb: CreateComInstanceFrom(String, String, Byte(), AssemblyHashAlgorithm)
  fullName: System.AppDomain.CreateComInstanceFrom(System.String, System.String, System.Byte[], System.Configuration.Assemblies.AssemblyHashAlgorithm)
  fullName.vb: System.AppDomain.CreateComInstanceFrom(System.String, System.String, System.Byte(), System.Configuration.Assemblies.AssemblyHashAlgorithm)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1562
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates a new instance of a specified COM type. Parameters specify the name of a file that contains an assembly containing the type and the name of the type.
  syntax:
    content: public ObjectHandle CreateComInstanceFrom(string assemblyFile, string typeName, byte[] hashValue, AssemblyHashAlgorithm hashAlgorithm)
    content.vb: Public Function CreateComInstanceFrom(assemblyFile As String, typeName As String, hashValue As Byte(), hashAlgorithm As AssemblyHashAlgorithm) As ObjectHandle
    parameters:
    - id: assemblyFile
      type: System.String
      description: The name of a file containing an assembly that defines the requested type.
    - id: typeName
      type: System.String
      description: The name of the requested type.
    - id: hashValue
      type: System.Byte[]
      description: Represents the value of the computed hash code.
    - id: hashAlgorithm
      type: System.Configuration.Assemblies.AssemblyHashAlgorithm
      description: Represents the hash algorithm used by the assembly manifest.
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: An object that is a wrapper for the new instance specified by *typeName*. The return value needs to be unwrapped to access the real object.
  exceptions:
  - type: System.ArgumentNullException
    description: '*assemblyName* or *typeName* is null.'
  - type: System.TypeLoadException
    description: The type cannot be loaded.
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
  - type: System.MissingMethodException
    description: No public parameterless constructor was found.
  - type: System.IO.FileNotFoundException
    description: '*assemblyFile* is not found.'
  - type: System.MemberAccessException
    description: '*typeName* is an abstract class. -or-This member was invoked with a late-binding mechanism.'
  - type: System.NotSupportedException
    description: The caller cannot provide activation attributes for an object that does not inherit from @'System.MarshalByRefObject'.
  - type: System.ArgumentException
    description: '*assemblyFile* is the empty string ("").'
  - type: System.BadImageFormatException
    description: '*assemblyFile* is not a valid assembly.'
  - type: System.IO.FileLoadException
    description: An assembly or module was loaded twice with two different evidences.
  - type: System.NullReferenceException
    description: The COM object that is being referred to is null.
- uid: System.AppDomain.CreateInstance(System.String,System.String,System.Object[])
  id: CreateInstance(System.String,System.String,System.Object[])
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: CreateInstance(String, String, Object[])
  name.vb: CreateInstance(String, String, Object())
  fullName: System.AppDomain.CreateInstance(System.String, System.String, System.Object[])
  fullName.vb: System.AppDomain.CreateInstance(System.String, System.String, System.Object())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1580
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates a new instance of the specified type defined in the specified assembly. A parameter specifies an array of activation attributes.
  syntax:
    content: public ObjectHandle CreateInstance(string assemblyName, string typeName, object[] activationAttributes)
    content.vb: Public Function CreateInstance(assemblyName As String, typeName As String, activationAttributes As Object()) As ObjectHandle
    parameters:
    - id: assemblyName
      type: System.String
      description: The display name of the assembly. See @'System.Reflection.Assembly.FullName'.
    - id: typeName
      type: System.String
      description: The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the @'System.Type.FullName' property.
    - id: activationAttributes
      type: System.Object[]
      description: An array of one or more attributes that can participate in activation. Typically, an array that contains a single @'System.Runtime.Remoting.Activation.UrlAttribute' object that specifies the URL that is required to activate a remote object.  This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: An object that is a wrapper for the new instance specified by *typeName*. The return value needs to be unwrapped to access the real object.
  exceptions:
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
  - type: System.ArgumentNullException
    description: '*assemblyName* or *typeName* is null.'
  - type: System.BadImageFormatException
    description: '*assemblyName* is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and *assemblyName* was compiled with a later version.'
  - type: System.IO.FileLoadException
    description: An assembly or module was loaded twice with two different evidences.
  - type: System.IO.FileNotFoundException
    description: '*assemblyName* was not found.'
  - type: System.MethodAccessException
    description: The caller does not have permission to call this constructor.
  - type: System.MissingMethodException
    description: No matching public constructor was found.
  - type: System.NotSupportedException
    description: The caller cannot provide activation attributes for an object that does not inherit from @'System.MarshalByRefObject'.
  - type: System.TypeLoadException
    description: '*typename* was not found in *assemblyName*.'
  - type: System.NullReferenceException
    description: This instance is null.
- uid: System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])
  id: CreateInstanceFrom(System.String,System.String,System.Object[])
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: CreateInstanceFrom(String, String, Object[])
  name.vb: CreateInstanceFrom(String, String, Object())
  fullName: System.AppDomain.CreateInstanceFrom(System.String, System.String, System.Object[])
  fullName.vb: System.AppDomain.CreateInstanceFrom(System.String, System.String, System.Object())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1598
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates a new instance of the specified type defined in the specified assembly file.
  syntax:
    content: public ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, object[] activationAttributes)
    content.vb: Public Function CreateInstanceFrom(assemblyFile As String, typeName As String, activationAttributes As Object()) As ObjectHandle
    parameters:
    - id: assemblyFile
      type: System.String
      description: The name, including the path, of a file that contains an assembly that defines the requested type. The assembly is loaded using the @'System.Reflection.Assembly.LoadFrom(System.String)'  method.
    - id: typeName
      type: System.String
      description: The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the @'System.Type.FullName' property.
    - id: activationAttributes
      type: System.Object[]
      description: An array of one or more attributes that can participate in activation. Typically, an array that contains a single @'System.Runtime.Remoting.Activation.UrlAttribute' object that specifies the URL that is required to activate a remote object.  This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: An object that is a wrapper for the new instance, or null if *typeName* is not found. The return value needs to be unwrapped to access the real object.
  exceptions:
  - type: System.ArgumentNullException
    description: '*assemblyFile* is null.'
  - type: System.IO.FileNotFoundException
    description: '*assemblyFile* was not found.'
  - type: System.TypeLoadException
    description: '*typeName* was not found in *assemblyFile*.'
  - type: System.MethodAccessException
    description: The caller does not have sufficient permission to call this constructor.
  - type: System.MissingMethodException
    description: No matching public constructor was found.
  - type: System.NotSupportedException
    description: The caller cannot provide activation attributes for an object that does not inherit from @'System.MarshalByRefObject'.
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
  - type: System.BadImageFormatException
    description: '*assemblyFile* is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and *assemblyFile* was compiled with a later version.'
  - type: System.IO.FileLoadException
    description: An assembly or module was loaded twice with two different evidences.
  - type: System.NullReferenceException
    description: This instance is null.
- uid: System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  id: CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: CreateInstance(String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[], Evidence)
  name.vb: CreateInstance(String, String, Boolean, BindingFlags, Binder, Object(), CultureInfo, Object(), Evidence)
  fullName: System.AppDomain.CreateInstance(System.String, System.String, System.Boolean, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo, System.Object[], System.Security.Policy.Evidence)
  fullName.vb: System.AppDomain.CreateInstance(System.String, System.String, System.Boolean, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object(), System.Globalization.CultureInfo, System.Object(), System.Security.Policy.Evidence)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1613
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates a new instance of the specified type defined in the specified assembly. Parameters specify a binder, binding flags, constructor arguments, culture-specific information used to interpret arguments, activation attributes, and authorization to create the type.
  syntax:
    content: public ObjectHandle CreateInstance(string assemblyName, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, Evidence securityAttributes)
    content.vb: Public Function CreateInstance(assemblyName As String, typeName As String, ignoreCase As Boolean, bindingAttr As BindingFlags, binder As Binder, args As Object(), culture As CultureInfo, activationAttributes As Object(), securityAttributes As Evidence) As ObjectHandle
    parameters:
    - id: assemblyName
      type: System.String
      description: The display name of the assembly. See @'System.Reflection.Assembly.FullName'.
    - id: typeName
      type: System.String
      description: The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the @'System.Type.FullName' property.
    - id: ignoreCase
      type: System.Boolean
      description: A Boolean value specifying whether to perform a case-sensitive search or not.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A combination of zero or more bit flags that affect the search for the *typeName* constructor. If *bindingAttr* is zero, a case-sensitive search for public constructors is conducted.
    - id: binder
      type: System.Reflection.Binder
      description: An object that enables the binding, coercion of argument types, invocation of members, and retrieval of @'System.Reflection.MemberInfo' objects using reflection. If *binder* is null, the default binder is used.
    - id: args
      type: System.Object[]
      description: The arguments to pass to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to invoke. If the default constructor is preferred, *args* must be an empty array or null.
    - id: culture
      type: System.Globalization.CultureInfo
      description: Culture-specific information that governs the coercion of *args* to the formal types declared for the *typeName* constructor. If *culture* is null, the @'System.Globalization.CultureInfo' for the current thread is used.
    - id: activationAttributes
      type: System.Object[]
      description: An array of one or more attributes that can participate in activation. Typically, an array that contains a single @'System.Runtime.Remoting.Activation.UrlAttribute' object that specifies the URL that is required to activate a remote object.  This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.
    - id: securityAttributes
      type: System.Security.Policy.Evidence
      description: Information used to authorize creation of *typeName*.
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: An object that is a wrapper for the new instance specified by *typeName*. The return value needs to be unwrapped to access the real object.
  exceptions:
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
  - type: System.ArgumentNullException
    description: '*assemblyName* or *typeName* is null.'
  - type: System.BadImageFormatException
    description: '*assemblyName* is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and *assemblyName* was compiled with a later version.'
  - type: System.IO.FileLoadException
    description: An assembly or module was loaded twice with two different evidences.
  - type: System.IO.FileNotFoundException
    description: '*assemblyName* was not found.'
  - type: System.MethodAccessException
    description: The caller does not have permission to call this constructor.
  - type: System.MissingMethodException
    description: No matching constructor was found.
  - type: System.NotSupportedException
    description: The caller cannot provide activation attributes for an object that does not inherit from @'System.MarshalByRefObject'.-or-*securityAttributes* is not null. When legacy CAS policy is not enabled, *securityAttributes* should be null.
  - type: System.TypeLoadException
    description: '*typename* was not found in *assemblyName*.'
  - type: System.NullReferenceException
    description: This instance is null.
- uid: System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  id: CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: CreateInstance(String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])
  name.vb: CreateInstance(String, String, Boolean, BindingFlags, Binder, Object(), CultureInfo, Object())
  fullName: System.AppDomain.CreateInstance(System.String, System.String, System.Boolean, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo, System.Object[])
  fullName.vb: System.AppDomain.CreateInstance(System.String, System.String, System.Boolean, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object(), System.Globalization.CultureInfo, System.Object())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1652
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates a new instance of the specified type defined in the specified assembly. Parameters specify a binder, binding flags, constructor arguments, culture-specific information used to interpret arguments, and optional activation attributes.
  syntax:
    content: public ObjectHandle CreateInstance(string assemblyName, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes)
    content.vb: Public Function CreateInstance(assemblyName As String, typeName As String, ignoreCase As Boolean, bindingAttr As BindingFlags, binder As Binder, args As Object(), culture As CultureInfo, activationAttributes As Object()) As ObjectHandle
    parameters:
    - id: assemblyName
      type: System.String
      description: The display name of the assembly. See @'System.Reflection.Assembly.FullName'.
    - id: typeName
      type: System.String
      description: The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the @'System.Type.FullName' property.
    - id: ignoreCase
      type: System.Boolean
      description: A Boolean value specifying whether to perform a case-sensitive search or not.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A combination of zero or more bit flags that affect the search for the *typeName* constructor. If *bindingAttr* is zero, a case-sensitive search for public constructors is conducted.
    - id: binder
      type: System.Reflection.Binder
      description: An object that enables the binding, coercion of argument types, invocation of members, and retrieval of @'System.Reflection.MemberInfo' objects using reflection. If *binder* is null, the default binder is used.
    - id: args
      type: System.Object[]
      description: The arguments to pass to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to invoke. If the default constructor is preferred, *args* must be an empty array or null.
    - id: culture
      type: System.Globalization.CultureInfo
      description: Culture-specific information that governs the coercion of *args* to the formal types declared for the *typeName* constructor. If *culture* is null, the @'System.Globalization.CultureInfo' for the current thread is used.
    - id: activationAttributes
      type: System.Object[]
      description: An array of one or more attributes that can participate in activation. Typically, an array that contains a single @'System.Runtime.Remoting.Activation.UrlAttribute' object that specifies the URL that is required to activate a remote object. This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: An object that is a wrapper for the new instance specified by *typeName*. The return value needs to be unwrapped to access the real object.
  exceptions:
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
  - type: System.ArgumentNullException
    description: '*assemblyName* or *typeName* is null.'
  - type: System.BadImageFormatException
    description: '*assemblyName* is not a valid assembly. -or-*assemblyName* was compiled with a later version of the common language runtime than the version that is currently loaded.'
  - type: System.IO.FileLoadException
    description: An assembly or module was loaded twice with two different evidences.
  - type: System.IO.FileNotFoundException
    description: '*assemblyName* was not found.'
  - type: System.MethodAccessException
    description: The caller does not have permission to call this constructor.
  - type: System.MissingMethodException
    description: No matching constructor was found.
  - type: System.NotSupportedException
    description: The caller cannot provide activation attributes for an object that does not inherit from @'System.MarshalByRefObject'.
  - type: System.TypeLoadException
    description: '*typename* was not found in *assemblyName*.'
  - type: System.NullReferenceException
    description: This instance is null.
- uid: System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  id: CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: CreateInstanceFrom(String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[], Evidence)
  name.vb: CreateInstanceFrom(String, String, Boolean, BindingFlags, Binder, Object(), CultureInfo, Object(), Evidence)
  fullName: System.AppDomain.CreateInstanceFrom(System.String, System.String, System.Boolean, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo, System.Object[], System.Security.Policy.Evidence)
  fullName.vb: System.AppDomain.CreateInstanceFrom(System.String, System.String, System.Boolean, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object(), System.Globalization.CultureInfo, System.Object(), System.Security.Policy.Evidence)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1700
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates a new instance of the specified type defined in the specified assembly file.
  syntax:
    content: public ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, Evidence securityAttributes)
    content.vb: Public Function CreateInstanceFrom(assemblyFile As String, typeName As String, ignoreCase As Boolean, bindingAttr As BindingFlags, binder As Binder, args As Object(), culture As CultureInfo, activationAttributes As Object(), securityAttributes As Evidence) As ObjectHandle
    parameters:
    - id: assemblyFile
      type: System.String
      description: The name, including the path, of a file that contains an assembly that defines the requested type. The assembly is loaded using the @'System.Reflection.Assembly.LoadFrom(System.String)'  method.
    - id: typeName
      type: System.String
      description: The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the @'System.Type.FullName' property.
    - id: ignoreCase
      type: System.Boolean
      description: A Boolean value specifying whether to perform a case-sensitive search or not.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A combination of zero or more bit flags that affect the search for the *typeName* constructor. If *bindingAttr* is zero, a case-sensitive search for public constructors is conducted.
    - id: binder
      type: System.Reflection.Binder
      description: An object that enables the binding, coercion of argument types, invocation of members, and retrieval of @'System.Reflection.MemberInfo' objects through reflection. If *binder* is null, the default binder is used.
    - id: args
      type: System.Object[]
      description: The arguments to pass to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to invoke. If the default constructor is preferred, *args* must be an empty array or null.
    - id: culture
      type: System.Globalization.CultureInfo
      description: Culture-specific information that governs the coercion of *args* to the formal types declared for the *typeName* constructor. If *culture* is null, the @'System.Globalization.CultureInfo' for the current thread is used.
    - id: activationAttributes
      type: System.Object[]
      description: An array of one or more attributes that can participate in activation. Typically, an array that contains a single @'System.Runtime.Remoting.Activation.UrlAttribute' object that specifies the URL that is required to activate a remote object.  This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.
    - id: securityAttributes
      type: System.Security.Policy.Evidence
      description: Information used to authorize creation of *typeName*.
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: An object that is a wrapper for the new instance, or null if *typeName* is not found. The return value needs to be unwrapped to access the real object.
  exceptions:
  - type: System.ArgumentNullException
    description: '*assemblyFile* is null.-or- *typeName* is null.'
  - type: System.NotSupportedException
    description: The caller cannot provide activation attributes for an object that does not inherit from @'System.MarshalByRefObject'.-or-*securityAttributes* is not null. When legacy CAS policy is not enabled, *securityAttributes* should be null.
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
  - type: System.IO.FileNotFoundException
    description: '*assemblyFile* was not found.'
  - type: System.TypeLoadException
    description: '*typeName* was not found in *assemblyFile*.'
  - type: System.MissingMethodException
    description: No matching public constructor was found.
  - type: System.MethodAccessException
    description: The caller does not have sufficient permission to call this constructor.
  - type: System.BadImageFormatException
    description: '*assemblyFile* is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and *assemblyFile* was compiled with a later version.'
  - type: System.IO.FileLoadException
    description: An assembly or module was loaded twice with two different evidences.
  - type: System.NullReferenceException
    description: This instance is null.
- uid: System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  id: CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: CreateInstanceFrom(String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])
  name.vb: CreateInstanceFrom(String, String, Boolean, BindingFlags, Binder, Object(), CultureInfo, Object())
  fullName: System.AppDomain.CreateInstanceFrom(System.String, System.String, System.Boolean, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo, System.Object[])
  fullName.vb: System.AppDomain.CreateInstanceFrom(System.String, System.String, System.Boolean, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object(), System.Globalization.CultureInfo, System.Object())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1735
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates a new instance of the specified type defined in the specified assembly file.
  syntax:
    content: public ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes)
    content.vb: Public Function CreateInstanceFrom(assemblyFile As String, typeName As String, ignoreCase As Boolean, bindingAttr As BindingFlags, binder As Binder, args As Object(), culture As CultureInfo, activationAttributes As Object()) As ObjectHandle
    parameters:
    - id: assemblyFile
      type: System.String
      description: The name, including the path, of a file that contains an assembly that defines the requested type. The assembly is loaded using the @'System.Reflection.Assembly.LoadFrom(System.String)'  method.
    - id: typeName
      type: System.String
      description: The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the @'System.Type.FullName' property.
    - id: ignoreCase
      type: System.Boolean
      description: A Boolean value specifying whether to perform a case-sensitive search or not.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A combination of zero or more bit flags that affect the search for the *typeName* constructor. If *bindingAttr* is zero, a case-sensitive search for public constructors is conducted.
    - id: binder
      type: System.Reflection.Binder
      description: An object that enables the binding, coercion of argument types, invocation of members, and retrieval of @'System.Reflection.MemberInfo' objects through reflection. If *binder* is null, the default binder is used.
    - id: args
      type: System.Object[]
      description: The arguments to pass to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to invoke. If the default constructor is preferred, *args* must be an empty array or null.
    - id: culture
      type: System.Globalization.CultureInfo
      description: Culture-specific information that governs the coercion of *args* to the formal types declared for the *typeName* constructor. If *culture* is null, the @'System.Globalization.CultureInfo' for the current thread is used.
    - id: activationAttributes
      type: System.Object[]
      description: An array of one or more attributes that can participate in activation. Typically, an array that contains a single @'System.Runtime.Remoting.Activation.UrlAttribute' object that specifies the URL that is required to activate a remote object. This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: An object that is a wrapper for the new instance, or null if *typeName* is not found. The return value needs to be unwrapped to access the real object.
  exceptions:
  - type: System.ArgumentNullException
    description: '*assemblyFile* is null.-or- *typeName* is null.'
  - type: System.NotSupportedException
    description: The caller cannot provide activation attributes for an object that does not inherit from @'System.MarshalByRefObject'.
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
  - type: System.IO.FileNotFoundException
    description: '*assemblyFile* was not found.'
  - type: System.TypeLoadException
    description: '*typeName* was not found in *assemblyFile*.'
  - type: System.MissingMethodException
    description: No matching public constructor was found.
  - type: System.MethodAccessException
    description: The caller does not have sufficient permission to call this constructor.
  - type: System.BadImageFormatException
    description: '*assemblyFile* is not a valid assembly. -or-*assemblyFile* was compiled with a later version of the common language runtime than the version that is currently loaded.'
  - type: System.IO.FileLoadException
    description: An assembly or module was loaded twice with two different evidences.
  - type: System.NullReferenceException
    description: This instance is null.
- uid: System.AppDomain.Load(System.Reflection.AssemblyName)
  id: Load(System.Reflection.AssemblyName)
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: Load(AssemblyName)
  fullName: System.AppDomain.Load(System.Reflection.AssemblyName)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1780
  assemblies:
  - mscorlib
  namespace: System
  summary: Loads an @'System.Reflection.Assembly' given its @'System.Reflection.AssemblyName'.
  syntax:
    content: public Assembly Load(AssemblyName assemblyRef)
    content.vb: Public Function Load(assemblyRef As AssemblyName) As Assembly
    parameters:
    - id: assemblyRef
      type: System.Reflection.AssemblyName
      description: An object that describes the assembly to load.
    return:
      type: System.Reflection.Assembly
      description: The loaded assembly.
  exceptions:
  - type: System.ArgumentNullException
    description: '*assemblyRef* is null.'
  - type: System.IO.FileNotFoundException
    description: '*assemblyRef* is not found.'
  - type: System.BadImageFormatException
    description: '*assemblyRef* is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and *assemblyRef* was compiled with a later version.'
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
  - type: System.IO.FileLoadException
    description: An assembly or module was loaded twice with two different evidences.
- uid: System.AppDomain.Load(System.String)
  id: Load(System.String)
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: Load(String)
  fullName: System.AppDomain.Load(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1788
  assemblies:
  - mscorlib
  namespace: System
  summary: Loads an @'System.Reflection.Assembly' given its display name.
  syntax:
    content: public Assembly Load(string assemblyString)
    content.vb: Public Function Load(assemblyString As String) As Assembly
    parameters:
    - id: assemblyString
      type: System.String
      description: The display name of the assembly. See @'System.Reflection.Assembly.FullName'.
    return:
      type: System.Reflection.Assembly
      description: The loaded assembly.
  exceptions:
  - type: System.ArgumentNullException
    description: '*assemblyString* is null'
  - type: System.IO.FileNotFoundException
    description: '*assemblyString* is not found.'
  - type: System.BadImageFormatException
    description: '*assemblyString* is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and *assemblyString* was compiled with a later version.'
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
  - type: System.IO.FileLoadException
    description: An assembly or module was loaded twice with two different evidences.
- uid: System.AppDomain.Load(System.Byte[])
  id: Load(System.Byte[])
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: Load(Byte[])
  name.vb: Load(Byte())
  fullName: System.AppDomain.Load(System.Byte[])
  fullName.vb: System.AppDomain.Load(System.Byte())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1796
  assemblies:
  - mscorlib
  namespace: System
  summary: Loads the @'System.Reflection.Assembly' with a common object file format (COFF) based image containing an emitted @'System.Reflection.Assembly'.
  syntax:
    content: public Assembly Load(byte[] rawAssembly)
    content.vb: Public Function Load(rawAssembly As Byte()) As Assembly
    parameters:
    - id: rawAssembly
      type: System.Byte[]
      description: An array of type byte that is a COFF-based image containing an emitted assembly.
    return:
      type: System.Reflection.Assembly
      description: The loaded assembly.
  exceptions:
  - type: System.ArgumentNullException
    description: '*rawAssembly* is null.'
  - type: System.BadImageFormatException
    description: '*rawAssembly* is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and *rawAssembly* was compiled with a later version.'
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
  - type: System.IO.FileLoadException
    description: An assembly or module was loaded twice with two different evidences.
- uid: System.AppDomain.Load(System.Byte[],System.Byte[])
  id: Load(System.Byte[],System.Byte[])
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: Load(Byte[], Byte[])
  name.vb: Load(Byte(), Byte())
  fullName: System.AppDomain.Load(System.Byte[], System.Byte[])
  fullName.vb: System.AppDomain.Load(System.Byte(), System.Byte())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1810
  assemblies:
  - mscorlib
  namespace: System
  summary: Loads the @'System.Reflection.Assembly' with a common object file format (COFF) based image containing an emitted @'System.Reflection.Assembly'. The raw bytes representing the symbols for the @'System.Reflection.Assembly' are also loaded.
  syntax:
    content: public Assembly Load(byte[] rawAssembly, byte[] rawSymbolStore)
    content.vb: Public Function Load(rawAssembly As Byte(), rawSymbolStore As Byte()) As Assembly
    parameters:
    - id: rawAssembly
      type: System.Byte[]
      description: An array of type byte that is a COFF-based image containing an emitted assembly.
    - id: rawSymbolStore
      type: System.Byte[]
      description: An array of type byte containing the raw bytes representing the symbols for the assembly.
    return:
      type: System.Reflection.Assembly
      description: The loaded assembly.
  exceptions:
  - type: System.ArgumentNullException
    description: '*rawAssembly* is null.'
  - type: System.BadImageFormatException
    description: '*rawAssembly* is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and *rawAssembly* was compiled with a later version.'
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
  - type: System.IO.FileLoadException
    description: An assembly or module was loaded twice with two different evidences.
- uid: System.AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)
  id: Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: Load(Byte[], Byte[], Evidence)
  name.vb: Load(Byte(), Byte(), Evidence)
  fullName: System.AppDomain.Load(System.Byte[], System.Byte[], System.Security.Policy.Evidence)
  fullName.vb: System.AppDomain.Load(System.Byte(), System.Byte(), System.Security.Policy.Evidence)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1824
  assemblies:
  - mscorlib
  namespace: System
  summary: Loads the @'System.Reflection.Assembly' with a common object file format (COFF) based image containing an emitted @'System.Reflection.Assembly'. The raw bytes representing the symbols for the @'System.Reflection.Assembly' are also loaded.
  syntax:
    content: public Assembly Load(byte[] rawAssembly, byte[] rawSymbolStore, Evidence securityEvidence)
    content.vb: Public Function Load(rawAssembly As Byte(), rawSymbolStore As Byte(), securityEvidence As Evidence) As Assembly
    parameters:
    - id: rawAssembly
      type: System.Byte[]
      description: An array of type byte that is a COFF-based image containing an emitted assembly.
    - id: rawSymbolStore
      type: System.Byte[]
      description: An array of type byte containing the raw bytes representing the symbols for the assembly.
    - id: securityEvidence
      type: System.Security.Policy.Evidence
      description: Evidence for loading the assembly.
    return:
      type: System.Reflection.Assembly
      description: The loaded assembly.
  exceptions:
  - type: System.ArgumentNullException
    description: '*rawAssembly* is null.'
  - type: System.BadImageFormatException
    description: '*rawAssembly* is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and *rawAssembly* was compiled with a later version.'
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
  - type: System.IO.FileLoadException
    description: An assembly or module was loaded twice with two different evidences.
  - type: System.NotSupportedException
    description: '*securityEvidence* is not null. When legacy CAS policy is not enabled, *securityEvidence* should be null.'
- uid: System.AppDomain.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)
  id: Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: Load(AssemblyName, Evidence)
  fullName: System.AppDomain.Load(System.Reflection.AssemblyName, System.Security.Policy.Evidence)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1850
  assemblies:
  - mscorlib
  namespace: System
  summary: Loads an @'System.Reflection.Assembly' given its @'System.Reflection.AssemblyName'.
  syntax:
    content: public Assembly Load(AssemblyName assemblyRef, Evidence assemblySecurity)
    content.vb: Public Function Load(assemblyRef As AssemblyName, assemblySecurity As Evidence) As Assembly
    parameters:
    - id: assemblyRef
      type: System.Reflection.AssemblyName
      description: An object that describes the assembly to load.
    - id: assemblySecurity
      type: System.Security.Policy.Evidence
      description: Evidence for loading the assembly.
    return:
      type: System.Reflection.Assembly
      description: The loaded assembly.
  exceptions:
  - type: System.ArgumentNullException
    description: '*assemblyRef* is null'
  - type: System.IO.FileNotFoundException
    description: '*assemblyRef* is not found.'
  - type: System.BadImageFormatException
    description: '*assemblyRef* is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and *assemblyRef* was compiled with a later version.'
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
  - type: System.IO.FileLoadException
    description: An assembly or module was loaded twice with two different evidences.
- uid: System.AppDomain.Load(System.String,System.Security.Policy.Evidence)
  id: Load(System.String,System.Security.Policy.Evidence)
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: Load(String, Evidence)
  fullName: System.AppDomain.Load(System.String, System.Security.Policy.Evidence)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1860
  assemblies:
  - mscorlib
  namespace: System
  summary: Loads an @'System.Reflection.Assembly' given its display name.
  syntax:
    content: public Assembly Load(string assemblyString, Evidence assemblySecurity)
    content.vb: Public Function Load(assemblyString As String, assemblySecurity As Evidence) As Assembly
    parameters:
    - id: assemblyString
      type: System.String
      description: The display name of the assembly. See @'System.Reflection.Assembly.FullName'.
    - id: assemblySecurity
      type: System.Security.Policy.Evidence
      description: Evidence for loading the assembly.
    return:
      type: System.Reflection.Assembly
      description: The loaded assembly.
  exceptions:
  - type: System.ArgumentNullException
    description: '*assemblyString* is null'
  - type: System.IO.FileNotFoundException
    description: '*assemblyString* is not found.'
  - type: System.BadImageFormatException
    description: '*assemblyString* is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and *assemblyString* was compiled with a later version.'
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
  - type: System.IO.FileLoadException
    description: An assembly or module was loaded twice with two different evidences.
- uid: System.AppDomain.ExecuteAssembly(System.String)
  id: ExecuteAssembly(System.String)
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: ExecuteAssembly(String)
  fullName: System.AppDomain.ExecuteAssembly(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1870
  assemblies:
  - mscorlib
  namespace: System
  summary: Executes the assembly contained in the specified file.
  syntax:
    content: public int ExecuteAssembly(string assemblyFile)
    content.vb: Public Function ExecuteAssembly(assemblyFile As String) As Integer
    parameters:
    - id: assemblyFile
      type: System.String
      description: The name of the file that contains the assembly to execute.
    return:
      type: System.Int32
      description: The value returned by the entry point of the assembly.
  exceptions:
  - type: System.ArgumentNullException
    description: '*assemblyFile* is null.'
  - type: System.IO.FileNotFoundException
    description: '*assemblyFile* is not found.'
  - type: System.BadImageFormatException
    description: '*assemblyFile* is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and *assemblyFile* was compiled with a later version.'
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
  - type: System.IO.FileLoadException
    description: An assembly or module was loaded twice with two different evidences.
  - type: System.MissingMethodException
    description: The specified assembly has no entry point.
- uid: System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence)
  id: ExecuteAssembly(System.String,System.Security.Policy.Evidence)
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: ExecuteAssembly(String, Evidence)
  fullName: System.AppDomain.ExecuteAssembly(System.String, System.Security.Policy.Evidence)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1875
  assemblies:
  - mscorlib
  namespace: System
  summary: Executes the assembly contained in the specified file, using the specified evidence.
  syntax:
    content: public int ExecuteAssembly(string assemblyFile, Evidence assemblySecurity)
    content.vb: Public Function ExecuteAssembly(assemblyFile As String, assemblySecurity As Evidence) As Integer
    parameters:
    - id: assemblyFile
      type: System.String
      description: The name of the file that contains the assembly to execute.
    - id: assemblySecurity
      type: System.Security.Policy.Evidence
      description: Evidence for loading the assembly.
    return:
      type: System.Int32
      description: The value returned by the entry point of the assembly.
  exceptions:
  - type: System.ArgumentNullException
    description: '*assemblyFile* is null.'
  - type: System.IO.FileNotFoundException
    description: '*assemblyFile* is not found.'
  - type: System.BadImageFormatException
    description: '*assemblyFile* is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and *assemblyFile* was compiled with a later version.'
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
  - type: System.IO.FileLoadException
    description: An assembly or module was loaded twice with two different evidences.
  - type: System.MissingMethodException
    description: The specified assembly has no entry point.
- uid: System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])
  id: ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: ExecuteAssembly(String, Evidence, String[])
  name.vb: ExecuteAssembly(String, Evidence, String())
  fullName: System.AppDomain.ExecuteAssembly(System.String, System.Security.Policy.Evidence, System.String[])
  fullName.vb: System.AppDomain.ExecuteAssembly(System.String, System.Security.Policy.Evidence, System.String())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1882
  assemblies:
  - mscorlib
  namespace: System
  summary: Executes the assembly contained in the specified file, using the specified evidence and arguments.
  syntax:
    content: public int ExecuteAssembly(string assemblyFile, Evidence assemblySecurity, string[] args)
    content.vb: Public Function ExecuteAssembly(assemblyFile As String, assemblySecurity As Evidence, args As String()) As Integer
    parameters:
    - id: assemblyFile
      type: System.String
      description: The name of the file that contains the assembly to execute.
    - id: assemblySecurity
      type: System.Security.Policy.Evidence
      description: The supplied evidence for the assembly.
    - id: args
      type: System.String[]
      description: The arguments to the entry point of the assembly.
    return:
      type: System.Int32
      description: The value returned by the entry point of the assembly.
  exceptions:
  - type: System.ArgumentNullException
    description: '*assemblyFile* is null.'
  - type: System.IO.FileNotFoundException
    description: '*assemblyFile* is not found.'
  - type: System.BadImageFormatException
    description: '*assemblyFile* is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and *assemblyFile* was compiled with a later version.'
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
  - type: System.IO.FileLoadException
    description: An assembly or module was loaded twice with two different evidences.
  - type: System.NotSupportedException
    description: '*assemblySecurity* is not null. When legacy CAS policy is not enabled, *assemblySecurity* should be null.'
  - type: System.MissingMethodException
    description: The specified assembly has no entry point.
- uid: System.AppDomain.ExecuteAssembly(System.String,System.String[])
  id: ExecuteAssembly(System.String,System.String[])
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: ExecuteAssembly(String, String[])
  name.vb: ExecuteAssembly(String, String())
  fullName: System.AppDomain.ExecuteAssembly(System.String, System.String[])
  fullName.vb: System.AppDomain.ExecuteAssembly(System.String, System.String())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1902
  assemblies:
  - mscorlib
  namespace: System
  summary: Executes the assembly contained in the specified file, using the specified arguments.
  syntax:
    content: public int ExecuteAssembly(string assemblyFile, string[] args)
    content.vb: Public Function ExecuteAssembly(assemblyFile As String, args As String()) As Integer
    parameters:
    - id: assemblyFile
      type: System.String
      description: The name of the file that contains the assembly to execute.
    - id: args
      type: System.String[]
      description: The arguments to the entry point of the assembly.
    return:
      type: System.Int32
      description: The value that is returned by the entry point of the assembly.
  exceptions:
  - type: System.ArgumentNullException
    description: '*assemblyFile* is null.'
  - type: System.IO.FileNotFoundException
    description: '*assemblyFile* is not found.'
  - type: System.BadImageFormatException
    description: '*assemblyFile* is not a valid assembly. -or-*assemblyFile* was compiled with a later version of the common language runtime than the version that is currently loaded.'
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
  - type: System.IO.FileLoadException
    description: An assembly or module was loaded twice with two different evidences.
  - type: System.MissingMethodException
    description: The specified assembly has no entry point.
- uid: System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
  id: ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: ExecuteAssembly(String, Evidence, String[], Byte[], AssemblyHashAlgorithm)
  name.vb: ExecuteAssembly(String, Evidence, String(), Byte(), AssemblyHashAlgorithm)
  fullName: System.AppDomain.ExecuteAssembly(System.String, System.Security.Policy.Evidence, System.String[], System.Byte[], System.Configuration.Assemblies.AssemblyHashAlgorithm)
  fullName.vb: System.AppDomain.ExecuteAssembly(System.String, System.Security.Policy.Evidence, System.String(), System.Byte(), System.Configuration.Assemblies.AssemblyHashAlgorithm)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1912
  assemblies:
  - mscorlib
  namespace: System
  summary: Executes the assembly contained in the specified file, using the specified evidence, arguments, hash value, and hash algorithm.
  syntax:
    content: public int ExecuteAssembly(string assemblyFile, Evidence assemblySecurity, string[] args, byte[] hashValue, AssemblyHashAlgorithm hashAlgorithm)
    content.vb: Public Function ExecuteAssembly(assemblyFile As String, assemblySecurity As Evidence, args As String(), hashValue As Byte(), hashAlgorithm As AssemblyHashAlgorithm) As Integer
    parameters:
    - id: assemblyFile
      type: System.String
      description: The name of the file that contains the assembly to execute.
    - id: assemblySecurity
      type: System.Security.Policy.Evidence
      description: The supplied evidence for the assembly.
    - id: args
      type: System.String[]
      description: The arguments to the entry point of the assembly.
    - id: hashValue
      type: System.Byte[]
      description: Represents the value of the computed hash code.
    - id: hashAlgorithm
      type: System.Configuration.Assemblies.AssemblyHashAlgorithm
      description: Represents the hash algorithm used by the assembly manifest.
    return:
      type: System.Int32
      description: The value returned by the entry point of the assembly.
  exceptions:
  - type: System.ArgumentNullException
    description: '*assemblyFile* is null.'
  - type: System.IO.FileNotFoundException
    description: '*assemblyFile* is not found.'
  - type: System.BadImageFormatException
    description: '*assemblyFile* is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and *assemblyFile* was compiled with a later version.'
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
  - type: System.IO.FileLoadException
    description: An assembly or module was loaded twice with two different evidences.
  - type: System.NotSupportedException
    description: '*assemblySecurity* is not null. When legacy CAS policy is not enabled, *assemblySecurity* should be null.'
  - type: System.MissingMethodException
    description: The specified assembly has no entry point.
- uid: System.AppDomain.ExecuteAssembly(System.String,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
  id: ExecuteAssembly(System.String,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: ExecuteAssembly(String, String[], Byte[], AssemblyHashAlgorithm)
  name.vb: ExecuteAssembly(String, String(), Byte(), AssemblyHashAlgorithm)
  fullName: System.AppDomain.ExecuteAssembly(System.String, System.String[], System.Byte[], System.Configuration.Assemblies.AssemblyHashAlgorithm)
  fullName.vb: System.AppDomain.ExecuteAssembly(System.String, System.String(), System.Byte(), System.Configuration.Assemblies.AssemblyHashAlgorithm)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1936
  assemblies:
  - mscorlib
  namespace: System
  summary: Executes the assembly contained in the specified file, using the specified arguments, hash value, and hash algorithm.
  syntax:
    content: public int ExecuteAssembly(string assemblyFile, string[] args, byte[] hashValue, AssemblyHashAlgorithm hashAlgorithm)
    content.vb: Public Function ExecuteAssembly(assemblyFile As String, args As String(), hashValue As Byte(), hashAlgorithm As AssemblyHashAlgorithm) As Integer
    parameters:
    - id: assemblyFile
      type: System.String
      description: The name of the file that contains the assembly to execute.
    - id: args
      type: System.String[]
      description: The arguments to the entry point of the assembly.
    - id: hashValue
      type: System.Byte[]
      description: Represents the value of the computed hash code.
    - id: hashAlgorithm
      type: System.Configuration.Assemblies.AssemblyHashAlgorithm
      description: Represents the hash algorithm used by the assembly manifest.
    return:
      type: System.Int32
      description: The value that is returned by the entry point of the assembly.
  exceptions:
  - type: System.ArgumentNullException
    description: '*assemblyFile* is null.'
  - type: System.IO.FileNotFoundException
    description: '*assemblyFile* is not found.'
  - type: System.BadImageFormatException
    description: '*assemblyFile* is not a valid assembly. -or-*assemblyFile* was compiled with a later version of the common language runtime than the version that is currently loaded.'
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
  - type: System.IO.FileLoadException
    description: An assembly or module was loaded twice with two different evidences.
  - type: System.MissingMethodException
    description: The specified assembly has no entry point.
- uid: System.AppDomain.ExecuteAssemblyByName(System.String)
  id: ExecuteAssemblyByName(System.String)
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: ExecuteAssemblyByName(String)
  fullName: System.AppDomain.ExecuteAssemblyByName(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1951
  assemblies:
  - mscorlib
  namespace: System
  summary: Executes an assembly given its display name.
  syntax:
    content: public int ExecuteAssemblyByName(string assemblyName)
    content.vb: Public Function ExecuteAssemblyByName(assemblyName As String) As Integer
    parameters:
    - id: assemblyName
      type: System.String
      description: The display name of the assembly. See @'System.Reflection.Assembly.FullName'.
    return:
      type: System.Int32
      description: The value returned by the entry point of the assembly.
  exceptions:
  - type: System.ArgumentNullException
    description: '*assemblyName* is null.'
  - type: System.IO.FileNotFoundException
    description: The assembly specified by *assemblyName* is not found.
  - type: System.BadImageFormatException
    description: The assembly specified by *assemblyName* is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and *assemblyName* was compiled with a later version.
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
  - type: System.IO.FileLoadException
    description: The assembly specified by *assemblyName* was found, but could not be loaded.
  - type: System.MissingMethodException
    description: The specified assembly has no entry point.
- uid: System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence)
  id: ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence)
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: ExecuteAssemblyByName(String, Evidence)
  fullName: System.AppDomain.ExecuteAssemblyByName(System.String, System.Security.Policy.Evidence)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1958
  assemblies:
  - mscorlib
  namespace: System
  summary: Executes an assembly given its display name, using the specified evidence.
  syntax:
    content: public int ExecuteAssemblyByName(string assemblyName, Evidence assemblySecurity)
    content.vb: Public Function ExecuteAssemblyByName(assemblyName As String, assemblySecurity As Evidence) As Integer
    parameters:
    - id: assemblyName
      type: System.String
      description: The display name of the assembly. See @'System.Reflection.Assembly.FullName'.
    - id: assemblySecurity
      type: System.Security.Policy.Evidence
      description: Evidence for loading the assembly.
    return:
      type: System.Int32
      description: The value returned by the entry point of the assembly.
  exceptions:
  - type: System.ArgumentNullException
    description: '*assemblyName* is null.'
  - type: System.IO.FileNotFoundException
    description: The assembly specified by *assemblyName* is not found.
  - type: System.IO.FileLoadException
    description: The assembly specified by *assemblyName* was found, but could not be loaded.
  - type: System.BadImageFormatException
    description: The assembly specified by *assemblyName* is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and *assemblyName* was compiled with a later version.
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
  - type: System.MissingMethodException
    description: The specified assembly has no entry point.
- uid: System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence,System.String[])
  id: ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence,System.String[])
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: ExecuteAssemblyByName(String, Evidence, String[])
  name.vb: ExecuteAssemblyByName(String, Evidence, String())
  fullName: System.AppDomain.ExecuteAssemblyByName(System.String, System.Security.Policy.Evidence, System.String[])
  fullName.vb: System.AppDomain.ExecuteAssemblyByName(System.String, System.Security.Policy.Evidence, System.String())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1967
  assemblies:
  - mscorlib
  namespace: System
  summary: Executes the assembly given its display name, using the specified evidence and arguments.
  syntax:
    content: public int ExecuteAssemblyByName(string assemblyName, Evidence assemblySecurity, params string[] args)
    content.vb: Public Function ExecuteAssemblyByName(assemblyName As String, assemblySecurity As Evidence, ParamArray args As String()) As Integer
    parameters:
    - id: assemblyName
      type: System.String
      description: The display name of the assembly. See @'System.Reflection.Assembly.FullName'.
    - id: assemblySecurity
      type: System.Security.Policy.Evidence
      description: Evidence for loading the assembly.
    - id: args
      type: System.String[]
      description: Command-line arguments to pass when starting the process.
    return:
      type: System.Int32
      description: The value returned by the entry point of the assembly.
  exceptions:
  - type: System.ArgumentNullException
    description: '*assemblyName* is null.'
  - type: System.IO.FileNotFoundException
    description: The assembly specified by *assemblyName* is not found.
  - type: System.IO.FileLoadException
    description: The assembly specified by *assemblyName* was found, but could not be loaded.
  - type: System.BadImageFormatException
    description: The assembly specified by *assemblyName* is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and *assemblyName* was compiled with a later version.
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
  - type: System.NotSupportedException
    description: '*assemblySecurity* is not null. When legacy CAS policy is not enabled, *assemblySecurity* should be null.'
  - type: System.MissingMethodException
    description: The specified assembly has no entry point.
- uid: System.AppDomain.ExecuteAssemblyByName(System.String,System.String[])
  id: ExecuteAssemblyByName(System.String,System.String[])
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: ExecuteAssemblyByName(String, String[])
  name.vb: ExecuteAssemblyByName(String, String())
  fullName: System.AppDomain.ExecuteAssemblyByName(System.String, System.String[])
  fullName.vb: System.AppDomain.ExecuteAssemblyByName(System.String, System.String())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1987
  assemblies:
  - mscorlib
  namespace: System
  summary: Executes the assembly given its display name, using the specified arguments.
  syntax:
    content: public int ExecuteAssemblyByName(string assemblyName, params string[] args)
    content.vb: Public Function ExecuteAssemblyByName(assemblyName As String, ParamArray args As String()) As Integer
    parameters:
    - id: assemblyName
      type: System.String
      description: The display name of the assembly. See @'System.Reflection.Assembly.FullName'.
    - id: args
      type: System.String[]
      description: Command-line arguments to pass when starting the process.
    return:
      type: System.Int32
      description: The value that is returned by the entry point of the assembly.
  exceptions:
  - type: System.ArgumentNullException
    description: '*assemblyName* is null.'
  - type: System.IO.FileNotFoundException
    description: The assembly specified by *assemblyName* is not found.
  - type: System.IO.FileLoadException
    description: The assembly specified by *assemblyName* was found, but could not be loaded.
  - type: System.BadImageFormatException
    description: The assembly specified by *assemblyName* is not a valid assembly. -or-*assemblyName* was compiled with a later version of the common language runtime than the version that is currently loaded.
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
  - type: System.MissingMethodException
    description: The specified assembly has no entry point.
- uid: System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.Security.Policy.Evidence,System.String[])
  id: ExecuteAssemblyByName(System.Reflection.AssemblyName,System.Security.Policy.Evidence,System.String[])
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: ExecuteAssemblyByName(AssemblyName, Evidence, String[])
  name.vb: ExecuteAssemblyByName(AssemblyName, Evidence, String())
  fullName: System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName, System.Security.Policy.Evidence, System.String[])
  fullName.vb: System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName, System.Security.Policy.Evidence, System.String())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 1997
  assemblies:
  - mscorlib
  namespace: System
  summary: Executes the assembly given an @'System.Reflection.AssemblyName', using the specified evidence and arguments.
  syntax:
    content: public int ExecuteAssemblyByName(AssemblyName assemblyName, Evidence assemblySecurity, params string[] args)
    content.vb: Public Function ExecuteAssemblyByName(assemblyName As AssemblyName, assemblySecurity As Evidence, ParamArray args As String()) As Integer
    parameters:
    - id: assemblyName
      type: System.Reflection.AssemblyName
      description: An @'System.Reflection.AssemblyName' object representing the name of the assembly.
    - id: assemblySecurity
      type: System.Security.Policy.Evidence
      description: Evidence for loading the assembly.
    - id: args
      type: System.String[]
      description: Command-line arguments to pass when starting the process.
    return:
      type: System.Int32
      description: The value returned by the entry point of the assembly.
  exceptions:
  - type: System.IO.FileNotFoundException
    description: The assembly specified by *assemblyName* is not found.
  - type: System.IO.FileLoadException
    description: The assembly specified by *assemblyName* was found, but could not be loaded.
  - type: System.BadImageFormatException
    description: The assembly specified by *assemblyName* is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and *assemblyName* was compiled with a later version.
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
  - type: System.NotSupportedException
    description: '*assemblySecurity* is not null. When legacy CAS policy is not enabled, *assemblySecurity* should be null.'
  - type: System.MissingMethodException
    description: The specified assembly has no entry point.
- uid: System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.String[])
  id: ExecuteAssemblyByName(System.Reflection.AssemblyName,System.String[])
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: ExecuteAssemblyByName(AssemblyName, String[])
  name.vb: ExecuteAssemblyByName(AssemblyName, String())
  fullName: System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName, System.String[])
  fullName.vb: System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName, System.String())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 2017
  assemblies:
  - mscorlib
  namespace: System
  summary: Executes the assembly given an @'System.Reflection.AssemblyName', using the specified arguments.
  syntax:
    content: public int ExecuteAssemblyByName(AssemblyName assemblyName, params string[] args)
    content.vb: Public Function ExecuteAssemblyByName(assemblyName As AssemblyName, ParamArray args As String()) As Integer
    parameters:
    - id: assemblyName
      type: System.Reflection.AssemblyName
      description: An @'System.Reflection.AssemblyName' object representing the name of the assembly.
    - id: args
      type: System.String[]
      description: Command-line arguments to pass when starting the process.
    return:
      type: System.Int32
      description: The value that is returned by the entry point of the assembly.
  exceptions:
  - type: System.IO.FileNotFoundException
    description: The assembly specified by *assemblyName* is not found.
  - type: System.IO.FileLoadException
    description: The assembly specified by *assemblyName* was found, but could not be loaded.
  - type: System.BadImageFormatException
    description: The assembly specified by *assemblyName* is not a valid assembly. -or-*assemblyName* was compiled with a later version of the common language runtime than the version that is currently loaded.
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
  - type: System.MissingMethodException
    description: The specified assembly has no entry point.
- uid: System.AppDomain.CurrentDomain
  id: CurrentDomain
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: CurrentDomain
  fullName: System.AppDomain.CurrentDomain
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 2027
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the current application domain for the current @'System.Threading.Thread'.
  syntax:
    content: public static AppDomain CurrentDomain { get; }
    content.vb: Public Shared ReadOnly Property CurrentDomain As AppDomain
    parameters: []
    return:
      type: System.AppDomain
      description: The current application domain.
- uid: System.AppDomain.FriendlyName
  id: FriendlyName
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: FriendlyName
  fullName: System.AppDomain.FriendlyName
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 2097
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the friendly name of this application domain.
  syntax:
    content: public string FriendlyName { get; }
    content.vb: Public ReadOnly Property FriendlyName As String
    parameters: []
    return:
      type: System.String
      description: The friendly name of this application domain.
  exceptions:
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
- uid: System.AppDomain.BaseDirectory
  id: BaseDirectory
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: BaseDirectory
  fullName: System.AppDomain.BaseDirectory
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 2103
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the base directory that the assembly resolver uses to probe for assemblies.
  syntax:
    content: public string BaseDirectory { get; }
    content.vb: Public ReadOnly Property BaseDirectory As String
    parameters: []
    return:
      type: System.String
      description: The base directory that the assembly resolver uses to probe for assemblies.
  exceptions:
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
- uid: System.AppDomain.ToString
  id: ToString
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: ToString()
  fullName: System.AppDomain.ToString()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 2132
  assemblies:
  - mscorlib
  namespace: System
  summary: Obtains a string representation that includes the friendly name of the application domain and any context policies.
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: A string formed by concatenating the literal string "Name:", the friendly name of the application domain, and either string representations of the context policies or the string "There are no context policies."
  overridden: System.Object.ToString
  exceptions:
  - type: System.AppDomainUnloadedException
    description: The application domain represented by the current @'System.AppDomain' has been unloaded.
- uid: System.AppDomain.GetAssemblies
  id: GetAssemblies
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: GetAssemblies()
  fullName: System.AppDomain.GetAssemblies()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 2158
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the assemblies that have been loaded into the execution context of this application domain.
  syntax:
    content: public Assembly[] GetAssemblies()
    content.vb: Public Function GetAssemblies As Assembly()
    return:
      type: System.Reflection.Assembly[]
      description: An array of assemblies in this application domain.
  exceptions:
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
- uid: System.AppDomain.ReflectionOnlyGetAssemblies
  id: ReflectionOnlyGetAssemblies
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: ReflectionOnlyGetAssemblies()
  fullName: System.AppDomain.ReflectionOnlyGetAssemblies()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 2164
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the assemblies that have been loaded into the reflection-only context of the application domain.
  syntax:
    content: public Assembly[] ReflectionOnlyGetAssemblies()
    content.vb: Public Function ReflectionOnlyGetAssemblies As Assembly()
    return:
      type: System.Reflection.Assembly[]
      description: An array of @'System.Reflection.Assembly' objects that represent the assemblies loaded into the reflection-only context of the application domain.
  exceptions:
  - type: System.AppDomainUnloadedException
    description: An operation is attempted on an unloaded application domain.
- uid: System.AppDomain.IsFinalizingForUnload
  id: IsFinalizingForUnload
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: IsFinalizingForUnload()
  fullName: System.AppDomain.IsFinalizingForUnload()
  type: Method
  source:
    path: mscorlib
    isExternal: true
  assemblies:
  - mscorlib
  namespace: System
  summary: Indicates whether this application domain is unloading, and the objects it contains are being finalized by the common language runtime.
  syntax:
    content: public bool IsFinalizingForUnload()
    content.vb: Public Function IsFinalizingForUnload As Boolean
    return:
      type: System.Boolean
      description: true if this application domain is unloading and the common language runtime has started invoking finalizers; otherwise, false.
- uid: System.AppDomain.SetData(System.String,System.Object)
  id: SetData(System.String,System.Object)
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: SetData(String, Object)
  fullName: System.AppDomain.SetData(System.String, System.Object)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 2237
  assemblies:
  - mscorlib
  namespace: System
  summary: Assigns the specified value to the specified application domain property.
  syntax:
    content: public void SetData(string name, object data)
    content.vb: Public Sub SetData(name As String, data As Object)
    parameters:
    - id: name
      type: System.String
      description: The name of a user-defined application domain property to create or change.
    - id: data
      type: System.Object
      description: The value of the property.
  exceptions:
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
- uid: System.AppDomain.SetData(System.String,System.Object,System.Security.IPermission)
  id: SetData(System.String,System.Object,System.Security.IPermission)
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: SetData(String, Object, IPermission)
  fullName: System.AppDomain.SetData(System.String, System.Object, System.Security.IPermission)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 2249
  assemblies:
  - mscorlib
  namespace: System
  summary: Assigns the specified value to the specified application domain property, with a specified permission to demand of the caller when the property is retrieved.
  syntax:
    content: public void SetData(string name, object data, IPermission permission)
    content.vb: Public Sub SetData(name As String, data As Object, permission As IPermission)
    parameters:
    - id: name
      type: System.String
      description: The name of a user-defined application domain property to create or change.
    - id: data
      type: System.Object
      description: The value of the property.
    - id: permission
      type: System.Security.IPermission
      description: The permission to demand of the caller when the property is retrieved.
  exceptions:
  - type: System.ArgumentNullException
    description: '*name* is null.'
  - type: System.InvalidOperationException
    description: '*name* specifies a system-defined property string and *permission* is not null.'
- uid: System.AppDomain.GetData(System.String)
  id: GetData(System.String)
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: GetData(String)
  fullName: System.AppDomain.GetData(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 2369
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the value stored in the current application domain for the specified name.
  syntax:
    content: public object GetData(string name)
    content.vb: Public Function GetData(name As String) As Object
    parameters:
    - id: name
      type: System.String
      description: The name of a predefined application domain property, or the name of an application domain property you have defined.
    return:
      type: System.Object
      description: The value of the *name* property, or null if the property does not exist.
  exceptions:
  - type: System.ArgumentNullException
    description: '*name* is null.'
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
- uid: System.AppDomain.IsCompatibilitySwitchSet(System.String)
  id: IsCompatibilitySwitchSet(System.String)
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: IsCompatibilitySwitchSet(String)
  fullName: System.AppDomain.IsCompatibilitySwitchSet(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 2456
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a nullable Boolean value that indicates whether any compatibility switches are set, and if so, whether the specified compatibility switch is set.
  syntax:
    content: public bool ? IsCompatibilitySwitchSet(string value)
    content.vb: Public Function IsCompatibilitySwitchSet(value As String) As Boolean?
    parameters:
    - id: value
      type: System.String
      description: The compatibility switch to test.
    return:
      type: System.Nullable{System.Boolean}
      description: A null reference (Nothing in Visual Basic) if no compatibility switches are set; otherwise, a Boolean value that indicates whether the compatibility switch that is specified by *value* is set.
- uid: System.AppDomain.GetCurrentThreadId
  id: GetCurrentThreadId
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: GetCurrentThreadId()
  fullName: System.AppDomain.GetCurrentThreadId()
  type: Method
  source:
    path: mscorlib
    isExternal: true
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the current thread identifier.
  syntax:
    content: public static int GetCurrentThreadId()
    content.vb: Public Shared Function GetCurrentThreadId As Integer
    return:
      type: System.Int32
      description: A 32-bit signed integer that is the identifier of the current thread.
- uid: System.AppDomain.DynamicDirectory
  id: DynamicDirectory
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: DynamicDirectory
  fullName: System.AppDomain.DynamicDirectory
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 2620
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the directory that the assembly resolver uses to probe for dynamically created assemblies.
  syntax:
    content: public string DynamicDirectory { get; }
    content.vb: Public ReadOnly Property DynamicDirectory As String
    parameters: []
    return:
      type: System.String
      description: The directory that the assembly resolver uses to probe for dynamically created assemblies.
  exceptions:
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
- uid: System.AppDomain.PauseManager
  id: PauseManager
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: PauseManager
  fullName: System.AppDomain.PauseManager
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 2803
  assemblies:
  - mscorlib
  namespace: System
  syntax:
    content: public static IAppDomainPauseManager PauseManager { get; }
    content.vb: Public Shared ReadOnly Property PauseManager As IAppDomainPauseManager
    parameters: []
    return:
      type: System.IAppDomainPauseManager
- uid: System.AppDomain.ProcessExit
  id: ProcessExit
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: ProcessExit
  fullName: System.AppDomain.ProcessExit
  type: Event
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 2907
  assemblies:
  - mscorlib
  namespace: System
  summary: Occurs when the default application domain's parent process exits.
  syntax:
    content: public event EventHandler ProcessExit
    content.vb: Public Event ProcessExit As EventHandler
- uid: System.AppDomain.DomainUnload
  id: DomainUnload
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: DomainUnload
  fullName: System.AppDomain.DomainUnload
  type: Event
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 2927
  assemblies:
  - mscorlib
  namespace: System
  summary: Occurs when an @'System.AppDomain' is about to be unloaded.
  syntax:
    content: public event EventHandler DomainUnload
    content.vb: Public Event DomainUnload As EventHandler
- uid: System.AppDomain.UnhandledException
  id: UnhandledException
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: UnhandledException
  fullName: System.AppDomain.UnhandledException
  type: Event
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 2950
  assemblies:
  - mscorlib
  namespace: System
  summary: Occurs when an exception is not caught.
  syntax:
    content: public event UnhandledExceptionEventHandler UnhandledException
    content.vb: Public Event UnhandledException As UnhandledExceptionEventHandler
- uid: System.AppDomain.SetupInformation
  id: SetupInformation
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: SetupInformation
  fullName: System.AppDomain.SetupInformation
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 4163
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the application domain configuration information for this instance.
  syntax:
    content: public AppDomainSetup SetupInformation { get; }
    content.vb: Public ReadOnly Property SetupInformation As AppDomainSetup
    parameters: []
    return:
      type: System.AppDomainSetup
      description: The application domain initialization information.
  exceptions:
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
- uid: System.AppDomain.PermissionSet
  id: PermissionSet
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: PermissionSet
  fullName: System.AppDomain.PermissionSet
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 4244
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the permission set of a sandboxed application domain.
  syntax:
    content: public PermissionSet PermissionSet { get; }
    content.vb: Public ReadOnly Property PermissionSet As PermissionSet
    parameters: []
    return:
      type: System.Security.PermissionSet
      description: The permission set of the sandboxed application domain.
- uid: System.AppDomain.IsFullyTrusted
  id: IsFullyTrusted
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: IsFullyTrusted
  fullName: System.AppDomain.IsFullyTrusted
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 4264
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value that indicates whether assemblies that are loaded into the current application domain execute with full trust.
  syntax:
    content: public bool IsFullyTrusted { get; }
    content.vb: Public ReadOnly Property IsFullyTrusted As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if assemblies that are loaded into the current application domain execute with full trust; otherwise, false.
- uid: System.AppDomain.IsHomogenous
  id: IsHomogenous
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: IsHomogenous
  fullName: System.AppDomain.IsHomogenous
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 4276
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value that indicates whether the current application domain has a set of permissions that is granted to all assemblies that are loaded into the application domain.
  syntax:
    content: public bool IsHomogenous { get; }
    content.vb: Public ReadOnly Property IsHomogenous As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the current application domain has a homogenous set of permissions; otherwise, false.
- uid: System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)
  id: CreateInstanceAndUnwrap(System.String,System.String)
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: CreateInstanceAndUnwrap(String, String)
  fullName: System.AppDomain.CreateInstanceAndUnwrap(System.String, System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 4345
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates a new instance of the specified type. Parameters specify the assembly where the type is defined, and the name of the type.
  syntax:
    content: public object CreateInstanceAndUnwrap(string assemblyName, string typeName)
    content.vb: Public Function CreateInstanceAndUnwrap(assemblyName As String, typeName As String) As Object
    parameters:
    - id: assemblyName
      type: System.String
      description: The display name of the assembly. See @'System.Reflection.Assembly.FullName'.
    - id: typeName
      type: System.String
      description: The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the @'System.Type.FullName' property.
    return:
      type: System.Object
      description: An instance of the object specified by *typeName*.
  exceptions:
  - type: System.ArgumentNullException
    description: '*assemblyName* or *typeName* is null.'
  - type: System.MissingMethodException
    description: No matching public constructor was found.
  - type: System.TypeLoadException
    description: '*typename* was not found in *assemblyName*.'
  - type: System.IO.FileNotFoundException
    description: '*assemblyName* was not found.'
  - type: System.MethodAccessException
    description: The caller does not have permission to call this constructor.
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
  - type: System.BadImageFormatException
    description: '*assemblyName* is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and *assemblyName* was compiled with a later version.'
  - type: System.IO.FileLoadException
    description: An assembly or module was loaded twice with two different evidences.
- uid: System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])
  id: CreateInstanceAndUnwrap(System.String,System.String,System.Object[])
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: CreateInstanceAndUnwrap(String, String, Object[])
  name.vb: CreateInstanceAndUnwrap(String, String, Object())
  fullName: System.AppDomain.CreateInstanceAndUnwrap(System.String, System.String, System.Object[])
  fullName.vb: System.AppDomain.CreateInstanceAndUnwrap(System.String, System.String, System.Object())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 4356
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates a new instance of the specified type. Parameters specify the assembly where the type is defined, the name of the type, and an array of activation attributes.
  syntax:
    content: public object CreateInstanceAndUnwrap(string assemblyName, string typeName, object[] activationAttributes)
    content.vb: Public Function CreateInstanceAndUnwrap(assemblyName As String, typeName As String, activationAttributes As Object()) As Object
    parameters:
    - id: assemblyName
      type: System.String
      description: The display name of the assembly. See @'System.Reflection.Assembly.FullName'.
    - id: typeName
      type: System.String
      description: The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the @'System.Type.FullName' property.
    - id: activationAttributes
      type: System.Object[]
      description: An array of one or more attributes that can participate in activation. Typically, an array that contains a single @'System.Runtime.Remoting.Activation.UrlAttribute' object that specifies the URL that is required to activate a remote object.  This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.
    return:
      type: System.Object
      description: An instance of the object specified by *typeName*.
  exceptions:
  - type: System.ArgumentNullException
    description: '*assemblyName* or *typeName* is null.'
  - type: System.MissingMethodException
    description: No matching public constructor was found.
  - type: System.TypeLoadException
    description: '*typename* was not found in *assemblyName*.'
  - type: System.IO.FileNotFoundException
    description: '*assemblyName* was not found.'
  - type: System.MethodAccessException
    description: The caller does not have permission to call this constructor.
  - type: System.NotSupportedException
    description: The caller cannot provide activation attributes for an object that does not inherit from @'System.MarshalByRefObject'.
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
  - type: System.BadImageFormatException
    description: '*assemblyName* is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and *assemblyName* was compiled with a later version.'
  - type: System.IO.FileLoadException
    description: An assembly or module was loaded twice with two different evidences.
- uid: System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  id: CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: CreateInstanceAndUnwrap(String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[], Evidence)
  name.vb: CreateInstanceAndUnwrap(String, String, Boolean, BindingFlags, Binder, Object(), CultureInfo, Object(), Evidence)
  fullName: System.AppDomain.CreateInstanceAndUnwrap(System.String, System.String, System.Boolean, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo, System.Object[], System.Security.Policy.Evidence)
  fullName.vb: System.AppDomain.CreateInstanceAndUnwrap(System.String, System.String, System.Boolean, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object(), System.Globalization.CultureInfo, System.Object(), System.Security.Policy.Evidence)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 4368
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates a new instance of the specified type. Parameters specify the name of the type, and how it is found and created.
  syntax:
    content: public object CreateInstanceAndUnwrap(string assemblyName, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, Evidence securityAttributes)
    content.vb: Public Function CreateInstanceAndUnwrap(assemblyName As String, typeName As String, ignoreCase As Boolean, bindingAttr As BindingFlags, binder As Binder, args As Object(), culture As CultureInfo, activationAttributes As Object(), securityAttributes As Evidence) As Object
    parameters:
    - id: assemblyName
      type: System.String
      description: The display name of the assembly. See @'System.Reflection.Assembly.FullName'.
    - id: typeName
      type: System.String
      description: The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the @'System.Type.FullName' property.
    - id: ignoreCase
      type: System.Boolean
      description: A Boolean value specifying whether to perform a case-sensitive search or not.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A combination of zero or more bit flags that affect the search for the *typeName* constructor. If *bindingAttr* is zero, a case-sensitive search for public constructors is conducted.
    - id: binder
      type: System.Reflection.Binder
      description: An object that enables the binding, coercion of argument types, invocation of members, and retrieval of @'System.Reflection.MemberInfo' objects using reflection. If *binder* is null, the default binder is used.
    - id: args
      type: System.Object[]
      description: The arguments to pass to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to invoke. If the default constructor is preferred, *args* must be an empty array or null.
    - id: culture
      type: System.Globalization.CultureInfo
      description: A culture-specific object used to govern the coercion of types. If *culture* is null, the CultureInfo for the current thread is used.
    - id: activationAttributes
      type: System.Object[]
      description: An array of one or more attributes that can participate in activation. Typically, an array that contains a single @'System.Runtime.Remoting.Activation.UrlAttribute' object that specifies the URL that is required to activate a remote object.  This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.
    - id: securityAttributes
      type: System.Security.Policy.Evidence
      description: Information used to authorize creation of *typeName*.
    return:
      type: System.Object
      description: An instance of the object specified by *typeName*.
  exceptions:
  - type: System.ArgumentNullException
    description: '*assemblyName* or *typeName* is null.'
  - type: System.MissingMethodException
    description: No matching constructor was found.
  - type: System.TypeLoadException
    description: '*typename* was not found in *assemblyName*.'
  - type: System.IO.FileNotFoundException
    description: '*assemblyName* was not found.'
  - type: System.MethodAccessException
    description: The caller does not have permission to call this constructor.
  - type: System.NotSupportedException
    description: The caller cannot provide activation attributes for an object that does not inherit from @'System.MarshalByRefObject'.
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
  - type: System.BadImageFormatException
    description: '*assemblyName* is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and *assemblyName* was compiled with a later version.'
  - type: System.IO.FileLoadException
    description: An assembly or module was loaded twice with two different evidences.
- uid: System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  id: CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: CreateInstanceAndUnwrap(String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])
  name.vb: CreateInstanceAndUnwrap(String, String, Boolean, BindingFlags, Binder, Object(), CultureInfo, Object())
  fullName: System.AppDomain.CreateInstanceAndUnwrap(System.String, System.String, System.Boolean, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo, System.Object[])
  fullName.vb: System.AppDomain.CreateInstanceAndUnwrap(System.String, System.String, System.Boolean, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object(), System.Globalization.CultureInfo, System.Object())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 4390
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates a new instance of the specified type defined in the specified assembly, specifying whether the case of the type name is ignored; the binding attributes and the binder that are used to select the type to be created; the arguments of the constructor; the culture; and the activation attributes.
  syntax:
    content: public object CreateInstanceAndUnwrap(string assemblyName, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes)
    content.vb: Public Function CreateInstanceAndUnwrap(assemblyName As String, typeName As String, ignoreCase As Boolean, bindingAttr As BindingFlags, binder As Binder, args As Object(), culture As CultureInfo, activationAttributes As Object()) As Object
    parameters:
    - id: assemblyName
      type: System.String
      description: The display name of the assembly. See @'System.Reflection.Assembly.FullName'.
    - id: typeName
      type: System.String
      description: The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the @'System.Type.FullName' property.
    - id: ignoreCase
      type: System.Boolean
      description: A Boolean value specifying whether to perform a case-sensitive search or not.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A combination of zero or more bit flags that affect the search for the *typeName* constructor. If *bindingAttr* is zero, a case-sensitive search for public constructors is conducted.
    - id: binder
      type: System.Reflection.Binder
      description: An object that enables the binding, coercion of argument types, invocation of members, and retrieval of @'System.Reflection.MemberInfo' objects using reflection. If *binder* is null, the default binder is used.
    - id: args
      type: System.Object[]
      description: The arguments to pass to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to invoke. If the default constructor is preferred, *args* must be an empty array or null.
    - id: culture
      type: System.Globalization.CultureInfo
      description: A culture-specific object used to govern the coercion of types. If *culture* is null, the CultureInfo for the current thread is used.
    - id: activationAttributes
      type: System.Object[]
      description: An array of one or more attributes that can participate in activation. Typically, an array that contains a single @'System.Runtime.Remoting.Activation.UrlAttribute' object. that specifies the URL that is required to activate a remote object. This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.
    return:
      type: System.Object
      description: An instance of the object specified by *typeName*.
  exceptions:
  - type: System.ArgumentNullException
    description: '*assemblyName* or *typeName* is null.'
  - type: System.MissingMethodException
    description: No matching constructor was found.
  - type: System.TypeLoadException
    description: '*typename* was not found in *assemblyName*.'
  - type: System.IO.FileNotFoundException
    description: '*assemblyName* was not found.'
  - type: System.MethodAccessException
    description: The caller does not have permission to call this constructor.
  - type: System.NotSupportedException
    description: The caller cannot provide activation attributes for an object that does not inherit from @'System.MarshalByRefObject'.
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
  - type: System.BadImageFormatException
    description: '*assemblyName* is not a valid assembly. -or-*assemblyName* was compiled with a later version of the common language runtime than the version that is currently loaded.'
  - type: System.IO.FileLoadException
    description: An assembly or module was loaded twice with two different evidences.
- uid: System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String)
  id: CreateInstanceFromAndUnwrap(System.String,System.String)
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: CreateInstanceFromAndUnwrap(String, String)
  fullName: System.AppDomain.CreateInstanceFromAndUnwrap(System.String, System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 4418
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates a new instance of the specified type defined in the specified assembly file.
  syntax:
    content: public object CreateInstanceFromAndUnwrap(string assemblyName, string typeName)
    content.vb: Public Function CreateInstanceFromAndUnwrap(assemblyName As String, typeName As String) As Object
    parameters:
    - id: assemblyName
      type: System.String
      description: The file name and path of the assembly that defines the requested type.
    - id: typeName
      type: System.String
      description: The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the @'System.Type.FullName' property.
    return:
      type: System.Object
      description: The requested object, or null if *typeName* is not found.
  exceptions:
  - type: System.ArgumentNullException
    description: '*assemblyName* is null.-or- *typeName* is null.'
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
  - type: System.IO.FileNotFoundException
    description: '*assemblyName* was not found.'
  - type: System.TypeLoadException
    description: '*typeName* was not found in *assemblyName*.'
  - type: System.MissingMethodException
    description: No parameterless public constructor was found.
  - type: System.MethodAccessException
    description: The caller does not have sufficient permission to call this constructor.
  - type: System.BadImageFormatException
    description: '*assemblyName* is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and *assemblyName* was compiled with a later version.'
  - type: System.IO.FileLoadException
    description: An assembly or module was loaded twice with two different evidences.
- uid: System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])
  id: CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: CreateInstanceFromAndUnwrap(String, String, Object[])
  name.vb: CreateInstanceFromAndUnwrap(String, String, Object())
  fullName: System.AppDomain.CreateInstanceFromAndUnwrap(System.String, System.String, System.Object[])
  fullName.vb: System.AppDomain.CreateInstanceFromAndUnwrap(System.String, System.String, System.Object())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 4431
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates a new instance of the specified type defined in the specified assembly file.
  syntax:
    content: public object CreateInstanceFromAndUnwrap(string assemblyName, string typeName, object[] activationAttributes)
    content.vb: Public Function CreateInstanceFromAndUnwrap(assemblyName As String, typeName As String, activationAttributes As Object()) As Object
    parameters:
    - id: assemblyName
      type: System.String
      description: The file name and path of the assembly that defines the requested type.
    - id: typeName
      type: System.String
      description: The fully qualified name of the requested type, including the namespace but not the assembly (see the @'System.Type.FullName' property).
    - id: activationAttributes
      type: System.Object[]
      description: An array of one or more attributes that can participate in activation. Typically, an array that contains a single @'System.Runtime.Remoting.Activation.UrlAttribute' object that specifies the URL that is required to activate a remote object.  This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.
    return:
      type: System.Object
      description: The requested object, or null if *typeName* is not found.
  exceptions:
  - type: System.ArgumentNullException
    description: '*assemblyName* is null.-or- *typeName* is null.'
  - type: System.NotSupportedException
    description: The caller cannot provide activation attributes for an object that does not inherit from @'System.MarshalByRefObject'.
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
  - type: System.IO.FileNotFoundException
    description: '*assemblyName* was not found.'
  - type: System.TypeLoadException
    description: '*typeName* was not found in *assemblyName*.'
  - type: System.MissingMethodException
    description: No parameterless public constructor was found.
  - type: System.MethodAccessException
    description: The caller does not have sufficient permission to call this constructor.
  - type: System.BadImageFormatException
    description: '*assemblyName* is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and *assemblyName* was compiled with a later version.'
  - type: System.IO.FileLoadException
    description: An assembly or module was loaded twice with two different evidences.
- uid: System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  id: CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: CreateInstanceFromAndUnwrap(String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[], Evidence)
  name.vb: CreateInstanceFromAndUnwrap(String, String, Boolean, BindingFlags, Binder, Object(), CultureInfo, Object(), Evidence)
  fullName: System.AppDomain.CreateInstanceFromAndUnwrap(System.String, System.String, System.Boolean, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo, System.Object[], System.Security.Policy.Evidence)
  fullName.vb: System.AppDomain.CreateInstanceFromAndUnwrap(System.String, System.String, System.Boolean, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object(), System.Globalization.CultureInfo, System.Object(), System.Security.Policy.Evidence)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 4445
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates a new instance of the specified type defined in the specified assembly file.
  syntax:
    content: public object CreateInstanceFromAndUnwrap(string assemblyName, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, Evidence securityAttributes)
    content.vb: Public Function CreateInstanceFromAndUnwrap(assemblyName As String, typeName As String, ignoreCase As Boolean, bindingAttr As BindingFlags, binder As Binder, args As Object(), culture As CultureInfo, activationAttributes As Object(), securityAttributes As Evidence) As Object
    parameters:
    - id: assemblyName
      type: System.String
      description: The file name and path of the assembly that defines the requested type.
    - id: typeName
      type: System.String
      description: The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the @'System.Type.FullName' property.
    - id: ignoreCase
      type: System.Boolean
      description: A Boolean value specifying whether to perform a case-sensitive search or not.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A combination of zero or more bit flags that affect the search for the *typeName* constructor. If *bindingAttr* is zero, a case-sensitive search for public constructors is conducted.
    - id: binder
      type: System.Reflection.Binder
      description: An object that enables the binding, coercion of argument types, invocation of members, and retrieval of @'System.Reflection.MemberInfo' objects through reflection. If *binder* is null, the default binder is used.
    - id: args
      type: System.Object[]
      description: The arguments to pass to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to invoke. If the default constructor is preferred, *args* must be an empty array or null.
    - id: culture
      type: System.Globalization.CultureInfo
      description: Culture-specific information that governs the coercion of *args* to the formal types declared for the *typeName* constructor. If *culture* is null, the @'System.Globalization.CultureInfo' for the current thread is used.
    - id: activationAttributes
      type: System.Object[]
      description: An array of one or more attributes that can participate in activation. Typically, an array that contains a single @'System.Runtime.Remoting.Activation.UrlAttribute' object that specifies the URL that is required to activate a remote object.  This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.
    - id: securityAttributes
      type: System.Security.Policy.Evidence
      description: Information used to authorize creation of *typeName*.
    return:
      type: System.Object
      description: The requested object, or null if *typeName* is not found.
  exceptions:
  - type: System.ArgumentNullException
    description: '*assemblyName* is null.-or- *typeName* is null.'
  - type: System.NotSupportedException
    description: The caller cannot provide activation attributes for an object that does not inherit from @'System.MarshalByRefObject'.
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
  - type: System.IO.FileNotFoundException
    description: '*assemblyName* was not found.'
  - type: System.TypeLoadException
    description: '*typeName* was not found in *assemblyName*.'
  - type: System.MissingMethodException
    description: No matching public constructor was found.
  - type: System.MethodAccessException
    description: The caller does not have sufficient permission to call this constructor.
  - type: System.BadImageFormatException
    description: '*assemblyName* is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and *assemblyName* was compiled with a later version.'
  - type: System.IO.FileLoadException
    description: An assembly or module was loaded twice with two different evidences.
- uid: System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  id: CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: CreateInstanceFromAndUnwrap(String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])
  name.vb: CreateInstanceFromAndUnwrap(String, String, Boolean, BindingFlags, Binder, Object(), CultureInfo, Object())
  fullName: System.AppDomain.CreateInstanceFromAndUnwrap(System.String, System.String, System.Boolean, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo, System.Object[])
  fullName.vb: System.AppDomain.CreateInstanceFromAndUnwrap(System.String, System.String, System.Boolean, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object(), System.Globalization.CultureInfo, System.Object())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 4467
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates a new instance of the specified type defined in the specified assembly file, specifying whether the case of the type name is ignored; the binding attributes and the binder that are used to select the type to be created; the arguments of the constructor; the culture; and the activation attributes.
  syntax:
    content: public object CreateInstanceFromAndUnwrap(string assemblyFile, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes)
    content.vb: Public Function CreateInstanceFromAndUnwrap(assemblyFile As String, typeName As String, ignoreCase As Boolean, bindingAttr As BindingFlags, binder As Binder, args As Object(), culture As CultureInfo, activationAttributes As Object()) As Object
    parameters:
    - id: assemblyFile
      type: System.String
      description: The file name and path of the assembly that defines the requested type.
    - id: typeName
      type: System.String
      description: The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the @'System.Type.FullName' property.
    - id: ignoreCase
      type: System.Boolean
      description: A Boolean value specifying whether to perform a case-sensitive search or not.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A combination of zero or more bit flags that affect the search for the *typeName* constructor. If *bindingAttr* is zero, a case-sensitive search for public constructors is conducted.
    - id: binder
      type: System.Reflection.Binder
      description: An object that enables the binding, coercion of argument types, invocation of members, and retrieval of @'System.Reflection.MemberInfo' objects through reflection. If *binder* is null, the default binder is used.
    - id: args
      type: System.Object[]
      description: The arguments to pass to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to invoke. If the default constructor is preferred, *args* must be an empty array or null.
    - id: culture
      type: System.Globalization.CultureInfo
      description: Culture-specific information that governs the coercion of *args* to the formal types declared for the *typeName* constructor. If *culture* is null, the @'System.Globalization.CultureInfo' for the current thread is used.
    - id: activationAttributes
      type: System.Object[]
      description: An array of one or more attributes that can participate in activation. Typically, an array that contains a single @'System.Runtime.Remoting.Activation.UrlAttribute' object that specifies the URL that is required to activate a remote object. This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.
    return:
      type: System.Object
      description: The requested object, or null if *typeName* is not found.
  exceptions:
  - type: System.ArgumentNullException
    description: '*assemblyName* is null.-or- *typeName* is null.'
  - type: System.NotSupportedException
    description: The caller cannot provide activation attributes for an object that does not inherit from @'System.MarshalByRefObject'.
  - type: System.AppDomainUnloadedException
    description: The operation is attempted on an unloaded application domain.
  - type: System.IO.FileNotFoundException
    description: '*assemblyName* was not found.'
  - type: System.TypeLoadException
    description: '*typeName* was not found in *assemblyName*.'
  - type: System.MissingMethodException
    description: No matching public constructor was found.
  - type: System.MethodAccessException
    description: The caller does not have sufficient permission to call this constructor.
  - type: System.BadImageFormatException
    description: '*assemblyName* is not a valid assembly. -or-*assemblyName* was compiled with a later version of the common language runtime that the version that is currently loaded.'
  - type: System.IO.FileLoadException
    description: An assembly or module was loaded twice with two different evidences.
- uid: System.AppDomain.Id
  id: Id
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: Id
  fullName: System.AppDomain.Id
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 4492
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets an integer that uniquely identifies the application domain within the process.
  syntax:
    content: public int Id { get; }
    content.vb: Public ReadOnly Property Id As Integer
    parameters: []
    return:
      type: System.Int32
      description: An integer that identifies the application domain.
- uid: System.AppDomain.IsDefaultAppDomain
  id: IsDefaultAppDomain
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: IsDefaultAppDomain()
  fullName: System.AppDomain.IsDefaultAppDomain()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 4507
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a value that indicates whether the application domain is the default application domain for the process.
  syntax:
    content: public bool IsDefaultAppDomain()
    content.vb: Public Function IsDefaultAppDomain As Boolean
    return:
      type: System.Boolean
      description: true if the current @'System.AppDomain' object represents the default application domain for the process; otherwise, false.
- uid: System.AppDomain.MonitoringIsEnabled
  id: MonitoringIsEnabled
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: MonitoringIsEnabled
  fullName: System.AppDomain.MonitoringIsEnabled
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 4576
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets or sets a value that indicates whether CPU and memory monitoring of application domains is enabled for the current process. Once monitoring is enabled for a process, it cannot be disabled.
  syntax:
    content: public static bool MonitoringIsEnabled { get; set; }
    content.vb: Public Shared Property MonitoringIsEnabled As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if monitoring is enabled; otherwise false.
  exceptions:
  - type: System.ArgumentException
    description: The current process attempted to assign the value false to this property.
- uid: System.AppDomain.MonitoringTotalProcessorTime
  id: MonitoringTotalProcessorTime
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: MonitoringTotalProcessorTime
  fullName: System.AppDomain.MonitoringTotalProcessorTime
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 4598
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the total processor time that has been used by all threads while executing in the current application domain, since the process started.
  syntax:
    content: public TimeSpan MonitoringTotalProcessorTime { get; }
    content.vb: Public ReadOnly Property MonitoringTotalProcessorTime As TimeSpan
    parameters: []
    return:
      type: System.TimeSpan
      description: Total processor time for the current application domain.
  exceptions:
  - type: System.InvalidOperationException
    description: The static (Shared in Visual Basic) @'System.AppDomain.MonitoringIsEnabled' property is set to false.
- uid: System.AppDomain.MonitoringTotalAllocatedMemorySize
  id: MonitoringTotalAllocatedMemorySize
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: MonitoringTotalAllocatedMemorySize
  fullName: System.AppDomain.MonitoringTotalAllocatedMemorySize
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 4614
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the total size, in bytes, of all memory allocations that have been made by the application domain since it was created, without subtracting memory that has been collected.
  syntax:
    content: public long MonitoringTotalAllocatedMemorySize { get; }
    content.vb: Public ReadOnly Property MonitoringTotalAllocatedMemorySize As Long
    parameters: []
    return:
      type: System.Int64
      description: The total size of all memory allocations.
  exceptions:
  - type: System.InvalidOperationException
    description: The static (Shared in Visual Basic) @'System.AppDomain.MonitoringIsEnabled' property is set to false.
- uid: System.AppDomain.MonitoringSurvivedMemorySize
  id: MonitoringSurvivedMemorySize
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: MonitoringSurvivedMemorySize
  fullName: System.AppDomain.MonitoringSurvivedMemorySize
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 4632
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the number of bytes that survived the last collection and that are known to be referenced by the current application domain.
  syntax:
    content: public long MonitoringSurvivedMemorySize { get; }
    content.vb: Public ReadOnly Property MonitoringSurvivedMemorySize As Long
    parameters: []
    return:
      type: System.Int64
      description: The number of surviving bytes.
  exceptions:
  - type: System.InvalidOperationException
    description: The static (Shared in Visual Basic) @'System.AppDomain.MonitoringIsEnabled' property is set to false.
- uid: System.AppDomain.MonitoringSurvivedProcessMemorySize
  id: MonitoringSurvivedProcessMemorySize
  parent: System.AppDomain
  href: System.AppDomain.yml
  name: MonitoringSurvivedProcessMemorySize
  fullName: System.AppDomain.MonitoringSurvivedProcessMemorySize
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/AppDomain.cs
    startLine: 4652
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the total bytes that survived from the last collection for all application domains in the process.
  syntax:
    content: public static long MonitoringSurvivedProcessMemorySize { get; }
    content.vb: Public Shared ReadOnly Property MonitoringSurvivedProcessMemorySize As Long
    parameters: []
    return:
      type: System.Int64
      description: The total number of surviving bytes for the process.
  exceptions:
  - type: System.InvalidOperationException
    description: The static (Shared in Visual Basic) @'System.AppDomain.MonitoringIsEnabled' property is set to false.
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.AppDomainManager
  parent: System
  isExternal: false
  href: System.AppDomainManager.yml
  name: AppDomainManager
  fullName: System.AppDomainManager
  type: Class
- uid: System.Reflection.AssemblyName
  parent: System.Reflection
  isExternal: false
  href: System.Reflection.AssemblyName.yml
  name: AssemblyName
  fullName: System.Reflection.AssemblyName
  type: Class
- uid: System.Reflection.Emit.AssemblyBuilderAccess
  parent: System.Reflection.Emit
  isExternal: false
  href: System.Reflection.Emit.AssemblyBuilderAccess.yml
  name: AssemblyBuilderAccess
  fullName: System.Reflection.Emit.AssemblyBuilderAccess
  type: Enum
- uid: System.Reflection.Emit.AssemblyBuilder
  parent: System.Reflection.Emit
  isExternal: false
  href: System.Reflection.Emit.AssemblyBuilder.yml
  name: AssemblyBuilder
  fullName: System.Reflection.Emit.AssemblyBuilder
  type: Class
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
  type: Namespace
- uid: System.Reflection.Emit
  isExternal: false
  name: System.Reflection.Emit
  fullName: System.Reflection.Emit
  type: Namespace
- uid: System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: System.Collections.Generic.IEnumerable`1.yml
  name: IEnumerable<CustomAttributeBuilder>
  name.vb: IEnumerable(Of CustomAttributeBuilder)
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.Emit.CustomAttributeBuilder>
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.Emit.CustomAttributeBuilder)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: <
    fullName: <
  - uid: System.Reflection.Emit.CustomAttributeBuilder
    name: CustomAttributeBuilder
    fullName: System.Reflection.Emit.CustomAttributeBuilder
    href: System.Reflection.Emit.CustomAttributeBuilder.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.Emit.CustomAttributeBuilder
    name: CustomAttributeBuilder
    fullName: System.Reflection.Emit.CustomAttributeBuilder
    href: System.Reflection.Emit.CustomAttributeBuilder.yml
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<T>
  name.vb: IEnumerable(Of T)
  fullName: System.Collections.Generic.IEnumerable<T>
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Security.SecurityContextSource
  parent: System.Security
  isExternal: false
  href: System.Security.SecurityContextSource.yml
  name: SecurityContextSource
  fullName: System.Security.SecurityContextSource
  type: Enum
- uid: System.Security
  isExternal: false
  name: System.Security
  fullName: System.Security
  type: Namespace
- uid: System.String
  parent: System
  isExternal: true
  name: String
  fullName: System.String
- uid: System.Security.Policy.Evidence
  parent: System.Security.Policy
  isExternal: false
  href: System.Security.Policy.Evidence.yml
  name: Evidence
  fullName: System.Security.Policy.Evidence
  type: Class
  summary: >-
    The Evidence class keeps track of information that can be used to make security decisions about

    an assembly or an AppDomain.  There are two types of evidence, one is supplied by the CLR or a

    host, the other supplied by the assembly itself.



    We keep a dictionary that maps each type of possbile evidence to an EvidenceTypeDescriptor which

    contains the evidence objects themselves if they exist as well as some extra metadata about that

    type of evidence.  This dictionary is fully populated with keys for host evidence at all times and

    for assembly evidence the first time the application evidence is touched.  This means that if a

    Type key does not exist in the dictionary, then that particular type of evidence will never be

    given to the assembly or AppDomain in question as host evidence.  The only exception is if the

    user later manually adds host evidence via the AddHostEvidence API.



    Assembly supplied evidence is created up front, however host supplied evidence may be lazily

    created.  In the lazy creation case, the Type will map to either an EvidenceTypeDescriptor that does

    not contain any evidence data or null.  As requests come in for that evidence, we'll populate the

    EvidenceTypeDescriptor appropriately.
- uid: System.Security.Policy
  isExternal: false
  name: System.Security.Policy
  fullName: System.Security.Policy
  type: Namespace
- uid: System.Security.PermissionSet
  parent: System.Security
  isExternal: false
  href: System.Security.PermissionSet.yml
  name: PermissionSet
  fullName: System.Security.PermissionSet
  type: Class
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: System.Runtime.Remoting.ObjectHandle
  parent: System.Runtime.Remoting
  isExternal: false
  href: System.Runtime.Remoting.ObjectHandle.yml
  name: ObjectHandle
  fullName: System.Runtime.Remoting.ObjectHandle
  type: Class
- uid: System.Runtime.Remoting
  isExternal: false
  name: System.Runtime.Remoting
  fullName: System.Runtime.Remoting
  type: Namespace
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  name.vb: Byte()
  fullName: System.Byte[]
  fullName.vb: System.Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Configuration.Assemblies.AssemblyHashAlgorithm
  parent: System.Configuration.Assemblies
  isExternal: false
  href: System.Configuration.Assemblies.AssemblyHashAlgorithm.yml
  name: AssemblyHashAlgorithm
  fullName: System.Configuration.Assemblies.AssemblyHashAlgorithm
  type: Enum
- uid: System.Configuration.Assemblies
  isExternal: false
  name: System.Configuration.Assemblies
  fullName: System.Configuration.Assemblies
  type: Namespace
- uid: System.Object[]
  isExternal: true
  name: Object[]
  name.vb: Object()
  fullName: System.Object[]
  fullName.vb: System.Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: true
  name: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  href: System.Reflection.Binder.yml
  name: Binder
  fullName: System.Reflection.Binder
  type: Class
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Globalization
  isExternal: false
  name: System.Globalization
  fullName: System.Globalization
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  fullName: System.Int32
- uid: System.String[]
  isExternal: true
  name: String[]
  name.vb: String()
  fullName: System.String[]
  fullName.vb: System.String()
  spec.csharp:
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.AppDomain
  parent: System
  isExternal: false
  href: System.AppDomain.yml
  name: AppDomain
  fullName: System.AppDomain
  type: Class
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Reflection.Assembly[]
  isExternal: false
  href: System.Reflection.Assembly.yml
  name: Assembly[]
  name.vb: Assembly()
  fullName: System.Reflection.Assembly[]
  fullName.vb: System.Reflection.Assembly()
  spec.csharp:
  - uid: System.Reflection.Assembly
    name: Assembly
    fullName: System.Reflection.Assembly
    href: System.Reflection.Assembly.yml
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.Assembly
    name: Assembly
    fullName: System.Reflection.Assembly
    href: System.Reflection.Assembly.yml
  - name: ()
    fullName: ()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  href: System.Security.IPermission.yml
  name: IPermission
  fullName: System.Security.IPermission
  type: Interface
- uid: System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  name.vb: Nullable(Of Boolean)
  fullName: System.Nullable<System.Boolean>
  fullName.vb: System.Nullable(Of System.Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Nullable`1
  parent: System
  isExternal: true
  name: Nullable<T>
  name.vb: Nullable(Of T)
  fullName: System.Nullable<T>
  fullName.vb: System.Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.IAppDomainPauseManager
  parent: System
  isExternal: false
  href: System.IAppDomainPauseManager.yml
  name: IAppDomainPauseManager
  fullName: System.IAppDomainPauseManager
  type: Interface
- uid: System.AppDomainSetup
  parent: System
  isExternal: false
  href: System.AppDomainSetup.yml
  name: AppDomainSetup
  fullName: System.AppDomainSetup
  type: Class
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  fullName: System.TimeSpan
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  fullName: System.Int64
