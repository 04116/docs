items:
- uid: System.IO.FileInfo
  id: FileInfo
  parent: System.IO
  children:
  - System.IO.FileInfo.#ctor(System.String)
  - System.IO.FileInfo.AppendText
  - System.IO.FileInfo.CopyTo(System.String)
  - System.IO.FileInfo.CopyTo(System.String,System.Boolean)
  - System.IO.FileInfo.Create
  - System.IO.FileInfo.CreateText
  - System.IO.FileInfo.Decrypt
  - System.IO.FileInfo.Delete
  - System.IO.FileInfo.Directory
  - System.IO.FileInfo.DirectoryName
  - System.IO.FileInfo.Encrypt
  - System.IO.FileInfo.Exists
  - System.IO.FileInfo.IsReadOnly
  - System.IO.FileInfo.Length
  - System.IO.FileInfo.MoveTo(System.String)
  - System.IO.FileInfo.Name
  - System.IO.FileInfo.Open(System.IO.FileMode)
  - System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess)
  - System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  - System.IO.FileInfo.OpenRead
  - System.IO.FileInfo.OpenText
  - System.IO.FileInfo.OpenWrite
  - System.IO.FileInfo.Replace(System.String,System.String)
  - System.IO.FileInfo.Replace(System.String,System.String,System.Boolean)
  - System.IO.FileInfo.ToString
  - System.IO.FileInfo.UnsafeCreateFileInfo(System.String)
  href: System.IO.FileInfo.yml
  name: FileInfo
  fullName: System.IO.FileInfo
  type: Class
  source:
    remote: &o0
      path: src/mscorlib/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/chenkennt/coreclr.git
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 32
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Provides properties and instance methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of @'System.IO.FileStream' objects. This class cannot be inherited.To browse the .NET Framework source code for this type, see the Reference Source.
  syntax:
    content: 'public sealed class FileInfo : FileSystemInfo, ISerializable'
    content.vb: Public NotInheritable Class FileInfo Inherits FileSystemInfo Implements ISerializable
  inheritance:
  - System.Object
  - System.IO.FileSystemInfo
  implements:
  - System.Runtime.Serialization.ISerializable
  inheritedMembers:
  - System.IO.FileSystemInfo.FullPath
  - System.IO.FileSystemInfo.OriginalPath
  - System.IO.FileSystemInfo.FullName
  - System.IO.FileSystemInfo.Extension
  - System.IO.FileSystemInfo.CreationTime
  - System.IO.FileSystemInfo.CreationTimeUtc
  - System.IO.FileSystemInfo.LastAccessTime
  - System.IO.FileSystemInfo.LastAccessTimeUtc
  - System.IO.FileSystemInfo.LastWriteTime
  - System.IO.FileSystemInfo.LastWriteTimeUtc
  - System.IO.FileSystemInfo.Refresh
  - System.IO.FileSystemInfo.Attributes
  - System.IO.FileSystemInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.IO.FileInfo.UnsafeCreateFileInfo(System.String)
  id: UnsafeCreateFileInfo(System.String)
  parent: System.IO.FileInfo
  href: System.IO.FileInfo.yml
  name: UnsafeCreateFileInfo(String)
  fullName: System.IO.FileInfo.UnsafeCreateFileInfo(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 47
  assemblies:
  - mscorlib
  namespace: System.IO
  syntax:
    content: public static FileInfo UnsafeCreateFileInfo(string fileName)
    content.vb: Public Shared Function UnsafeCreateFileInfo(fileName As String) As FileInfo
    parameters:
    - id: fileName
      type: System.String
    return:
      type: System.IO.FileInfo
- uid: System.IO.FileInfo.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.IO.FileInfo
  href: System.IO.FileInfo.yml
  name: FileInfo(String)
  fullName: System.IO.FileInfo.FileInfo(System.String)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 60
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Initializes a new instance of the @'System.IO.FileInfo' class, which acts as a wrapper for a file path.
  syntax:
    content: public FileInfo(string fileName)
    content.vb: Public Sub New(fileName As String)
    parameters:
    - id: fileName
      type: System.String
      description: The fully qualified name of the new file, or the relative file name. Do not end the path with the directory separator character.
  exceptions:
  - type: System.ArgumentNullException
    description: '*fileName* is null.'
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
  - type: System.ArgumentException
    description: The file name is empty, contains only white spaces, or contains invalid characters.
  - type: System.UnauthorizedAccessException
    description: Access to *fileName* is denied.
  - type: System.IO.PathTooLongException
    description: The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
  - type: System.NotSupportedException
    description: '*fileName* contains a colon (:) in the middle of the string.'
- uid: System.IO.FileInfo.Name
  id: Name
  parent: System.IO.FileInfo
  href: System.IO.FileInfo.yml
  name: Name
  fullName: System.IO.FileInfo.Name
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 140
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Gets the name of the file.
  syntax:
    content: public override string Name { get; }
    content.vb: Public Overrides ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: The name of the file.
  overridden: System.IO.FileSystemInfo.Name
- uid: System.IO.FileInfo.Length
  id: Length
  parent: System.IO.FileInfo
  href: System.IO.FileInfo.yml
  name: Length
  fullName: System.IO.FileInfo.Length
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 145
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Gets the size, in bytes, of the current file.
  syntax:
    content: public long Length { get; }
    content.vb: Public ReadOnly Property Length As Long
    parameters: []
    return:
      type: System.Int64
      description: The size of the current file in bytes.
  exceptions:
  - type: System.IO.IOException
    description: '@''System.IO.FileSystemInfo.Refresh'' cannot update the state of the file or directory.'
  - type: System.IO.FileNotFoundException
    description: The file does not exist.-or- The Length property is called for a directory.
- uid: System.IO.FileInfo.DirectoryName
  id: DirectoryName
  parent: System.IO.FileInfo
  href: System.IO.FileInfo.yml
  name: DirectoryName
  fullName: System.IO.FileInfo.DirectoryName
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 162
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Gets a string representing the directory's full path.
  syntax:
    content: public string DirectoryName { get; }
    content.vb: Public ReadOnly Property DirectoryName As String
    parameters: []
    return:
      type: System.String
      description: A string representing the directory's full path.
  exceptions:
  - type: System.ArgumentNullException
    description: null was passed in for the directory name.
  - type: System.IO.PathTooLongException
    description: The fully qualified path is 260 or more characters.
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
- uid: System.IO.FileInfo.Directory
  id: Directory
  parent: System.IO.FileInfo
  href: System.IO.FileInfo.yml
  name: Directory
  fullName: System.IO.FileInfo.Directory
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 182
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Gets an instance of the parent directory.
  syntax:
    content: public DirectoryInfo Directory { get; }
    content.vb: Public ReadOnly Property Directory As DirectoryInfo
    parameters: []
    return:
      type: System.IO.DirectoryInfo
      description: A @'System.IO.DirectoryInfo' object representing the parent directory of this file.
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    description: The specified path is invalid, such as being on an unmapped drive.
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
- uid: System.IO.FileInfo.IsReadOnly
  id: IsReadOnly
  parent: System.IO.FileInfo
  href: System.IO.FileInfo.yml
  name: IsReadOnly
  fullName: System.IO.FileInfo.IsReadOnly
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 193
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Gets or sets a value that determines if the current file is read only.
  syntax:
    content: public bool IsReadOnly { get; set; }
    content.vb: Public Property IsReadOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the current file is read only; otherwise, false.
  exceptions:
  - type: System.IO.FileNotFoundException
    description: The file described by the current @'System.IO.FileInfo' object could not be found.
  - type: System.IO.IOException
    description: An I/O error occurred while opening the file.
  - type: System.UnauthorizedAccessException
    description: This operation is not supported on the current platform.-or- The caller does not have the required permission.
  - type: System.ArgumentException
    description: The user does not have write permission, but attempted to set this property to false.
- uid: System.IO.FileInfo.OpenText
  id: OpenText
  parent: System.IO.FileInfo
  href: System.IO.FileInfo.yml
  name: OpenText()
  fullName: System.IO.FileInfo.OpenText()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 222
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Creates a @'System.IO.StreamReader' with UTF8 encoding that reads from an existing text file.
  syntax:
    content: public StreamReader OpenText()
    content.vb: Public Function OpenText As StreamReader
    return:
      type: System.IO.StreamReader
      description: A new StreamReader with UTF8 encoding.
  exceptions:
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
  - type: System.IO.FileNotFoundException
    description: The file is not found.
  - type: System.UnauthorizedAccessException
    description: '*path* is read-only or is a directory.'
  - type: System.IO.DirectoryNotFoundException
    description: The specified path is invalid, such as being on an unmapped drive.
- uid: System.IO.FileInfo.CreateText
  id: CreateText
  parent: System.IO.FileInfo
  href: System.IO.FileInfo.yml
  name: CreateText()
  fullName: System.IO.FileInfo.CreateText()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 228
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Creates a @'System.IO.StreamWriter' that writes a new text file.
  syntax:
    content: public StreamWriter CreateText()
    content.vb: Public Function CreateText As StreamWriter
    return:
      type: System.IO.StreamWriter
      description: A new StreamWriter.
  exceptions:
  - type: System.UnauthorizedAccessException
    description: The file name is a directory.
  - type: System.IO.IOException
    description: The disk is read-only.
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
- uid: System.IO.FileInfo.AppendText
  id: AppendText
  parent: System.IO.FileInfo
  href: System.IO.FileInfo.yml
  name: AppendText()
  fullName: System.IO.FileInfo.AppendText()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 233
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Creates a @'System.IO.StreamWriter' that appends text to the file represented by this instance of the @'System.IO.FileInfo'.
  syntax:
    content: public StreamWriter AppendText()
    content.vb: Public Function AppendText As StreamWriter
    return:
      type: System.IO.StreamWriter
      description: A new StreamWriter.
- uid: System.IO.FileInfo.CopyTo(System.String)
  id: CopyTo(System.String)
  parent: System.IO.FileInfo
  href: System.IO.FileInfo.yml
  name: CopyTo(String)
  fullName: System.IO.FileInfo.CopyTo(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 248
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Copies an existing file to a new file, disallowing the overwriting of an existing file.
  syntax:
    content: public FileInfo CopyTo(string destFileName)
    content.vb: Public Function CopyTo(destFileName As String) As FileInfo
    parameters:
    - id: destFileName
      type: System.String
      description: The name of the new file to copy to.
    return:
      type: System.IO.FileInfo
      description: A new file with a fully qualified path.
  exceptions:
  - type: System.ArgumentException
    description: '*destFileName* is empty, contains only white spaces, or contains invalid characters.'
  - type: System.IO.IOException
    description: An error occurs, or the destination file already exists.
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
  - type: System.ArgumentNullException
    description: '*destFileName* is null.'
  - type: System.UnauthorizedAccessException
    description: A directory path is passed in, or the file is being moved to a different drive.
  - type: System.IO.DirectoryNotFoundException
    description: The directory specified in *destFileName* does not exist.
  - type: System.IO.PathTooLongException
    description: The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
  - type: System.NotSupportedException
    description: '*destFileName* contains a colon (:) within the string but does not specify the volume.'
- uid: System.IO.FileInfo.CopyTo(System.String,System.Boolean)
  id: CopyTo(System.String,System.Boolean)
  parent: System.IO.FileInfo
  href: System.IO.FileInfo.yml
  name: CopyTo(String, Boolean)
  fullName: System.IO.FileInfo.CopyTo(System.String, System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 269
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Copies an existing file to a new file, allowing the overwriting of an existing file.
  syntax:
    content: public FileInfo CopyTo(string destFileName, bool overwrite)
    content.vb: Public Function CopyTo(destFileName As String, overwrite As Boolean) As FileInfo
    parameters:
    - id: destFileName
      type: System.String
      description: The name of the new file to copy to.
    - id: overwrite
      type: System.Boolean
      description: true to allow an existing file to be overwritten; otherwise, false.
    return:
      type: System.IO.FileInfo
      description: A new file, or an overwrite of an existing file if *overwrite* is true. If the file exists and *overwrite* is false, an @'System.IO.IOException' is thrown.
  exceptions:
  - type: System.ArgumentException
    description: '*destFileName* is empty, contains only white spaces, or contains invalid characters.'
  - type: System.IO.IOException
    description: An error occurs, or the destination file already exists and *overwrite* is false.
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
  - type: System.ArgumentNullException
    description: '*destFileName* is null.'
  - type: System.IO.DirectoryNotFoundException
    description: The directory specified in *destFileName* does not exist.
  - type: System.UnauthorizedAccessException
    description: A directory path is passed in, or the file is being moved to a different drive.
  - type: System.IO.PathTooLongException
    description: The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
  - type: System.NotSupportedException
    description: '*destFileName* contains a colon (:) in the middle of the string.'
- uid: System.IO.FileInfo.Create
  id: Create
  parent: System.IO.FileInfo
  href: System.IO.FileInfo.yml
  name: Create()
  fullName: System.IO.FileInfo.Create()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 280
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Creates a file.
  syntax:
    content: public FileStream Create()
    content.vb: Public Function Create As FileStream
    return:
      type: System.IO.FileStream
      description: A new file.
- uid: System.IO.FileInfo.Delete
  id: Delete
  parent: System.IO.FileInfo
  href: System.IO.FileInfo.yml
  name: Delete()
  fullName: System.IO.FileInfo.Delete()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 294
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Permanently deletes a file.
  syntax:
    content: public override void Delete()
    content.vb: Public Overrides Sub Delete
  overridden: System.IO.FileSystemInfo.Delete
  exceptions:
  - type: System.IO.IOException
    description: 'The target file is open or memory-mapped on a computer running Microsoft Windows NT.-or-There is an open handle on the file, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see How to: Enumerate Directories and Files.'
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
  - type: System.UnauthorizedAccessException
    description: The path is a directory.
- uid: System.IO.FileInfo.Decrypt
  id: Decrypt
  parent: System.IO.FileInfo
  href: System.IO.FileInfo.yml
  name: Decrypt()
  fullName: System.IO.FileInfo.Decrypt()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 315
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Decrypts a file that was encrypted by the current account using the @'System.IO.FileInfo.Encrypt' method.
  syntax:
    content: public void Decrypt()
    content.vb: Public Sub Decrypt
  exceptions:
  - type: System.IO.DriveNotFoundException
    description: An invalid drive was specified.
  - type: System.IO.FileNotFoundException
    description: The file described by the current @'System.IO.FileInfo' object could not be found.
  - type: System.IO.IOException
    description: An I/O error occurred while opening the file.
  - type: System.NotSupportedException
    description: The file system is not NTFS.
  - type: System.PlatformNotSupportedException
    description: The current operating system is not Microsoft Windows NT or later.
  - type: System.UnauthorizedAccessException
    description: The file described by the current @'System.IO.FileInfo' object is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.
- uid: System.IO.FileInfo.Encrypt
  id: Encrypt
  parent: System.IO.FileInfo
  href: System.IO.FileInfo.yml
  name: Encrypt()
  fullName: System.IO.FileInfo.Encrypt()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 321
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Encrypts a file so that only the account used to encrypt the file can decrypt it.
  syntax:
    content: public void Encrypt()
    content.vb: Public Sub Encrypt
  exceptions:
  - type: System.IO.DriveNotFoundException
    description: An invalid drive was specified.
  - type: System.IO.FileNotFoundException
    description: The file described by the current @'System.IO.FileInfo' object could not be found.
  - type: System.IO.IOException
    description: An I/O error occurred while opening the file.
  - type: System.NotSupportedException
    description: The file system is not NTFS.
  - type: System.PlatformNotSupportedException
    description: The current operating system is not Microsoft Windows NT or later.
  - type: System.UnauthorizedAccessException
    description: The file described by the current @'System.IO.FileInfo' object is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.
- uid: System.IO.FileInfo.Exists
  id: Exists
  parent: System.IO.FileInfo
  href: System.IO.FileInfo.yml
  name: Exists
  fullName: System.IO.FileInfo.Exists
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 332
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Gets a value indicating whether a file exists.
  syntax:
    content: public override bool Exists { get; }
    content.vb: Public Overrides ReadOnly Property Exists As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the file exists; false if the file does not exist or if the file is a directory.
  overridden: System.IO.FileSystemInfo.Exists
- uid: System.IO.FileInfo.Open(System.IO.FileMode)
  id: Open(System.IO.FileMode)
  parent: System.IO.FileInfo
  href: System.IO.FileInfo.yml
  name: Open(FileMode)
  fullName: System.IO.FileInfo.Open(System.IO.FileMode)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 357
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Opens a file in the specified mode.
  syntax:
    content: public FileStream Open(FileMode mode)
    content.vb: Public Function Open(mode As FileMode) As FileStream
    parameters:
    - id: mode
      type: System.IO.FileMode
      description: A @'System.IO.FileMode' constant specifying the mode (for example, Open or Append) in which to open the file.
    return:
      type: System.IO.FileStream
      description: A file opened in the specified mode, with read/write access and unshared.
  exceptions:
  - type: System.IO.FileNotFoundException
    description: The file is not found.
  - type: System.UnauthorizedAccessException
    description: The file is read-only or is a directory.
  - type: System.IO.DirectoryNotFoundException
    description: The specified path is invalid, such as being on an unmapped drive.
  - type: System.IO.IOException
    description: The file is already open.
- uid: System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess)
  id: Open(System.IO.FileMode,System.IO.FileAccess)
  parent: System.IO.FileInfo
  href: System.IO.FileInfo.yml
  name: Open(FileMode, FileAccess)
  fullName: System.IO.FileInfo.Open(System.IO.FileMode, System.IO.FileAccess)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 361
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Opens a file in the specified mode with read, write, or read/write access.
  syntax:
    content: public FileStream Open(FileMode mode, FileAccess access)
    content.vb: Public Function Open(mode As FileMode, access As FileAccess) As FileStream
    parameters:
    - id: mode
      type: System.IO.FileMode
      description: A @'System.IO.FileMode' constant specifying the mode (for example, Open or Append) in which to open the file.
    - id: access
      type: System.IO.FileAccess
      description: A @'System.IO.FileAccess' constant specifying whether to open the file with Read, Write, or ReadWrite file access.
    return:
      type: System.IO.FileStream
      description: A @'System.IO.FileStream' object opened in the specified mode and access, and unshared.
  exceptions:
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
  - type: System.IO.FileNotFoundException
    description: The file is not found.
  - type: System.UnauthorizedAccessException
    description: '*path* is read-only or is a directory.'
  - type: System.IO.DirectoryNotFoundException
    description: The specified path is invalid, such as being on an unmapped drive.
  - type: System.IO.IOException
    description: The file is already open.
- uid: System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  id: Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  parent: System.IO.FileInfo
  href: System.IO.FileInfo.yml
  name: Open(FileMode, FileAccess, FileShare)
  fullName: System.IO.FileInfo.Open(System.IO.FileMode, System.IO.FileAccess, System.IO.FileShare)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 365
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Opens a file in the specified mode with read, write, or read/write access and the specified sharing option.
  syntax:
    content: public FileStream Open(FileMode mode, FileAccess access, FileShare share)
    content.vb: Public Function Open(mode As FileMode, access As FileAccess, share As FileShare) As FileStream
    parameters:
    - id: mode
      type: System.IO.FileMode
      description: A @'System.IO.FileMode' constant specifying the mode (for example, Open or Append) in which to open the file.
    - id: access
      type: System.IO.FileAccess
      description: A @'System.IO.FileAccess' constant specifying whether to open the file with Read, Write, or ReadWrite file access.
    - id: share
      type: System.IO.FileShare
      description: A @'System.IO.FileShare' constant specifying the type of access other FileStream objects have to this file.
    return:
      type: System.IO.FileStream
      description: A @'System.IO.FileStream' object opened with the specified mode, access, and sharing options.
  exceptions:
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
  - type: System.IO.FileNotFoundException
    description: The file is not found.
  - type: System.UnauthorizedAccessException
    description: '*path* is read-only or is a directory.'
  - type: System.IO.DirectoryNotFoundException
    description: The specified path is invalid, such as being on an unmapped drive.
  - type: System.IO.IOException
    description: The file is already open.
- uid: System.IO.FileInfo.OpenRead
  id: OpenRead
  parent: System.IO.FileInfo
  href: System.IO.FileInfo.yml
  name: OpenRead()
  fullName: System.IO.FileInfo.OpenRead()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 371
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Creates a read-only @'System.IO.FileStream'.
  syntax:
    content: public FileStream OpenRead()
    content.vb: Public Function OpenRead As FileStream
    return:
      type: System.IO.FileStream
      description: A new read-only @'System.IO.FileStream' object.
  exceptions:
  - type: System.UnauthorizedAccessException
    description: '*path* is read-only or is a directory.'
  - type: System.IO.DirectoryNotFoundException
    description: The specified path is invalid, such as being on an unmapped drive.
  - type: System.IO.IOException
    description: The file is already open.
- uid: System.IO.FileInfo.OpenWrite
  id: OpenWrite
  parent: System.IO.FileInfo
  href: System.IO.FileInfo.yml
  name: OpenWrite()
  fullName: System.IO.FileInfo.OpenWrite()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 380
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Creates a write-only @'System.IO.FileStream'.
  syntax:
    content: public FileStream OpenWrite()
    content.vb: Public Function OpenWrite As FileStream
    return:
      type: System.IO.FileStream
      description: A write-only unshared @'System.IO.FileStream' object for a new or existing file.
  exceptions:
  - type: System.UnauthorizedAccessException
    description: The path specified when creating an instance of the @'System.IO.FileInfo' object is read-only or is a directory.
  - type: System.IO.DirectoryNotFoundException
    description: The path specified when creating an instance of the @'System.IO.FileInfo' object is invalid, such as being on an unmapped drive.
- uid: System.IO.FileInfo.MoveTo(System.String)
  id: MoveTo(System.String)
  parent: System.IO.FileInfo
  href: System.IO.FileInfo.yml
  name: MoveTo(String)
  fullName: System.IO.FileInfo.MoveTo(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 398
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Moves a specified file to a new location, providing the option to specify a new file name.
  syntax:
    content: public void MoveTo(string destFileName)
    content.vb: Public Sub MoveTo(destFileName As String)
    parameters:
    - id: destFileName
      type: System.String
      description: The path to move the file to, which can specify a different file name.
  exceptions:
  - type: System.IO.IOException
    description: An I/O error occurs, such as the destination file already exists or the destination device is not ready.
  - type: System.ArgumentNullException
    description: '*destFileName* is null.'
  - type: System.ArgumentException
    description: '*destFileName* is empty, contains only white spaces, or contains invalid characters.'
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
  - type: System.UnauthorizedAccessException
    description: '*destFileName* is read-only or is a directory.'
  - type: System.IO.FileNotFoundException
    description: The file is not found.
  - type: System.IO.DirectoryNotFoundException
    description: The specified path is invalid, such as being on an unmapped drive.
  - type: System.IO.PathTooLongException
    description: The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
  - type: System.NotSupportedException
    description: '*destFileName* contains a colon (:) in the middle of the string.'
- uid: System.IO.FileInfo.Replace(System.String,System.String)
  id: Replace(System.String,System.String)
  parent: System.IO.FileInfo
  href: System.IO.FileInfo.yml
  name: Replace(String, String)
  fullName: System.IO.FileInfo.Replace(System.String, System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 427
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Replaces the contents of a specified file with the file described by the current @'System.IO.FileInfo' object, deleting the original file, and creating a backup of the replaced file.
  syntax:
    content: public FileInfo Replace(string destinationFileName, string destinationBackupFileName)
    content.vb: Public Function Replace(destinationFileName As String, destinationBackupFileName As String) As FileInfo
    parameters:
    - id: destinationFileName
      type: System.String
      description: The name of a file to replace with the current file.
    - id: destinationBackupFileName
      type: System.String
      description: The name of a file with which to create a backup of the file described by the *destFileName* parameter.
    return:
      type: System.IO.FileInfo
      description: A @'System.IO.FileInfo' object that encapsulates information about the file described by the *destFileName* parameter.
  exceptions:
  - type: System.ArgumentException
    description: The path described by the *destFileName* parameter was not of a legal form.-or-The path described by the *destBackupFileName* parameter was not of a legal form.
  - type: System.ArgumentNullException
    description: The *destFileName* parameter is null.
  - type: System.IO.FileNotFoundException
    description: The file described by the current @'System.IO.FileInfo' object could not be found.-or-The file described by the *destinationFileName* parameter could not be found.
  - type: System.PlatformNotSupportedException
    description: The current operating system is not Microsoft Windows NT or later.
- uid: System.IO.FileInfo.Replace(System.String,System.String,System.Boolean)
  id: Replace(System.String,System.String,System.Boolean)
  parent: System.IO.FileInfo
  href: System.IO.FileInfo.yml
  name: Replace(String, String, Boolean)
  fullName: System.IO.FileInfo.Replace(System.String, System.String, System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 433
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Replaces the contents of a specified file with the file described by the current @'System.IO.FileInfo' object, deleting the original file, and creating a backup of the replaced file.  Also specifies whether to ignore merge errors.
  syntax:
    content: public FileInfo Replace(string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors)
    content.vb: Public Function Replace(destinationFileName As String, destinationBackupFileName As String, ignoreMetadataErrors As Boolean) As FileInfo
    parameters:
    - id: destinationFileName
      type: System.String
      description: The name of a file to replace with the current file.
    - id: destinationBackupFileName
      type: System.String
      description: The name of a file with which to create a backup of the file described by the *destFileName* parameter.
    - id: ignoreMetadataErrors
      type: System.Boolean
      description: true to ignore merge errors (such as attributes and ACLs) from the replaced file to the replacement file; otherwise false.
    return:
      type: System.IO.FileInfo
      description: A @'System.IO.FileInfo' object that encapsulates information about the file described by the *destFileName* parameter.
  exceptions:
  - type: System.ArgumentException
    description: The path described by the *destFileName* parameter was not of a legal form.-or-The path described by the *destBackupFileName* parameter was not of a legal form.
  - type: System.ArgumentNullException
    description: The *destFileName* parameter is null.
  - type: System.IO.FileNotFoundException
    description: The file described by the current @'System.IO.FileInfo' object could not be found.-or-The file described by the *destinationFileName* parameter could not be found.
  - type: System.PlatformNotSupportedException
    description: The current operating system is not Microsoft Windows NT or later.
- uid: System.IO.FileInfo.ToString
  id: ToString
  parent: System.IO.FileInfo
  href: System.IO.FileInfo.yml
  name: ToString()
  fullName: System.IO.FileInfo.ToString()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 441
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Returns the path as a string.
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: A string representing the path.
  overridden: System.Object.ToString
references:
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
  type: Namespace
- uid: System.Object
  parent: System
  isExternal: false
  href: System.Object.yml
  name: Object
  fullName: System.Object
  type: Class
- uid: System.IO.FileSystemInfo
  parent: System.IO
  isExternal: false
  href: System.IO.FileSystemInfo.yml
  name: FileSystemInfo
  fullName: System.IO.FileSystemInfo
  type: Class
- uid: System.IO.FileSystemInfo.FullPath
  parent: System.IO.FileSystemInfo
  isExternal: false
  href: System.IO.FileSystemInfo.yml
  name: FullPath
  fullName: System.IO.FileSystemInfo.FullPath
- uid: System.IO.FileSystemInfo.OriginalPath
  parent: System.IO.FileSystemInfo
  isExternal: false
  href: System.IO.FileSystemInfo.yml
  name: OriginalPath
  fullName: System.IO.FileSystemInfo.OriginalPath
- uid: System.IO.FileSystemInfo.FullName
  parent: System.IO.FileSystemInfo
  isExternal: false
  href: System.IO.FileSystemInfo.yml
  name: FullName
  fullName: System.IO.FileSystemInfo.FullName
- uid: System.IO.FileSystemInfo.Extension
  parent: System.IO.FileSystemInfo
  isExternal: false
  href: System.IO.FileSystemInfo.yml
  name: Extension
  fullName: System.IO.FileSystemInfo.Extension
- uid: System.IO.FileSystemInfo.CreationTime
  parent: System.IO.FileSystemInfo
  isExternal: false
  href: System.IO.FileSystemInfo.yml
  name: CreationTime
  fullName: System.IO.FileSystemInfo.CreationTime
- uid: System.IO.FileSystemInfo.CreationTimeUtc
  parent: System.IO.FileSystemInfo
  isExternal: false
  href: System.IO.FileSystemInfo.yml
  name: CreationTimeUtc
  fullName: System.IO.FileSystemInfo.CreationTimeUtc
- uid: System.IO.FileSystemInfo.LastAccessTime
  parent: System.IO.FileSystemInfo
  isExternal: false
  href: System.IO.FileSystemInfo.yml
  name: LastAccessTime
  fullName: System.IO.FileSystemInfo.LastAccessTime
- uid: System.IO.FileSystemInfo.LastAccessTimeUtc
  parent: System.IO.FileSystemInfo
  isExternal: false
  href: System.IO.FileSystemInfo.yml
  name: LastAccessTimeUtc
  fullName: System.IO.FileSystemInfo.LastAccessTimeUtc
- uid: System.IO.FileSystemInfo.LastWriteTime
  parent: System.IO.FileSystemInfo
  isExternal: false
  href: System.IO.FileSystemInfo.yml
  name: LastWriteTime
  fullName: System.IO.FileSystemInfo.LastWriteTime
- uid: System.IO.FileSystemInfo.LastWriteTimeUtc
  parent: System.IO.FileSystemInfo
  isExternal: false
  href: System.IO.FileSystemInfo.yml
  name: LastWriteTimeUtc
  fullName: System.IO.FileSystemInfo.LastWriteTimeUtc
- uid: System.IO.FileSystemInfo.Refresh
  parent: System.IO.FileSystemInfo
  isExternal: false
  href: System.IO.FileSystemInfo.yml
  name: Refresh()
  fullName: System.IO.FileSystemInfo.Refresh()
  spec.csharp:
  - uid: System.IO.FileSystemInfo.Refresh
    name: Refresh
    fullName: System.IO.FileSystemInfo.Refresh
    href: System.IO.FileSystemInfo.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.FileSystemInfo.Refresh
    name: Refresh
    fullName: System.IO.FileSystemInfo.Refresh
    href: System.IO.FileSystemInfo.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IO.FileSystemInfo.Attributes
  parent: System.IO.FileSystemInfo
  isExternal: false
  href: System.IO.FileSystemInfo.yml
  name: Attributes
  fullName: System.IO.FileSystemInfo.Attributes
- uid: System.IO.FileSystemInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.IO.FileSystemInfo
  isExternal: false
  href: System.IO.FileSystemInfo.yml
  name: GetObjectData(SerializationInfo, StreamingContext)
  fullName: System.IO.FileSystemInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  spec.csharp:
  - uid: System.IO.FileSystemInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    fullName: System.IO.FileSystemInfo.GetObjectData
    href: System.IO.FileSystemInfo.yml
  - name: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    href: System.Runtime.Serialization.SerializationInfo.yml
  - name: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    href: System.Runtime.Serialization.StreamingContext.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.FileSystemInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    fullName: System.IO.FileSystemInfo.GetObjectData
    href: System.IO.FileSystemInfo.yml
  - name: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    href: System.Runtime.Serialization.SerializationInfo.yml
  - name: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    href: System.Runtime.Serialization.StreamingContext.yml
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.String
  parent: System
  isExternal: false
  href: System.String.yml
  name: String
  fullName: System.String
  type: Class
- uid: System.IO.FileInfo
  parent: System.IO
  isExternal: false
  href: System.IO.FileInfo.yml
  name: FileInfo
  fullName: System.IO.FileInfo
  type: Class
- uid: System.IO.FileSystemInfo.Name
  parent: System.IO.FileSystemInfo
  isExternal: false
  href: System.IO.FileSystemInfo.yml
  name: Name
  fullName: System.IO.FileSystemInfo.Name
- uid: System.Int64
  parent: System
  isExternal: false
  href: System.Int64.yml
  name: Int64
  fullName: System.Int64
  type: Struct
- uid: System.IO.DirectoryInfo
  parent: System.IO
  isExternal: false
  href: System.IO.DirectoryInfo.yml
  name: DirectoryInfo
  fullName: System.IO.DirectoryInfo
  type: Class
- uid: System.Boolean
  parent: System
  isExternal: false
  href: System.Boolean.yml
  name: Boolean
  fullName: System.Boolean
  type: Struct
- uid: System.IO.StreamReader
  parent: System.IO
  isExternal: false
  href: System.IO.StreamReader.yml
  name: StreamReader
  fullName: System.IO.StreamReader
  type: Class
- uid: System.IO.StreamWriter
  parent: System.IO
  isExternal: false
  href: System.IO.StreamWriter.yml
  name: StreamWriter
  fullName: System.IO.StreamWriter
  type: Class
- uid: System.IO.FileStream
  parent: System.IO
  isExternal: false
  href: System.IO.FileStream.yml
  name: FileStream
  fullName: System.IO.FileStream
  type: Class
- uid: System.IO.FileSystemInfo.Delete
  parent: System.IO.FileSystemInfo
  isExternal: false
  href: System.IO.FileSystemInfo.yml
  name: Delete()
  fullName: System.IO.FileSystemInfo.Delete()
  spec.csharp:
  - uid: System.IO.FileSystemInfo.Delete
    name: Delete
    fullName: System.IO.FileSystemInfo.Delete
    href: System.IO.FileSystemInfo.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.FileSystemInfo.Delete
    name: Delete
    fullName: System.IO.FileSystemInfo.Delete
    href: System.IO.FileSystemInfo.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IO.FileSystemInfo.Exists
  parent: System.IO.FileSystemInfo
  isExternal: false
  href: System.IO.FileSystemInfo.yml
  name: Exists
  fullName: System.IO.FileSystemInfo.Exists
- uid: System.IO.FileMode
  parent: System.IO
  isExternal: false
  href: System.IO.FileMode.yml
  name: FileMode
  fullName: System.IO.FileMode
  type: Enum
- uid: System.IO.FileAccess
  parent: System.IO
  isExternal: false
  href: System.IO.FileAccess.yml
  name: FileAccess
  fullName: System.IO.FileAccess
  type: Enum
- uid: System.IO.FileShare
  parent: System.IO
  isExternal: false
  href: System.IO.FileShare.yml
  name: FileShare
  fullName: System.IO.FileShare
  type: Enum
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
