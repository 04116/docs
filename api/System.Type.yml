items:
- uid: System.Type
  id: Type
  parent: System
  children:
  - System.Type.#ctor
  - System.Type.Assembly
  - System.Type.AssemblyQualifiedName
  - System.Type.Attributes
  - System.Type.BaseType
  - System.Type.ContainsGenericParameters
  - System.Type.DeclaringMethod
  - System.Type.DeclaringType
  - System.Type.DefaultBinder
  - System.Type.Delimiter
  - System.Type.EmptyTypes
  - System.Type.Equals(System.Object)
  - System.Type.Equals(System.Type)
  - System.Type.FilterAttribute
  - System.Type.FilterName
  - System.Type.FilterNameIgnoreCase
  - System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)
  - System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)
  - System.Type.FullName
  - System.Type.GenericParameterAttributes
  - System.Type.GenericParameterPosition
  - System.Type.GenericTypeArguments
  - System.Type.GetArrayRank
  - System.Type.GetAttributeFlagsImpl
  - System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  - System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  - System.Type.GetConstructor(System.Type[])
  - System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  - System.Type.GetConstructors
  - System.Type.GetConstructors(System.Reflection.BindingFlags)
  - System.Type.GetDefaultMembers
  - System.Type.GetElementType
  - System.Type.GetEnumName(System.Object)
  - System.Type.GetEnumNames
  - System.Type.GetEnumUnderlyingType
  - System.Type.GetEnumValues
  - System.Type.GetEvent(System.String)
  - System.Type.GetEvent(System.String,System.Reflection.BindingFlags)
  - System.Type.GetEvents
  - System.Type.GetEvents(System.Reflection.BindingFlags)
  - System.Type.GetField(System.String)
  - System.Type.GetField(System.String,System.Reflection.BindingFlags)
  - System.Type.GetFields
  - System.Type.GetFields(System.Reflection.BindingFlags)
  - System.Type.GetGenericArguments
  - System.Type.GetGenericParameterConstraints
  - System.Type.GetGenericTypeDefinition
  - System.Type.GetHashCode
  - System.Type.GetInterface(System.String)
  - System.Type.GetInterface(System.String,System.Boolean)
  - System.Type.GetInterfaceMap(System.Type)
  - System.Type.GetInterfaces
  - System.Type.GetMember(System.String)
  - System.Type.GetMember(System.String,System.Reflection.BindingFlags)
  - System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)
  - System.Type.GetMembers
  - System.Type.GetMembers(System.Reflection.BindingFlags)
  - System.Type.GetMethod(System.String)
  - System.Type.GetMethod(System.String,System.Reflection.BindingFlags)
  - System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  - System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  - System.Type.GetMethod(System.String,System.Type[])
  - System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])
  - System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  - System.Type.GetMethods
  - System.Type.GetMethods(System.Reflection.BindingFlags)
  - System.Type.GetNestedType(System.String)
  - System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)
  - System.Type.GetNestedTypes
  - System.Type.GetNestedTypes(System.Reflection.BindingFlags)
  - System.Type.GetProperties
  - System.Type.GetProperties(System.Reflection.BindingFlags)
  - System.Type.GetProperty(System.String)
  - System.Type.GetProperty(System.String,System.Reflection.BindingFlags)
  - System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  - System.Type.GetProperty(System.String,System.Type)
  - System.Type.GetProperty(System.String,System.Type,System.Type[])
  - System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  - System.Type.GetProperty(System.String,System.Type[])
  - System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  - System.Type.GetType(System.String)
  - System.Type.GetType(System.String,System.Boolean)
  - System.Type.GetType(System.String,System.Boolean,System.Boolean)
  - System.Type.GetTypeArray(System.Object[])
  - System.Type.GetTypeCode(System.Type)
  - System.Type.GetTypeCodeImpl
  - System.Type.GetTypeFromCLSID(System.Guid)
  - System.Type.GetTypeFromCLSID(System.Guid,System.Boolean)
  - System.Type.GetTypeFromCLSID(System.Guid,System.String)
  - System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)
  - System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)
  - System.Type.GetTypeFromProgID(System.String)
  - System.Type.GetTypeFromProgID(System.String,System.Boolean)
  - System.Type.GetTypeFromProgID(System.String,System.String)
  - System.Type.GetTypeFromProgID(System.String,System.String,System.Boolean)
  - System.Type.GetTypeHandle(System.Object)
  - System.Type.GUID
  - System.Type.HasElementType
  - System.Type.HasElementTypeImpl
  - System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])
  - System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)
  - System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  - System.Type.IsAbstract
  - System.Type.IsAnsiClass
  - System.Type.IsArray
  - System.Type.IsArrayImpl
  - System.Type.IsAssignableFrom(System.Type)
  - System.Type.IsAutoClass
  - System.Type.IsAutoLayout
  - System.Type.IsByRef
  - System.Type.IsByRefImpl
  - System.Type.IsClass
  - System.Type.IsCOMObject
  - System.Type.IsCOMObjectImpl
  - System.Type.IsConstructedGenericType
  - System.Type.IsContextful
  - System.Type.IsContextfulImpl
  - System.Type.IsEnum
  - System.Type.IsEnumDefined(System.Object)
  - System.Type.IsEquivalentTo(System.Type)
  - System.Type.IsExplicitLayout
  - System.Type.IsGenericParameter
  - System.Type.IsGenericType
  - System.Type.IsGenericTypeDefinition
  - System.Type.IsImport
  - System.Type.IsInstanceOfType(System.Object)
  - System.Type.IsInterface
  - System.Type.IsLayoutSequential
  - System.Type.IsMarshalByRef
  - System.Type.IsMarshalByRefImpl
  - System.Type.IsNested
  - System.Type.IsNestedAssembly
  - System.Type.IsNestedFamANDAssem
  - System.Type.IsNestedFamily
  - System.Type.IsNestedFamORAssem
  - System.Type.IsNestedPrivate
  - System.Type.IsNestedPublic
  - System.Type.IsNotPublic
  - System.Type.IsPointer
  - System.Type.IsPointerImpl
  - System.Type.IsPrimitive
  - System.Type.IsPrimitiveImpl
  - System.Type.IsPublic
  - System.Type.IsSealed
  - System.Type.IsSecurityCritical
  - System.Type.IsSecuritySafeCritical
  - System.Type.IsSecurityTransparent
  - System.Type.IsSerializable
  - System.Type.IsSpecialName
  - System.Type.IsSubclassOf(System.Type)
  - System.Type.IsUnicodeClass
  - System.Type.IsValueType
  - System.Type.IsValueTypeImpl
  - System.Type.IsVisible
  - System.Type.MakeArrayType
  - System.Type.MakeArrayType(System.Int32)
  - System.Type.MakeByRefType
  - System.Type.MakeGenericType(System.Type[])
  - System.Type.MakePointerType
  - System.Type.MemberType
  - System.Type.Missing
  - System.Type.Module
  - System.Type.Namespace
  - System.Type.ReflectedType
  - System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
  - System.Type.StructLayoutAttribute
  - System.Type.ToString
  - System.Type.TypeHandle
  - System.Type.TypeInitializer
  - System.Type.UnderlyingSystemType
  href: System.Type.yml
  name: Type
  fullName: System.Type
  type: Class
  source:
    remote: &o0
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/chenkennt/coreclr.git
    path: src/mscorlib/src/System/Type.cs
    startLine: 29
  assemblies:
  - mscorlib
  namespace: System
  summary: 'Represents type declarations: class types, interface types, array types, value types, enumeration types, type parameters, generic type definitions, and open or closed constructed generic types.To browse the .NET Framework source code for this type, see the Reference Source.'
  syntax:
    content: 'public abstract class Type : MemberInfo, ICustomAttributeProvider, _MemberInfo, _Type, IReflect'
    content.vb: Public MustInherit Class Type Inherits MemberInfo Implements ICustomAttributeProvider, _MemberInfo, _Type, IReflect
  inheritance:
  - System.Object
  - System.Reflection.MemberInfo
  implements:
  - System.Reflection.ICustomAttributeProvider
  - System.Runtime.InteropServices._MemberInfo
  - System.Runtime.InteropServices._Type
  - System.Reflection.IReflect
  inheritedMembers:
  - System.Reflection.MemberInfo.Name
  - System.Reflection.MemberInfo.CustomAttributes
  - System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)
  - System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)
  - System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)
  - System.Reflection.MemberInfo.GetCustomAttributesData
  - System.Reflection.MemberInfo.MetadataToken
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Type.FilterAttribute
  id: FilterAttribute
  parent: System.Type
  href: System.Type.yml
  name: FilterAttribute
  fullName: System.Type.FilterAttribute
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 42
  assemblies:
  - mscorlib
  namespace: System
  summary: Represents the member filter used on attributes. This field is read-only.
  syntax:
    content: public static readonly MemberFilter FilterAttribute
    content.vb: Public Shared ReadOnly FilterAttribute As MemberFilter
- uid: System.Type.FilterName
  id: FilterName
  parent: System.Type
  href: System.Type.yml
  name: FilterName
  fullName: System.Type.FilterName
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 43
  assemblies:
  - mscorlib
  namespace: System
  summary: Represents the case-sensitive member filter used on names. This field is read-only.
  syntax:
    content: public static readonly MemberFilter FilterName
    content.vb: Public Shared ReadOnly FilterName As MemberFilter
- uid: System.Type.FilterNameIgnoreCase
  id: FilterNameIgnoreCase
  parent: System.Type
  href: System.Type.yml
  name: FilterNameIgnoreCase
  fullName: System.Type.FilterNameIgnoreCase
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 44
  assemblies:
  - mscorlib
  namespace: System
  summary: Represents the case-insensitive member filter used on names. This field is read-only.
  syntax:
    content: public static readonly MemberFilter FilterNameIgnoreCase
    content.vb: Public Shared ReadOnly FilterNameIgnoreCase As MemberFilter
- uid: System.Type.Missing
  id: Missing
  parent: System.Type
  href: System.Type.yml
  name: Missing
  fullName: System.Type.Missing
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 46
  assemblies:
  - mscorlib
  namespace: System
  summary: Represents a missing value in the @'System.Type' information. This field is read-only.
  syntax:
    content: public static readonly object Missing
    content.vb: Public Shared ReadOnly Missing As Object
- uid: System.Type.Delimiter
  id: Delimiter
  parent: System.Type
  href: System.Type.yml
  name: Delimiter
  fullName: System.Type.Delimiter
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 48
  assemblies:
  - mscorlib
  namespace: System
  summary: Separates names in the namespace of the @'System.Type'. This field is read-only.
  syntax:
    content: public static readonly char Delimiter
    content.vb: Public Shared ReadOnly Delimiter As Char
- uid: System.Type.EmptyTypes
  id: EmptyTypes
  parent: System.Type
  href: System.Type.yml
  name: EmptyTypes
  fullName: System.Type.EmptyTypes
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 51
  assemblies:
  - mscorlib
  namespace: System
  summary: Represents an empty array of type @'System.Type'. This field is read-only.
  syntax:
    content: public static readonly Type[] EmptyTypes
    content.vb: Public Shared ReadOnly EmptyTypes As Type()
- uid: System.Type.#ctor
  id: '#ctor'
  parent: System.Type
  href: System.Type.yml
  name: Type()
  fullName: System.Type.Type()
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 57
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of the @'System.Type' class.
  syntax:
    content: protected Type()
    content.vb: Protected Sub New
- uid: System.Type.MemberType
  id: MemberType
  parent: System.Type
  href: System.Type.yml
  name: MemberType
  fullName: System.Type.MemberType
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 62
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a @'System.Reflection.MemberTypes' value indicating that this member is a type or a nested type.
  syntax:
    content: public override MemberTypes MemberType { get; }
    content.vb: Public Overrides ReadOnly Property MemberType As MemberTypes
    parameters: []
    return:
      type: System.Reflection.MemberTypes
      description: A @'System.Reflection.MemberTypes' value indicating that this member is a type or a nested type.
  overridden: System.Reflection.MemberInfo.MemberType
- uid: System.Type.DeclaringType
  id: DeclaringType
  parent: System.Type
  href: System.Type.yml
  name: DeclaringType
  fullName: System.Type.DeclaringType
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 67
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the type that declares the current nested type or generic type parameter.
  syntax:
    content: public override Type DeclaringType { get; }
    content.vb: Public Overrides ReadOnly Property DeclaringType As Type
    parameters: []
    return:
      type: System.Type
      description: A @'System.Type' object representing the enclosing type, if the current type is a nested type; or the generic type definition, if the current type is a type parameter of a generic type; or the type that declares the generic method, if the current type is a type parameter of a generic method; otherwise, null.
  overridden: System.Reflection.MemberInfo.DeclaringType
- uid: System.Type.DeclaringMethod
  id: DeclaringMethod
  parent: System.Type
  href: System.Type.yml
  name: DeclaringMethod
  fullName: System.Type.DeclaringMethod
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 71
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a @'System.Reflection.MethodBase' that represents the declaring method, if the current @'System.Type' represents a type parameter of a generic method.
  syntax:
    content: public virtual MethodBase DeclaringMethod { get; }
    content.vb: Public Overridable ReadOnly Property DeclaringMethod As MethodBase
    parameters: []
    return:
      type: System.Reflection.MethodBase
      description: If the current @'System.Type' represents a type parameter of a generic method, a @'System.Reflection.MethodBase' that represents declaring method; otherwise, null.
- uid: System.Type.ReflectedType
  id: ReflectedType
  parent: System.Type
  href: System.Type.yml
  name: ReflectedType
  fullName: System.Type.ReflectedType
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 74
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the class object that was used to obtain this member.
  syntax:
    content: public override Type ReflectedType { get; }
    content.vb: Public Overrides ReadOnly Property ReflectedType As Type
    parameters: []
    return:
      type: System.Type
      description: The Type object through which this @'System.Type' object was obtained.
  overridden: System.Reflection.MemberInfo.ReflectedType
- uid: System.Type.GetType(System.String,System.Boolean,System.Boolean)
  id: GetType(System.String,System.Boolean,System.Boolean)
  parent: System.Type
  href: System.Type.yml
  name: GetType(String, Boolean, Boolean)
  fullName: System.Type.GetType(System.String, System.Boolean, System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 85
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the @'System.Type' with the specified name, specifying whether to throw an exception if the type is not found and whether to perform a case-sensitive search.
  syntax:
    content: public static Type GetType(string typeName, bool throwOnError, bool ignoreCase)
    content.vb: Public Shared Function GetType(typeName As String, throwOnError As Boolean, ignoreCase As Boolean) As Type
    parameters:
    - id: typeName
      type: System.String
      description: The assembly-qualified name of the type to get. See @'System.Type.AssemblyQualifiedName'. If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.
    - id: throwOnError
      type: System.Boolean
      description: true to throw an exception if the type cannot be found; false to return null.Specifying false also suppresses some other exception conditions, but not all of them. See the Exceptions section.
    - id: ignoreCase
      type: System.Boolean
      description: true to perform a case-insensitive search for *typeName*, false to perform a case-sensitive search for *typeName*.
    return:
      type: System.Type
      description: The type with the specified name. If the type is not found, the *throwOnError* parameter specifies whether null is returned or an exception is thrown. In some cases, an exception is thrown regardless of the value of *throwOnError*. See the Exceptions section.
  exceptions:
  - type: System.ArgumentNullException
    description: '*typeName* is null.'
  - type: System.Reflection.TargetInvocationException
    description: A class initializer is invoked and throws an exception.
  - type: System.TypeLoadException
    description: '*throwOnError* is true and the type is not found. -or-*throwOnError* is true and *typeName* contains invalid characters, such as an embedded tab.-or-*throwOnError* is true and *typeName* is an empty string.-or-*throwOnError* is true and *typeName* represents an array type with an invalid size. -or-*typeName* represents an array of @''System.TypedReference''.'
  - type: System.ArgumentException
    description: '*throwOnError* is true and *typeName* contains invalid syntax. For example, "MyType[,*,]".-or- *typeName* represents a generic type that has a pointer type, a ByRef type, or @''System.Void'' as one of its type arguments.-or-*typeName* represents a generic type that has an incorrect number of type arguments.-or-*typeName* represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.'
  - type: System.IO.FileNotFoundException
    description: '*throwOnError* is true and the assembly or one of its dependencies was not found.'
  - type: System.IO.FileLoadException
    description: The assembly or one of its dependencies was found, but could not be loaded.
  - type: System.BadImageFormatException
    description: The assembly or one of its dependencies is not valid. -or-Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.
- uid: System.Type.GetType(System.String,System.Boolean)
  id: GetType(System.String,System.Boolean)
  parent: System.Type
  href: System.Type.yml
  name: GetType(String, Boolean)
  fullName: System.Type.GetType(System.String, System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 91
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the @'System.Type' with the specified name, performing a case-sensitive search and specifying whether to throw an exception if the type is not found.
  syntax:
    content: public static Type GetType(string typeName, bool throwOnError)
    content.vb: Public Shared Function GetType(typeName As String, throwOnError As Boolean) As Type
    parameters:
    - id: typeName
      type: System.String
      description: The assembly-qualified name of the type to get. See @'System.Type.AssemblyQualifiedName'. If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.
    - id: throwOnError
      type: System.Boolean
      description: true to throw an exception if the type cannot be found; false to return null. Specifying false also suppresses some other exception conditions, but not all of them. See the Exceptions section.
    return:
      type: System.Type
      description: The type with the specified name. If the type is not found, the *throwOnError* parameter specifies whether null is returned or an exception is thrown. In some cases, an exception is thrown regardless of the value of *throwOnError*. See the Exceptions section.
  exceptions:
  - type: System.ArgumentNullException
    description: '*typeName* is null.'
  - type: System.Reflection.TargetInvocationException
    description: A class initializer is invoked and throws an exception.
  - type: System.TypeLoadException
    description: '*throwOnError* is true and the type is not found. -or-*throwOnError* is true and *typeName* contains invalid characters, such as an embedded tab.-or-*throwOnError* is true and *typeName* is an empty string.-or-*throwOnError* is true and *typeName* represents an array type with an invalid size. -or-*typeName* represents an array of @''System.TypedReference''.'
  - type: System.ArgumentException
    description: '*throwOnError* is true and *typeName* contains invalid syntax. For example, "MyType[,*,]".-or- *typeName* represents a generic type that has a pointer type, a ByRef type, or @''System.Void'' as one of its type arguments.-or-*typeName* represents a generic type that has an incorrect number of type arguments.-or-*typeName* represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.'
  - type: System.IO.FileNotFoundException
    description: '*throwOnError* is true and the assembly or one of its dependencies was not found.'
  - type: System.IO.FileLoadException
    description: In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, @'System.IO.IOException', instead.The assembly or one of its dependencies was found, but could not be loaded.
  - type: System.BadImageFormatException
    description: The assembly or one of its dependencies is not valid. -or-Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.
- uid: System.Type.GetType(System.String)
  id: GetType(System.String)
  parent: System.Type
  href: System.Type.yml
  name: GetType(String)
  fullName: System.Type.GetType(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 97
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the @'System.Type' with the specified name, performing a case-sensitive search.
  syntax:
    content: public static Type GetType(string typeName)
    content.vb: Public Shared Function GetType(typeName As String) As Type
    parameters:
    - id: typeName
      type: System.String
      description: The assembly-qualified name of the type to get. See @'System.Type.AssemblyQualifiedName'. If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.
    return:
      type: System.Type
      description: The type with the specified name, if found; otherwise, null.
  exceptions:
  - type: System.ArgumentNullException
    description: '*typeName* is null.'
  - type: System.Reflection.TargetInvocationException
    description: A class initializer is invoked and throws an exception.
  - type: System.ArgumentException
    description: '*typeName* represents a generic type that has a pointer type, a ByRef type, or @''System.Void'' as one of its type arguments.-or-*typeName* represents a generic type that has an incorrect number of type arguments.-or-*typeName* represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.'
  - type: System.TypeLoadException
    description: '*typeName* represents an array of @''System.TypedReference''.'
  - type: System.IO.FileLoadException
    description: In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, @'System.IO.IOException', instead.The assembly or one of its dependencies was found, but could not be loaded.
  - type: System.BadImageFormatException
    description: The assembly or one of its dependencies is not valid. -or-Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.
- uid: System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
  id: ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
  parent: System.Type
  href: System.Type.yml
  name: ReflectionOnlyGetType(String, Boolean, Boolean)
  fullName: System.Type.ReflectionOnlyGetType(System.String, System.Boolean, System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 138
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the @'System.Type' with the specified name, specifying whether to perform a case-sensitive search and whether to throw an exception if the type is not found. The type is loaded for reflection only, not for execution.
  syntax:
    content: public static Type ReflectionOnlyGetType(string typeName, bool throwIfNotFound, bool ignoreCase)
    content.vb: Public Shared Function ReflectionOnlyGetType(typeName As String, throwIfNotFound As Boolean, ignoreCase As Boolean) As Type
    parameters:
    - id: typeName
      type: System.String
      description: The assembly-qualified name of the @'System.Type' to get.
    - id: throwIfNotFound
      type: System.Boolean
      description: true to throw a @'System.TypeLoadException' if the type cannot be found; false to return null if the type cannot be found. Specifying false also suppresses some other exception conditions, but not all of them. See the Exceptions section.
    - id: ignoreCase
      type: System.Boolean
      description: true to perform a case-insensitive search for *typeName*; false to perform a case-sensitive search for *typeName*.
    return:
      type: System.Type
      description: The type with the specified name, if found; otherwise, null. If the type is not found, the *throwIfNotFound* parameter specifies whether null is returned or an exception is thrown. In some cases, an exception is thrown regardless of the value of *throwIfNotFound*. See the Exceptions section.
  exceptions:
  - type: System.ArgumentNullException
    description: '*typeName* is null.'
  - type: System.Reflection.TargetInvocationException
    description: A class initializer is invoked and throws an exception.
  - type: System.TypeLoadException
    description: '*throwIfNotFound* is true and the type is not found. -or-*throwIfNotFound* is true and *typeName* contains invalid characters, such as an embedded tab.-or-*throwIfNotFound* is true and *typeName* is an empty string.-or-*throwIfNotFound* is true and *typeName* represents an array type with an invalid size. -or-*typeName* represents an array of @''System.TypedReference'' objects.'
  - type: System.ArgumentException
    description: '*typeName* does not include the assembly name.-or-*throwIfNotFound* is true and *typeName* contains invalid syntax; for example, "MyType[,*,]".-or-*typeName* represents a generic type that has a pointer type, a ByRef type, or @''System.Void'' as one of its type arguments.-or-*typeName* represents a generic type that has an incorrect number of type arguments.-or-*typeName* represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.'
  - type: System.IO.FileNotFoundException
    description: '*throwIfNotFound* is true and the assembly or one of its dependencies was not found.'
  - type: System.IO.FileLoadException
    description: The assembly or one of its dependencies was found, but could not be loaded.
  - type: System.BadImageFormatException
    description: The assembly or one of its dependencies is not valid. -or-The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.
- uid: System.Type.MakePointerType
  id: MakePointerType
  parent: System.Type
  href: System.Type.yml
  name: MakePointerType()
  fullName: System.Type.MakePointerType()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 145
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a @'System.Type' object that represents a pointer to the current type.
  syntax:
    content: public virtual Type MakePointerType()
    content.vb: Public Overridable Function MakePointerType As Type
    return:
      type: System.Type
      description: A @'System.Type' object that represents a pointer to the current type.
  exceptions:
  - type: System.NotSupportedException
    description: The invoked method is not supported in the base class.
  - type: System.TypeLoadException
    description: The current type is @'System.TypedReference'.-or-The current type is a ByRef type. That is, @'System.Type.IsByRef' returns true.
- uid: System.Type.StructLayoutAttribute
  id: StructLayoutAttribute
  parent: System.Type
  href: System.Type.yml
  name: StructLayoutAttribute
  fullName: System.Type.StructLayoutAttribute
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 146
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a @'System.Runtime.InteropServices.StructLayoutAttribute' that describes the layout of the current type.
  syntax:
    content: public virtual StructLayoutAttribute StructLayoutAttribute { get; }
    content.vb: Public Overridable ReadOnly Property StructLayoutAttribute As StructLayoutAttribute
    parameters: []
    return:
      type: System.Runtime.InteropServices.StructLayoutAttribute
      description: Gets a @'System.Runtime.InteropServices.StructLayoutAttribute' that describes the gross layout features of the current type.
  exceptions:
  - type: System.NotSupportedException
    description: The invoked method is not supported in the base class.
- uid: System.Type.MakeByRefType
  id: MakeByRefType
  parent: System.Type
  href: System.Type.yml
  name: MakeByRefType()
  fullName: System.Type.MakeByRefType()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 147
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a @'System.Type' object that represents the current type when passed as a ref parameter (ByRef parameter in Visual Basic).
  syntax:
    content: public virtual Type MakeByRefType()
    content.vb: Public Overridable Function MakeByRefType As Type
    return:
      type: System.Type
      description: A @'System.Type' object that represents the current type when passed as a ref parameter (ByRef parameter in Visual Basic).
  exceptions:
  - type: System.NotSupportedException
    description: The invoked method is not supported in the base class.
  - type: System.TypeLoadException
    description: The current type is @'System.TypedReference'.-or-The current type is a ByRef type. That is, @'System.Type.IsByRef' returns true.
- uid: System.Type.MakeArrayType
  id: MakeArrayType
  parent: System.Type
  href: System.Type.yml
  name: MakeArrayType()
  fullName: System.Type.MakeArrayType()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 148
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a @'System.Type' object representing a one-dimensional array of the current type, with a lower bound of zero.
  syntax:
    content: public virtual Type MakeArrayType()
    content.vb: Public Overridable Function MakeArrayType As Type
    return:
      type: System.Type
      description: A @'System.Type' object representing a one-dimensional array of the current type, with a lower bound of zero.
  exceptions:
  - type: System.NotSupportedException
    description: The invoked method is not supported in the base class. Derived classes must provide an implementation.
  - type: System.TypeLoadException
    description: The current type is @'System.TypedReference'.-or-The current type is a ByRef type. That is, @'System.Type.IsByRef' returns true.
- uid: System.Type.MakeArrayType(System.Int32)
  id: MakeArrayType(System.Int32)
  parent: System.Type
  href: System.Type.yml
  name: MakeArrayType(Int32)
  fullName: System.Type.MakeArrayType(System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 149
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a @'System.Type' object representing an array of the current type, with the specified number of dimensions.
  syntax:
    content: public virtual Type MakeArrayType(int rank)
    content.vb: Public Overridable Function MakeArrayType(rank As Integer) As Type
    parameters:
    - id: rank
      type: System.Int32
      description: The number of dimensions for the array. This number must be less than or equal to 32.
    return:
      type: System.Type
      description: An object representing an array of the current type, with the specified number of dimensions.
  exceptions:
  - type: System.IndexOutOfRangeException
    description: '*rank* is invalid. For example, 0 or negative.'
  - type: System.NotSupportedException
    description: The invoked method is not supported in the base class.
  - type: System.TypeLoadException
    description: The current type is @'System.TypedReference'.-or-The current type is a ByRef type. That is, @'System.Type.IsByRef' returns true. -or-*rank* is greater than 32.
- uid: System.Type.GetTypeFromProgID(System.String)
  id: GetTypeFromProgID(System.String)
  parent: System.Type
  href: System.Type.yml
  name: GetTypeFromProgID(String)
  fullName: System.Type.GetTypeFromProgID(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 161
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the type associated with the specified program identifier (ProgID), returning null if an error is encountered while loading the @'System.Type'.
  syntax:
    content: public static Type GetTypeFromProgID(string progID)
    content.vb: Public Shared Function GetTypeFromProgID(progID As String) As Type
    parameters:
    - id: progID
      type: System.String
      description: The ProgID of the type to get.
    return:
      type: System.Type
      description: The type associated with the specified ProgID, if *progID* is a valid entry in the registry and a type is associated with it; otherwise, null.
  exceptions:
  - type: System.ArgumentException
    description: '*progID* is null.'
- uid: System.Type.GetTypeFromProgID(System.String,System.Boolean)
  id: GetTypeFromProgID(System.String,System.Boolean)
  parent: System.Type
  href: System.Type.yml
  name: GetTypeFromProgID(String, Boolean)
  fullName: System.Type.GetTypeFromProgID(System.String, System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 176
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the type associated with the specified program identifier (ProgID), specifying whether to throw an exception if an error occurs while loading the type.
  syntax:
    content: public static Type GetTypeFromProgID(string progID, bool throwOnError)
    content.vb: Public Shared Function GetTypeFromProgID(progID As String, throwOnError As Boolean) As Type
    parameters:
    - id: progID
      type: System.String
      description: The ProgID of the type to get.
    - id: throwOnError
      type: System.Boolean
      description: true to throw any exception that occurs.-or- false to ignore any exception that occurs.
    return:
      type: System.Type
      description: The type associated with the specified program identifier (ProgID), if *progID* is a valid entry in the registry and a type is associated with it; otherwise, null.
  exceptions:
  - type: System.ArgumentException
    description: '*progID* is null.'
  - type: System.Runtime.InteropServices.COMException
    description: The specified ProgID is not registered.
- uid: System.Type.GetTypeFromProgID(System.String,System.String)
  id: GetTypeFromProgID(System.String,System.String)
  parent: System.Type
  href: System.Type.yml
  name: GetTypeFromProgID(String, String)
  fullName: System.Type.GetTypeFromProgID(System.String, System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 182
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the type associated with the specified program identifier (progID) from the specified server, returning null if an error is encountered while loading the type.
  syntax:
    content: public static Type GetTypeFromProgID(string progID, string server)
    content.vb: Public Shared Function GetTypeFromProgID(progID As String, server As String) As Type
    parameters:
    - id: progID
      type: System.String
      description: The progID of the type to get.
    - id: server
      type: System.String
      description: The server from which to load the type. If the server name is null, this method automatically reverts to the local machine.
    return:
      type: System.Type
      description: The type associated with the specified program identifier (progID), if *progID* is a valid entry in the registry and a type is associated with it; otherwise, null.
  exceptions:
  - type: System.ArgumentException
    description: '*prodID* is null.'
- uid: System.Type.GetTypeFromProgID(System.String,System.String,System.Boolean)
  id: GetTypeFromProgID(System.String,System.String,System.Boolean)
  parent: System.Type
  href: System.Type.yml
  name: GetTypeFromProgID(String, String, Boolean)
  fullName: System.Type.GetTypeFromProgID(System.String, System.String, System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 188
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the type associated with the specified program identifier (progID) from the specified server, specifying whether to throw an exception if an error occurs while loading the type.
  syntax:
    content: public static Type GetTypeFromProgID(string progID, string server, bool throwOnError)
    content.vb: Public Shared Function GetTypeFromProgID(progID As String, server As String, throwOnError As Boolean) As Type
    parameters:
    - id: progID
      type: System.String
      description: The progID of the @'System.Type' to get.
    - id: server
      type: System.String
      description: The server from which to load the type. If the server name is null, this method automatically reverts to the local machine.
    - id: throwOnError
      type: System.Boolean
      description: true to throw any exception that occurs.-or- false to ignore any exception that occurs.
    return:
      type: System.Type
      description: The type associated with the specified program identifier (progID), if *progID* is a valid entry in the registry and a type is associated with it; otherwise, null.
  exceptions:
  - type: System.ArgumentException
    description: '*progID* is null.'
  - type: System.Runtime.InteropServices.COMException
    description: The specified progID is not registered.
- uid: System.Type.GetTypeFromCLSID(System.Guid)
  id: GetTypeFromCLSID(System.Guid)
  parent: System.Type
  href: System.Type.yml
  name: GetTypeFromCLSID(Guid)
  fullName: System.Type.GetTypeFromCLSID(System.Guid)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 201
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the type associated with the specified class identifier (CLSID).
  syntax:
    content: public static Type GetTypeFromCLSID(Guid clsid)
    content.vb: Public Shared Function GetTypeFromCLSID(clsid As Guid) As Type
    parameters:
    - id: clsid
      type: System.Guid
      description: The CLSID of the type to get.
    return:
      type: System.Type
      description: System.__ComObject regardless of whether the CLSID is valid.
- uid: System.Type.GetTypeFromCLSID(System.Guid,System.Boolean)
  id: GetTypeFromCLSID(System.Guid,System.Boolean)
  parent: System.Type
  href: System.Type.yml
  name: GetTypeFromCLSID(Guid, Boolean)
  fullName: System.Type.GetTypeFromCLSID(System.Guid, System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 207
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the type associated with the specified class identifier (CLSID), specifying whether to throw an exception if an error occurs while loading the type.
  syntax:
    content: public static Type GetTypeFromCLSID(Guid clsid, bool throwOnError)
    content.vb: Public Shared Function GetTypeFromCLSID(clsid As Guid, throwOnError As Boolean) As Type
    parameters:
    - id: clsid
      type: System.Guid
      description: The CLSID of the type to get.
    - id: throwOnError
      type: System.Boolean
      description: true to throw any exception that occurs.-or- false to ignore any exception that occurs.
    return:
      type: System.Type
      description: System.__ComObject regardless of whether the CLSID is valid.
- uid: System.Type.GetTypeFromCLSID(System.Guid,System.String)
  id: GetTypeFromCLSID(System.Guid,System.String)
  parent: System.Type
  href: System.Type.yml
  name: GetTypeFromCLSID(Guid, String)
  fullName: System.Type.GetTypeFromCLSID(System.Guid, System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 213
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the type associated with the specified class identifier (CLSID) from the specified server.
  syntax:
    content: public static Type GetTypeFromCLSID(Guid clsid, string server)
    content.vb: Public Shared Function GetTypeFromCLSID(clsid As Guid, server As String) As Type
    parameters:
    - id: clsid
      type: System.Guid
      description: The CLSID of the type to get.
    - id: server
      type: System.String
      description: The server from which to load the type. If the server name is null, this method automatically reverts to the local machine.
    return:
      type: System.Type
      description: System.__ComObject regardless of whether the CLSID is valid.
- uid: System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)
  id: GetTypeFromCLSID(System.Guid,System.String,System.Boolean)
  parent: System.Type
  href: System.Type.yml
  name: GetTypeFromCLSID(Guid, String, Boolean)
  fullName: System.Type.GetTypeFromCLSID(System.Guid, System.String, System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 219
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the type associated with the specified class identifier (CLSID) from the specified server, specifying whether to throw an exception if an error occurs while loading the type.
  syntax:
    content: public static Type GetTypeFromCLSID(Guid clsid, string server, bool throwOnError)
    content.vb: Public Shared Function GetTypeFromCLSID(clsid As Guid, server As String, throwOnError As Boolean) As Type
    parameters:
    - id: clsid
      type: System.Guid
      description: The CLSID of the type to get.
    - id: server
      type: System.String
      description: The server from which to load the type. If the server name is null, this method automatically reverts to the local machine.
    - id: throwOnError
      type: System.Boolean
      description: true to throw any exception that occurs.-or- false to ignore any exception that occurs.
    return:
      type: System.Type
      description: System.__ComObject regardless of whether the CLSID is valid.
- uid: System.Type.GetTypeCode(System.Type)
  id: GetTypeCode(System.Type)
  parent: System.Type
  href: System.Type.yml
  name: GetTypeCode(Type)
  fullName: System.Type.GetTypeCode(System.Type)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 229
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the underlying type code of the specified @'System.Type'.
  syntax:
    content: public static TypeCode GetTypeCode(Type type)
    content.vb: Public Shared Function GetTypeCode(type As Type) As TypeCode
    parameters:
    - id: type
      type: System.Type
      description: The type whose underlying type code to get.
    return:
      type: System.TypeCode
      description: The code of the underlying type, or @'System.TypeCode.Empty' if *type* is null.
- uid: System.Type.GetTypeCodeImpl
  id: GetTypeCodeImpl
  parent: System.Type
  href: System.Type.yml
  name: GetTypeCodeImpl()
  fullName: System.Type.GetTypeCodeImpl()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 236
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the underlying type code of the specified @'System.Type'.
  syntax:
    content: protected virtual TypeCode GetTypeCodeImpl()
    content.vb: Protected Overridable Function GetTypeCodeImpl As TypeCode
    return:
      type: System.TypeCode
      description: The code of the underlying type.
- uid: System.Type.GUID
  id: GUID
  parent: System.Type
  href: System.Type.yml
  name: GUID
  fullName: System.Type.GUID
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 249
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the GUID associated with the @'System.Type'.
  syntax:
    content: public abstract Guid GUID { get; }
    content.vb: Public MustOverride ReadOnly Property GUID As Guid
    parameters: []
    return:
      type: System.Guid
      description: The GUID associated with the @'System.Type'.
- uid: System.Type.DefaultBinder
  id: DefaultBinder
  parent: System.Type
  href: System.Type.yml
  name: DefaultBinder
  fullName: System.Type.DefaultBinder
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 254
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a reference to the default binder, which implements internal rules for selecting the appropriate members to be called by @'System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])'.
  syntax:
    content: public static Binder DefaultBinder { get; }
    content.vb: Public Shared ReadOnly Property DefaultBinder As Binder
    parameters: []
    return:
      type: System.Reflection.Binder
      description: A reference to the default binder used by the system.
- uid: System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  id: InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  parent: System.Type
  href: System.Type.yml
  name: InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])
  name.vb: InvokeMember(String, BindingFlags, Binder, Object, Object(), ParameterModifier(), CultureInfo, String())
  fullName: System.Type.InvokeMember(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object, System.Object[], System.Reflection.ParameterModifier[], System.Globalization.CultureInfo, System.String[])
  fullName.vb: System.Type.InvokeMember(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object, System.Object(), System.Reflection.ParameterModifier(), System.Globalization.CultureInfo, System.String())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 294
  assemblies:
  - mscorlib
  namespace: System
  summary: When overridden in a derived class, invokes the specified member, using the specified binding constraints and matching the specified argument list, modifiers and culture.
  syntax:
    content: public abstract object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters)
    content.vb: Public MustOverride Function InvokeMember(name As String, invokeAttr As BindingFlags, binder As Binder, target As Object, args As Object(), modifiers As ParameterModifier(), culture As CultureInfo, namedParameters As String()) As Object
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the constructor, method, property, or field member to invoke.-or- An empty string ("") to invoke the default member. -or-For IDispatch members, a string representing the DispID, for example "[DispID=3]".
    - id: invokeAttr
      type: System.Reflection.BindingFlags
      description: A bitmask comprised of one or more @'System.Reflection.BindingFlags' that specify how the search is conducted. The access can be one of the BindingFlags such as Public, NonPublic, Private, InvokeMethod, GetField, and so on. The type of lookup need not be specified. If the type of lookup is omitted, BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static are used.
    - id: binder
      type: System.Reflection.Binder
      description: An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- A null reference (Nothing in Visual Basic), to use the @'System.Type.DefaultBinder'. Note that explicitly defining a @'System.Reflection.Binder' object may be required for successfully invoking method overloads with variable arguments.
    - id: target
      type: System.Object
      description: The object on which to invoke the specified member.
    - id: args
      type: System.Object[]
      description: An array containing the arguments to pass to the member to invoke.
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: An array of @'System.Reflection.ParameterModifier' objects representing the attributes associated with the corresponding element in the *args* array. A parameter's associated attributes are stored in the member's signature. The default binder processes this parameter only when calling a COM component.
    - id: culture
      type: System.Globalization.CultureInfo
      description: The @'System.Globalization.CultureInfo' object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double.-or- A null reference (Nothing in Visual Basic) to use the current thread's @'System.Globalization.CultureInfo'.
    - id: namedParameters
      type: System.String[]
      description: An array containing the names of the parameters to which the values in the *args* array are passed.
    return:
      type: System.Object
      description: An object representing the return value of the invoked member.
  exceptions:
  - type: System.ArgumentNullException
    description: '*invokeAttr* does not contain CreateInstance and *name* is null.'
  - type: System.ArgumentException
    description: '*args* and *modifiers* do not have the same length.-or- *invokeAttr* is not a valid @''System.Reflection.BindingFlags'' attribute.-or- *invokeAttr* does not contain one of the following binding flags: InvokeMethod, CreateInstance, GetField, SetField, GetProperty, or SetProperty.-or- *invokeAttr* contains CreateInstance combined with InvokeMethod, GetField, SetField, GetProperty, or SetProperty.-or- *invokeAttr* contains both GetField and SetField.-or- *invokeAttr* contains both GetProperty and SetProperty.-or- *invokeAttr* contains InvokeMethod combined with SetField or SetProperty.-or- *invokeAttr* contains SetField and *args* has more than one element.-or- The named parameter array is larger than the argument array.-or- This method is called on a COM object and one of the following binding flags was not passed in: BindingFlags.InvokeMethod, BindingFlags.GetProperty, BindingFlags.SetProperty, BindingFlags.PutDispProperty, or BindingFlags.PutRefDispProperty.-or- One of the named parameter arrays contains a string that is null.'
  - type: System.MethodAccessException
    description: The specified member is a class initializer.
  - type: System.MissingFieldException
    description: The field or property cannot be found.
  - type: System.MissingMethodException
    description: No method can be found that matches the arguments in *args*.-or- No member can be found that has the argument names supplied in *namedParameters*.-or- The current @'System.Type' object represents a type that contains open type parameters, that is, @'System.Type.ContainsGenericParameters' returns true.
  - type: System.Reflection.TargetException
    description: The specified member cannot be invoked on *target*.
  - type: System.Reflection.AmbiguousMatchException
    description: More than one method matches the binding criteria.
  - type: System.InvalidOperationException
    description: The method represented by *name* has one or more unspecified generic type parameters. That is, the method's @'System.Reflection.MethodInfo.ContainsGenericParameters' property returns true.
- uid: System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)
  id: InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)
  parent: System.Type
  href: System.Type.yml
  name: InvokeMember(String, BindingFlags, Binder, Object, Object[], CultureInfo)
  name.vb: InvokeMember(String, BindingFlags, Binder, Object, Object(), CultureInfo)
  fullName: System.Type.InvokeMember(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object, System.Object[], System.Globalization.CultureInfo)
  fullName.vb: System.Type.InvokeMember(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object, System.Object(), System.Globalization.CultureInfo)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 297
  assemblies:
  - mscorlib
  namespace: System
  summary: Invokes the specified member, using the specified binding constraints and matching the specified argument list and culture.
  syntax:
    content: public object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, CultureInfo culture)
    content.vb: Public Function InvokeMember(name As String, invokeAttr As BindingFlags, binder As Binder, target As Object, args As Object(), culture As CultureInfo) As Object
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the constructor, method, property, or field member to invoke.-or- An empty string ("") to invoke the default member. -or-For IDispatch members, a string representing the DispID, for example "[DispID=3]".
    - id: invokeAttr
      type: System.Reflection.BindingFlags
      description: A bitmask comprised of one or more @'System.Reflection.BindingFlags' that specify how the search is conducted. The access can be one of the BindingFlags such as Public, NonPublic, Private, InvokeMethod, GetField, and so on. The type of lookup need not be specified. If the type of lookup is omitted, BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static are used.
    - id: binder
      type: System.Reflection.Binder
      description: An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- A null reference (Nothing in Visual Basic), to use the @'System.Type.DefaultBinder'. Note that explicitly defining a @'System.Reflection.Binder' object may be required for successfully invoking method overloads with variable arguments.
    - id: target
      type: System.Object
      description: The object on which to invoke the specified member.
    - id: args
      type: System.Object[]
      description: An array containing the arguments to pass to the member to invoke.
    - id: culture
      type: System.Globalization.CultureInfo
      description: The object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric @'System.String' to a @'System.Double'.-or- A null reference (Nothing in Visual Basic) to use the current thread's @'System.Globalization.CultureInfo'.
    return:
      type: System.Object
      description: An object representing the return value of the invoked member.
  exceptions:
  - type: System.ArgumentNullException
    description: '*invokeAttr* does not contain CreateInstance and *name* is null.'
  - type: System.ArgumentException
    description: '*invokeAttr* is not a valid @''System.Reflection.BindingFlags'' attribute. -or- *invokeAttr* does not contain one of the following binding flags: InvokeMethod, CreateInstance, GetField, SetField, GetProperty, or SetProperty.-or- *invokeAttr* contains CreateInstance combined with InvokeMethod, GetField, SetField, GetProperty, or SetProperty.-or- *invokeAttr* contains both GetField and SetField.-or- *invokeAttr* contains both GetProperty and SetProperty.-or- *invokeAttr* contains InvokeMethod combined with SetField or SetProperty.-or- *invokeAttr* contains SetField and *args* has more than one element.-or- This method is called on a COM object and one of the following binding flags was not passed in: BindingFlags.InvokeMethod, BindingFlags.GetProperty, BindingFlags.SetProperty, BindingFlags.PutDispProperty, or BindingFlags.PutRefDispProperty.-or- One of the named parameter arrays contains a string that is null.'
  - type: System.MethodAccessException
    description: The specified member is a class initializer.
  - type: System.MissingFieldException
    description: The field or property cannot be found.
  - type: System.MissingMethodException
    description: No method can be found that matches the arguments in *args*.-or- The current @'System.Type' object represents a type that contains open type parameters, that is, @'System.Type.ContainsGenericParameters' returns true.
  - type: System.Reflection.TargetException
    description: The specified member cannot be invoked on *target*.
  - type: System.Reflection.AmbiguousMatchException
    description: More than one method matches the binding criteria.
  - type: System.InvalidOperationException
    description: The method represented by *name* has one or more unspecified generic type parameters. That is, the method's @'System.Reflection.MethodInfo.ContainsGenericParameters' property returns true.
- uid: System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])
  id: InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])
  parent: System.Type
  href: System.Type.yml
  name: InvokeMember(String, BindingFlags, Binder, Object, Object[])
  name.vb: InvokeMember(String, BindingFlags, Binder, Object, Object())
  fullName: System.Type.InvokeMember(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object, System.Object[])
  fullName.vb: System.Type.InvokeMember(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object, System.Object())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 304
  assemblies:
  - mscorlib
  namespace: System
  summary: Invokes the specified member, using the specified binding constraints and matching the specified argument list.
  syntax:
    content: public object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args)
    content.vb: Public Function InvokeMember(name As String, invokeAttr As BindingFlags, binder As Binder, target As Object, args As Object()) As Object
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the constructor, method, property, or field member to invoke.-or- An empty string ("") to invoke the default member. -or-For IDispatch members, a string representing the DispID, for example "[DispID=3]".
    - id: invokeAttr
      type: System.Reflection.BindingFlags
      description: A bitmask comprised of one or more @'System.Reflection.BindingFlags' that specify how the search is conducted. The access can be one of the BindingFlags such as Public, NonPublic, Private, InvokeMethod, GetField, and so on. The type of lookup need not be specified. If the type of lookup is omitted, BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static are used.
    - id: binder
      type: System.Reflection.Binder
      description: An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- A null reference (Nothing in Visual Basic), to use the @'System.Type.DefaultBinder'. Note that explicitly defining a @'System.Reflection.Binder' object may be required for successfully invoking method overloads with variable arguments.
    - id: target
      type: System.Object
      description: The object on which to invoke the specified member.
    - id: args
      type: System.Object[]
      description: An array containing the arguments to pass to the member to invoke.
    return:
      type: System.Object
      description: An object representing the return value of the invoked member.
  exceptions:
  - type: System.ArgumentNullException
    description: '*invokeAttr* does not contain CreateInstance and *name* is null.'
  - type: System.ArgumentException
    description: '*invokeAttr* is not a valid @''System.Reflection.BindingFlags'' attribute. -or- *invokeAttr* does not contain one of the following binding flags: InvokeMethod, CreateInstance, GetField, SetField, GetProperty, or SetProperty. -or- *invokeAttr* contains CreateInstance combined with InvokeMethod, GetField, SetField, GetProperty, or SetProperty.-or- *invokeAttr* contains both GetField and SetField.-or- *invokeAttr* contains both GetProperty and SetProperty.-or- *invokeAttr* contains InvokeMethod combined with SetField or SetProperty.-or- *invokeAttr* contains SetField and *args* has more than one element.-or- This method is called on a COM object and one of the following binding flags was not passed in: BindingFlags.InvokeMethod, BindingFlags.GetProperty, BindingFlags.SetProperty, BindingFlags.PutDispProperty, or BindingFlags.PutRefDispProperty.-or- One of the named parameter arrays contains a string that is null.'
  - type: System.MethodAccessException
    description: The specified member is a class initializer.
  - type: System.MissingFieldException
    description: The field or property cannot be found.
  - type: System.MissingMethodException
    description: No method can be found that matches the arguments in *args*.-or- The current @'System.Type' object represents a type that contains open type parameters, that is, @'System.Type.ContainsGenericParameters' returns true.
  - type: System.Reflection.TargetException
    description: The specified member cannot be invoked on *target*.
  - type: System.Reflection.AmbiguousMatchException
    description: More than one method matches the binding criteria.
  - type: System.NotSupportedException
    description: The .NET Compact Framework does not currently support this method.
  - type: System.InvalidOperationException
    description: The method represented by *name* has one or more unspecified generic type parameters. That is, the method's @'System.Reflection.MethodInfo.ContainsGenericParameters' property returns true.
- uid: System.Type.Module
  id: Module
  parent: System.Type
  href: System.Type.yml
  name: Module
  fullName: System.Type.Module
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 314
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the module (the DLL) in which the current @'System.Type' is defined.
  syntax:
    content: public abstract Module Module { get; }
    content.vb: Public MustOverride ReadOnly Property Module As
    parameters: []
    return:
      type: System.Reflection.Module
      description: The module in which the current @'System.Type' is defined.
- uid: System.Type.Assembly
  id: Assembly
  parent: System.Type
  href: System.Type.yml
  name: Assembly
  fullName: System.Type.Assembly
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 317
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the @'System.Reflection.Assembly' in which the type is declared. For generic types, gets the @'System.Reflection.Assembly' in which the generic type is defined.
  syntax:
    content: public abstract Assembly Assembly { get; }
    content.vb: Public MustOverride ReadOnly Property Assembly As Assembly
    parameters: []
    return:
      type: System.Reflection.Assembly
      description: An @'System.Reflection.Assembly' instance that describes the assembly containing the current type. For generic types, the instance describes the assembly that contains the generic type definition, not the assembly that creates and uses a particular constructed type.
- uid: System.Type.TypeHandle
  id: TypeHandle
  parent: System.Type
  href: System.Type.yml
  name: TypeHandle
  fullName: System.Type.TypeHandle
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 325
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the handle for the current @'System.Type'.
  syntax:
    content: public virtual RuntimeTypeHandle TypeHandle { get; }
    content.vb: Public Overridable ReadOnly Property TypeHandle As RuntimeTypeHandle
    parameters: []
    return:
      type: System.RuntimeTypeHandle
      description: The handle for the current @'System.Type'.
  exceptions:
  - type: System.NotSupportedException
    description: The .NET Compact Framework does not currently support this property.
- uid: System.Type.GetTypeHandle(System.Object)
  id: GetTypeHandle(System.Object)
  parent: System.Type
  href: System.Type.yml
  name: GetTypeHandle(Object)
  fullName: System.Type.GetTypeHandle(System.Object)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 338
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the handle for the @'System.Type' of a specified object.
  syntax:
    content: public static RuntimeTypeHandle GetTypeHandle(object o)
    content.vb: Public Shared Function GetTypeHandle(o As Object) As RuntimeTypeHandle
    parameters:
    - id: o
      type: System.Object
      description: The object for which to get the type handle.
    return:
      type: System.RuntimeTypeHandle
      description: The handle for the @'System.Type' of the specified @'System.Object'.
  exceptions:
  - type: System.ArgumentNullException
    description: '*o* is null.'
- uid: System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)
  id: GetTypeFromHandle(System.RuntimeTypeHandle)
  parent: System.Type
  href: System.Type.yml
  name: GetTypeFromHandle(RuntimeTypeHandle)
  fullName: System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)
  type: Method
  source:
    path: mscorlib
    isExternal: true
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the type referenced by the specified type handle.
  syntax:
    content: public static Type GetTypeFromHandle(RuntimeTypeHandle handle)
    content.vb: Public Shared Function GetTypeFromHandle(handle As RuntimeTypeHandle) As Type
    parameters:
    - id: handle
      type: System.RuntimeTypeHandle
      description: The object that refers to the type.
    return:
      type: System.Type
      description: The type referenced by the specified @'System.RuntimeTypeHandle', or null if the @'System.RuntimeTypeHandle.Value' property of *handle* is null.
  exceptions:
  - type: System.Reflection.TargetInvocationException
    description: A class initializer is invoked and throws an exception.
- uid: System.Type.FullName
  id: FullName
  parent: System.Type
  href: System.Type.yml
  name: FullName
  fullName: System.Type.FullName
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 357
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the fully qualified name of the type, including its namespace but not its assembly.
  syntax:
    content: public abstract string FullName { get; }
    content.vb: Public MustOverride ReadOnly Property FullName As String
    parameters: []
    return:
      type: System.String
      description: The fully qualified name of the type, including its namespace but not its assembly; or null if the current instance represents a generic type parameter, an array type, pointer type, or byref type based on a type parameter, or a generic type that is not a generic type definition but contains unresolved type parameters.
- uid: System.Type.Namespace
  id: Namespace
  parent: System.Type
  href: System.Type.yml
  name: Namespace
  fullName: System.Type.Namespace
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 363
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the namespace of the @'System.Type'.
  syntax:
    content: public abstract string Namespace { get; }
    content.vb: Public MustOverride ReadOnly Property Namespace As String
    parameters: []
    return:
      type: System.String
      description: The namespace of the @'System.Type'; null if the current instance has no namespace or represents a generic parameter.
- uid: System.Type.AssemblyQualifiedName
  id: AssemblyQualifiedName
  parent: System.Type
  href: System.Type.yml
  name: AssemblyQualifiedName
  fullName: System.Type.AssemblyQualifiedName
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 369
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the assembly-qualified name of the type, which includes the name of the assembly from which this @'System.Type' object was loaded.
  syntax:
    content: public abstract string AssemblyQualifiedName { get; }
    content.vb: Public MustOverride ReadOnly Property AssemblyQualifiedName As String
    parameters: []
    return:
      type: System.String
      description: The assembly-qualified name of the @'System.Type', which includes the name of the assembly from which the @'System.Type' was loaded, or null if the current instance represents a generic type parameter.
- uid: System.Type.GetArrayRank
  id: GetArrayRank
  parent: System.Type
  href: System.Type.yml
  name: GetArrayRank()
  fullName: System.Type.GetArrayRank()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 375
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the number of dimensions in an array.
  syntax:
    content: public virtual int GetArrayRank()
    content.vb: Public Overridable Function GetArrayRank As Integer
    return:
      type: System.Int32
      description: An integer that contains the number of dimensions in the current type.
  exceptions:
  - type: System.NotSupportedException
    description: The functionality of this method is unsupported in the base class and must be implemented in a derived class instead.
  - type: System.ArgumentException
    description: The current type is not an array.
- uid: System.Type.BaseType
  id: BaseType
  parent: System.Type
  href: System.Type.yml
  name: BaseType
  fullName: System.Type.BaseType
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 384
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the type from which the current @'System.Type' directly inherits.
  syntax:
    content: public abstract Type BaseType { get; }
    content.vb: Public MustOverride ReadOnly Property BaseType As Type
    parameters: []
    return:
      type: System.Type
      description: The @'System.Type' from which the current @'System.Type' directly inherits, or null if the current Type represents the @'System.Object' class or an interface.
- uid: System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  id: GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Type
  href: System.Type.yml
  name: GetConstructor(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  name.vb: GetConstructor(BindingFlags, Binder, CallingConventions, Type(), ParameterModifier())
  fullName: System.Type.GetConstructor(System.Reflection.BindingFlags, System.Reflection.Binder, System.Reflection.CallingConventions, System.Type[], System.Reflection.ParameterModifier[])
  fullName.vb: System.Type.GetConstructor(System.Reflection.BindingFlags, System.Reflection.Binder, System.Reflection.CallingConventions, System.Type(), System.Reflection.ParameterModifier())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 394
  assemblies:
  - mscorlib
  namespace: System
  summary: Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.
  syntax:
    content: public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers)
    content.vb: Public Function GetConstructor(bindingAttr As BindingFlags, binder As Binder, callConvention As CallingConventions, types As Type(), modifiers As ParameterModifier()) As ConstructorInfo
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A bitmask comprised of one or more @'System.Reflection.BindingFlags' that specify how the search is conducted.-or- Zero, to return null.
    - id: binder
      type: System.Reflection.Binder
      description: An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- A null reference (Nothing in Visual Basic), to use the @'System.Type.DefaultBinder'.
    - id: callConvention
      type: System.Reflection.CallingConventions
      description: The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.
    - id: types
      type: System.Type[]
      description: An array of @'System.Type' objects representing the number, order, and type of the parameters for the constructor to get.-or- An empty array of the type @'System.Type' (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: An array of @'System.Reflection.ParameterModifier' objects representing the attributes associated with the corresponding element in the *types* array. The default binder does not process this parameter.
    return:
      type: System.Reflection.ConstructorInfo
      description: An object representing the constructor that matches the specified requirements, if found; otherwise, null.
  exceptions:
  - type: System.ArgumentNullException
    description: '*types* is null.-or- One of the elements in *types* is null.'
  - type: System.ArgumentException
    description: '*types* is multidimensional.-or- *modifiers* is multidimensional.-or- *types* and *modifiers* do not have the same length.'
- uid: System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  id: GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Type
  href: System.Type.yml
  name: GetConstructor(BindingFlags, Binder, Type[], ParameterModifier[])
  name.vb: GetConstructor(BindingFlags, Binder, Type(), ParameterModifier())
  fullName: System.Type.GetConstructor(System.Reflection.BindingFlags, System.Reflection.Binder, System.Type[], System.Reflection.ParameterModifier[])
  fullName.vb: System.Type.GetConstructor(System.Reflection.BindingFlags, System.Reflection.Binder, System.Type(), System.Reflection.ParameterModifier())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 411
  assemblies:
  - mscorlib
  namespace: System
  summary: Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints.
  syntax:
    content: public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers)
    content.vb: Public Function GetConstructor(bindingAttr As BindingFlags, binder As Binder, types As Type(), modifiers As ParameterModifier()) As ConstructorInfo
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A bitmask comprised of one or more @'System.Reflection.BindingFlags' that specify how the search is conducted.-or- Zero, to return null.
    - id: binder
      type: System.Reflection.Binder
      description: An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- A null reference (Nothing in Visual Basic), to use the @'System.Type.DefaultBinder'.
    - id: types
      type: System.Type[]
      description: An array of @'System.Type' objects representing the number, order, and type of the parameters for the constructor to get.-or- An empty array of the type @'System.Type' (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.-or- @'System.Type.EmptyTypes'.
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: An array of @'System.Reflection.ParameterModifier' objects representing the attributes associated with the corresponding element in the parameter type array. The default binder does not process this parameter.
    return:
      type: System.Reflection.ConstructorInfo
      description: A @'System.Reflection.ConstructorInfo' object representing the constructor that matches the specified requirements, if found; otherwise, null.
  exceptions:
  - type: System.ArgumentNullException
    description: '*types* is null.-or- One of the elements in *types* is null.'
  - type: System.ArgumentException
    description: '*types* is multidimensional.-or- *modifiers* is multidimensional.-or- *types* and *modifiers* do not have the same length.'
- uid: System.Type.GetConstructor(System.Type[])
  id: GetConstructor(System.Type[])
  parent: System.Type
  href: System.Type.yml
  name: GetConstructor(Type[])
  name.vb: GetConstructor(Type())
  fullName: System.Type.GetConstructor(System.Type[])
  fullName.vb: System.Type.GetConstructor(System.Type())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 423
  assemblies:
  - mscorlib
  namespace: System
  summary: Searches for a public instance constructor whose parameters match the types in the specified array.
  syntax:
    content: public ConstructorInfo GetConstructor(Type[] types)
    content.vb: Public Function GetConstructor(types As Type()) As ConstructorInfo
    parameters:
    - id: types
      type: System.Type[]
      description: An array of @'System.Type' objects representing the number, order, and type of the parameters for the desired constructor.-or- An empty array of @'System.Type' objects, to get a constructor that takes no parameters. Such an empty array is provided by the static field @'System.Type.EmptyTypes'.
    return:
      type: System.Reflection.ConstructorInfo
      description: An object representing the public instance constructor whose parameters match the types in the parameter type array, if found; otherwise, null.
  exceptions:
  - type: System.ArgumentNullException
    description: '*types* is null.-or- One of the elements in *types* is null.'
  - type: System.ArgumentException
    description: '*types* is multidimensional.'
- uid: System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  id: GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Type
  href: System.Type.yml
  name: GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  name.vb: GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type(), ParameterModifier())
  fullName: System.Type.GetConstructorImpl(System.Reflection.BindingFlags, System.Reflection.Binder, System.Reflection.CallingConventions, System.Type[], System.Reflection.ParameterModifier[])
  fullName.vb: System.Type.GetConstructorImpl(System.Reflection.BindingFlags, System.Reflection.Binder, System.Reflection.CallingConventions, System.Type(), System.Reflection.ParameterModifier())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 430
  assemblies:
  - mscorlib
  namespace: System
  summary: When overridden in a derived class, searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.
  syntax:
    content: protected abstract ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers)
    content.vb: Protected MustOverride Function GetConstructorImpl(bindingAttr As BindingFlags, binder As Binder, callConvention As CallingConventions, types As Type(), modifiers As ParameterModifier()) As ConstructorInfo
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A bitmask comprised of one or more @'System.Reflection.BindingFlags' that specify how the search is conducted.-or- Zero, to return null.
    - id: binder
      type: System.Reflection.Binder
      description: An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- A null reference (Nothing in Visual Basic), to use the @'System.Type.DefaultBinder'.
    - id: callConvention
      type: System.Reflection.CallingConventions
      description: The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.
    - id: types
      type: System.Type[]
      description: An array of @'System.Type' objects representing the number, order, and type of the parameters for the constructor to get.-or- An empty array of the type @'System.Type' (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: An array of @'System.Reflection.ParameterModifier' objects representing the attributes associated with the corresponding element in the *types* array. The default binder does not process this parameter.
    return:
      type: System.Reflection.ConstructorInfo
      description: A @'System.Reflection.ConstructorInfo' object representing the constructor that matches the specified requirements, if found; otherwise, null.
  exceptions:
  - type: System.ArgumentNullException
    description: '*types* is null.-or- One of the elements in *types* is null.'
  - type: System.ArgumentException
    description: '*types* is multidimensional.-or- *modifiers* is multidimensional.-or- *types* and *modifiers* do not have the same length.'
  - type: System.NotSupportedException
    description: The current type is a @'System.Reflection.Emit.TypeBuilder' or @'System.Reflection.Emit.GenericTypeParameterBuilder'.
- uid: System.Type.GetConstructors
  id: GetConstructors
  parent: System.Type
  href: System.Type.yml
  name: GetConstructors()
  fullName: System.Type.GetConstructors()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 440
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns all the public constructors defined for the current @'System.Type'.
  syntax:
    content: public ConstructorInfo[] GetConstructors()
    content.vb: Public Function GetConstructors As ConstructorInfo()
    return:
      type: System.Reflection.ConstructorInfo[]
      description: An array of @'System.Reflection.ConstructorInfo' objects representing all the public instance constructors defined for the current @'System.Type', but not including the type initializer (static constructor). If no public instance constructors are defined for the current @'System.Type', or if the current @'System.Type' represents a type parameter in the definition of a generic type or generic method, an empty array of type @'System.Reflection.ConstructorInfo' is returned.
- uid: System.Type.GetConstructors(System.Reflection.BindingFlags)
  id: GetConstructors(System.Reflection.BindingFlags)
  parent: System.Type
  href: System.Type.yml
  name: GetConstructors(BindingFlags)
  fullName: System.Type.GetConstructors(System.Reflection.BindingFlags)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 445
  assemblies:
  - mscorlib
  namespace: System
  summary: When overridden in a derived class, searches for the constructors defined for the current @'System.Type', using the specified BindingFlags.
  syntax:
    content: public abstract ConstructorInfo[] GetConstructors(BindingFlags bindingAttr)
    content.vb: Public MustOverride Function GetConstructors(bindingAttr As BindingFlags) As ConstructorInfo()
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A bitmask comprised of one or more @'System.Reflection.BindingFlags' that specify how the search is conducted.-or- Zero, to return null.
    return:
      type: System.Reflection.ConstructorInfo[]
      description: An array of @'System.Reflection.ConstructorInfo' objects representing all constructors defined for the current @'System.Type' that match the specified binding constraints, including the type initializer if it is defined. Returns an empty array of type @'System.Reflection.ConstructorInfo' if no constructors are defined for the current @'System.Type', if none of the defined constructors match the binding constraints, or if the current @'System.Type' represents a type parameter in the definition of a generic type or generic method.
- uid: System.Type.TypeInitializer
  id: TypeInitializer
  parent: System.Type
  href: System.Type.yml
  name: TypeInitializer
  fullName: System.Type.TypeInitializer
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 448
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the initializer for the type.
  syntax:
    content: public ConstructorInfo TypeInitializer { get; }
    content.vb: Public ReadOnly Property TypeInitializer As ConstructorInfo
    parameters: []
    return:
      type: System.Reflection.ConstructorInfo
      description: An object that contains the name of the class constructor for the @'System.Type'.
- uid: System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  id: GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Type
  href: System.Type.yml
  name: GetMethod(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  name.vb: GetMethod(String, BindingFlags, Binder, CallingConventions, Type(), ParameterModifier())
  fullName: System.Type.GetMethod(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Reflection.CallingConventions, System.Type[], System.Reflection.ParameterModifier[])
  fullName.vb: System.Type.GetMethod(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Reflection.CallingConventions, System.Type(), System.Reflection.ParameterModifier())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 464
  assemblies:
  - mscorlib
  namespace: System
  summary: Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.
  syntax:
    content: public MethodInfo GetMethod(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers)
    content.vb: Public Function GetMethod(name As String, bindingAttr As BindingFlags, binder As Binder, callConvention As CallingConventions, types As Type(), modifiers As ParameterModifier()) As MethodInfo
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the method to get.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A bitmask comprised of one or more @'System.Reflection.BindingFlags' that specify how the search is conducted.-or- Zero, to return null.
    - id: binder
      type: System.Reflection.Binder
      description: An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- A null reference (Nothing in Visual Basic), to use the @'System.Type.DefaultBinder'.
    - id: callConvention
      type: System.Reflection.CallingConventions
      description: The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and how the stack is cleaned up.
    - id: types
      type: System.Type[]
      description: An array of @'System.Type' objects representing the number, order, and type of the parameters for the method to get.-or- An empty array of @'System.Type' objects (as provided by the @'System.Type.EmptyTypes' field) to get a method that takes no parameters.
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: An array of @'System.Reflection.ParameterModifier' objects representing the attributes associated with the corresponding element in the *types* array. To be only used when calling through COM interop, and only parameters that are passed by reference are handled. The default binder does not process this parameter.
    return:
      type: System.Reflection.MethodInfo
      description: An object representing the method that matches the specified requirements, if found; otherwise, null.
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    description: More than one method is found with the specified name and matching the specified binding constraints.
  - type: System.ArgumentNullException
    description: '*name* is null.-or- *types* is null.-or- One of the elements in *types* is null.'
  - type: System.ArgumentException
    description: '*types* is multidimensional.-or- *modifiers* is multidimensional.'
- uid: System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  id: GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Type
  href: System.Type.yml
  name: GetMethod(String, BindingFlags, Binder, Type[], ParameterModifier[])
  name.vb: GetMethod(String, BindingFlags, Binder, Type(), ParameterModifier())
  fullName: System.Type.GetMethod(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Type[], System.Reflection.ParameterModifier[])
  fullName.vb: System.Type.GetMethod(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Type(), System.Reflection.ParameterModifier())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 482
  assemblies:
  - mscorlib
  namespace: System
  summary: Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints.
  syntax:
    content: public MethodInfo GetMethod(string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers)
    content.vb: Public Function GetMethod(name As String, bindingAttr As BindingFlags, binder As Binder, types As Type(), modifiers As ParameterModifier()) As MethodInfo
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the method to get.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A bitmask comprised of one or more @'System.Reflection.BindingFlags' that specify how the search is conducted.-or- Zero, to return null.
    - id: binder
      type: System.Reflection.Binder
      description: An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- A null reference (Nothing in Visual Basic), to use the @'System.Type.DefaultBinder'.
    - id: types
      type: System.Type[]
      description: An array of @'System.Type' objects representing the number, order, and type of the parameters for the method to get.-or- An empty array of @'System.Type' objects (as provided by the @'System.Type.EmptyTypes' field) to get a method that takes no parameters.
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: An array of @'System.Reflection.ParameterModifier' objects representing the attributes associated with the corresponding element in the *types* array. To be only used when calling through COM interop, and only parameters that are passed by reference are handled. The default binder does not process this parameter.
    return:
      type: System.Reflection.MethodInfo
      description: An object representing the method that matches the specified requirements, if found; otherwise, null.
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    description: More than one method is found with the specified name and matching the specified binding constraints.
  - type: System.ArgumentNullException
    description: '*name* is null.-or- *types* is null.-or- One of the elements in *types* is null.'
  - type: System.ArgumentException
    description: '*types* is multidimensional.-or- *modifiers* is multidimensional.'
- uid: System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])
  id: GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Type
  href: System.Type.yml
  name: GetMethod(String, Type[], ParameterModifier[])
  name.vb: GetMethod(String, Type(), ParameterModifier())
  fullName: System.Type.GetMethod(System.String, System.Type[], System.Reflection.ParameterModifier[])
  fullName.vb: System.Type.GetMethod(System.String, System.Type(), System.Reflection.ParameterModifier())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 499
  assemblies:
  - mscorlib
  namespace: System
  summary: Searches for the specified public method whose parameters match the specified argument types and modifiers.
  syntax:
    content: public MethodInfo GetMethod(string name, Type[] types, ParameterModifier[] modifiers)
    content.vb: Public Function GetMethod(name As String, types As Type(), modifiers As ParameterModifier()) As MethodInfo
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the public method to get.
    - id: types
      type: System.Type[]
      description: An array of @'System.Type' objects representing the number, order, and type of the parameters for the method to get.-or- An empty array of @'System.Type' objects (as provided by the @'System.Type.EmptyTypes' field) to get a method that takes no parameters.
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: An array of @'System.Reflection.ParameterModifier' objects representing the attributes associated with the corresponding element in the *types* array. To be only used when calling through COM interop, and only parameters that are passed by reference are handled. The default binder does not process this parameter.
    return:
      type: System.Reflection.MethodInfo
      description: An object representing the public method that matches the specified requirements, if found; otherwise, null.
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    description: More than one method is found with the specified name and specified parameters.
  - type: System.ArgumentNullException
    description: '*name* is null.-or- *types* is null.-or- One of the elements in *types* is null.'
  - type: System.ArgumentException
    description: '*types* is multidimensional.-or- *modifiers* is multidimensional.'
- uid: System.Type.GetMethod(System.String,System.Type[])
  id: GetMethod(System.String,System.Type[])
  parent: System.Type
  href: System.Type.yml
  name: GetMethod(String, Type[])
  name.vb: GetMethod(String, Type())
  fullName: System.Type.GetMethod(System.String, System.Type[])
  fullName.vb: System.Type.GetMethod(System.String, System.Type())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 512
  assemblies:
  - mscorlib
  namespace: System
  summary: Searches for the specified public method whose parameters match the specified argument types.
  syntax:
    content: public MethodInfo GetMethod(string name, Type[] types)
    content.vb: Public Function GetMethod(name As String, types As Type()) As MethodInfo
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the public method to get.
    - id: types
      type: System.Type[]
      description: An array of @'System.Type' objects representing the number, order, and type of the parameters for the method to get.-or- An empty array of @'System.Type' objects (as provided by the @'System.Type.EmptyTypes' field) to get a method that takes no parameters.
    return:
      type: System.Reflection.MethodInfo
      description: An object representing the public method whose parameters match the specified argument types, if found; otherwise, null.
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    description: More than one method is found with the specified name and specified parameters.
  - type: System.ArgumentNullException
    description: '*name* is null.-or- *types* is null.-or- One of the elements in *types* is null.'
  - type: System.ArgumentException
    description: '*types* is multidimensional.'
- uid: System.Type.GetMethod(System.String,System.Reflection.BindingFlags)
  id: GetMethod(System.String,System.Reflection.BindingFlags)
  parent: System.Type
  href: System.Type.yml
  name: GetMethod(String, BindingFlags)
  fullName: System.Type.GetMethod(System.String, System.Reflection.BindingFlags)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 525
  assemblies:
  - mscorlib
  namespace: System
  summary: Searches for the specified method, using the specified binding constraints.
  syntax:
    content: public MethodInfo GetMethod(string name, BindingFlags bindingAttr)
    content.vb: Public Function GetMethod(name As String, bindingAttr As BindingFlags) As MethodInfo
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the method to get.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A bitmask comprised of one or more @'System.Reflection.BindingFlags' that specify how the search is conducted.-or- Zero, to return null.
    return:
      type: System.Reflection.MethodInfo
      description: An object representing the method that matches the specified requirements, if found; otherwise, null.
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    description: More than one method is found with the specified name and matching the specified binding constraints.
  - type: System.ArgumentNullException
    description: '*name* is null.'
- uid: System.Type.GetMethod(System.String)
  id: GetMethod(System.String)
  parent: System.Type
  href: System.Type.yml
  name: GetMethod(String)
  fullName: System.Type.GetMethod(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 533
  assemblies:
  - mscorlib
  namespace: System
  summary: Searches for the public method with the specified name.
  syntax:
    content: public MethodInfo GetMethod(string name)
    content.vb: Public Function GetMethod(name As String) As MethodInfo
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the public method to get.
    return:
      type: System.Reflection.MethodInfo
      description: An object that represents the public method with the specified name, if found; otherwise, null.
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    description: More than one method is found with the specified name.
  - type: System.ArgumentNullException
    description: '*name* is null.'
- uid: System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  id: GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Type
  href: System.Type.yml
  name: GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  name.vb: GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type(), ParameterModifier())
  fullName: System.Type.GetMethodImpl(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Reflection.CallingConventions, System.Type[], System.Reflection.ParameterModifier[])
  fullName.vb: System.Type.GetMethodImpl(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Reflection.CallingConventions, System.Type(), System.Reflection.ParameterModifier())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 541
  assemblies:
  - mscorlib
  namespace: System
  summary: When overridden in a derived class, searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.
  syntax:
    content: protected abstract MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers)
    content.vb: Protected MustOverride Function GetMethodImpl(name As String, bindingAttr As BindingFlags, binder As Binder, callConvention As CallingConventions, types As Type(), modifiers As ParameterModifier()) As MethodInfo
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the method to get.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A bitmask comprised of one or more @'System.Reflection.BindingFlags' that specify how the search is conducted.-or- Zero, to return null.
    - id: binder
      type: System.Reflection.Binder
      description: An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- A null reference (Nothing in Visual Basic), to use the @'System.Type.DefaultBinder'.
    - id: callConvention
      type: System.Reflection.CallingConventions
      description: The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and what process cleans up the stack.
    - id: types
      type: System.Type[]
      description: An array of @'System.Type' objects representing the number, order, and type of the parameters for the method to get.-or- An empty array of the type @'System.Type' (that is, Type[] types = new Type[0]) to get a method that takes no parameters.-or- null. If *types* is null, arguments are not matched.
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: An array of @'System.Reflection.ParameterModifier' objects representing the attributes associated with the corresponding element in the *types* array. The default binder does not process this parameter.
    return:
      type: System.Reflection.MethodInfo
      description: An object representing the method that matches the specified requirements, if found; otherwise, null.
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    description: More than one method is found with the specified name and matching the specified binding constraints.
  - type: System.ArgumentNullException
    description: '*name* is null.'
  - type: System.ArgumentException
    description: '*types* is multidimensional.-or- *modifiers* is multidimensional.-or- *types* and *modifiers* do not have the same length.'
  - type: System.NotSupportedException
    description: The current type is a @'System.Reflection.Emit.TypeBuilder' or @'System.Reflection.Emit.GenericTypeParameterBuilder'.
- uid: System.Type.GetMethods
  id: GetMethods
  parent: System.Type
  href: System.Type.yml
  name: GetMethods()
  fullName: System.Type.GetMethods()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 551
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns all the public methods of the current @'System.Type'.
  syntax:
    content: public MethodInfo[] GetMethods()
    content.vb: Public Function GetMethods As MethodInfo()
    return:
      type: System.Reflection.MethodInfo[]
      description: An array of @'System.Reflection.MethodInfo' objects representing all the public methods defined for the current @'System.Type'.-or- An empty array of type @'System.Reflection.MethodInfo', if no public methods are defined for the current @'System.Type'.
- uid: System.Type.GetMethods(System.Reflection.BindingFlags)
  id: GetMethods(System.Reflection.BindingFlags)
  parent: System.Type
  href: System.Type.yml
  name: GetMethods(BindingFlags)
  fullName: System.Type.GetMethods(System.Reflection.BindingFlags)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 555
  assemblies:
  - mscorlib
  namespace: System
  summary: When overridden in a derived class, searches for the methods defined for the current @'System.Type', using the specified binding constraints.
  syntax:
    content: public abstract MethodInfo[] GetMethods(BindingFlags bindingAttr)
    content.vb: Public MustOverride Function GetMethods(bindingAttr As BindingFlags) As MethodInfo()
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A bitmask comprised of one or more @'System.Reflection.BindingFlags' that specify how the search is conducted.-or- Zero, to return null.
    return:
      type: System.Reflection.MethodInfo[]
      description: An array of @'System.Reflection.MethodInfo' objects representing all methods defined for the current @'System.Type' that match the specified binding constraints.-or- An empty array of type @'System.Reflection.MethodInfo', if no methods are defined for the current @'System.Type', or if none of the defined methods match the binding constraints.
- uid: System.Type.GetField(System.String,System.Reflection.BindingFlags)
  id: GetField(System.String,System.Reflection.BindingFlags)
  parent: System.Type
  href: System.Type.yml
  name: GetField(String, BindingFlags)
  fullName: System.Type.GetField(System.String, System.Reflection.BindingFlags)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 559
  assemblies:
  - mscorlib
  namespace: System
  summary: Searches for the specified field, using the specified binding constraints.
  syntax:
    content: public abstract FieldInfo GetField(string name, BindingFlags bindingAttr)
    content.vb: Public MustOverride Function GetField(name As String, bindingAttr As BindingFlags) As FieldInfo
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the data field to get.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A bitmask comprised of one or more @'System.Reflection.BindingFlags' that specify how the search is conducted.-or- Zero, to return null.
    return:
      type: System.Reflection.FieldInfo
      description: An object representing the field that matches the specified requirements, if found; otherwise, null.
  exceptions:
  - type: System.ArgumentNullException
    description: '*name* is null.'
- uid: System.Type.GetField(System.String)
  id: GetField(System.String)
  parent: System.Type
  href: System.Type.yml
  name: GetField(String)
  fullName: System.Type.GetField(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 562
  assemblies:
  - mscorlib
  namespace: System
  summary: Searches for the public field with the specified name.
  syntax:
    content: public FieldInfo GetField(string name)
    content.vb: Public Function GetField(name As String) As FieldInfo
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the data field to get.
    return:
      type: System.Reflection.FieldInfo
      description: An object representing the public field with the specified name, if found; otherwise, null.
  exceptions:
  - type: System.ArgumentNullException
    description: '*name* is null.'
  - type: System.NotSupportedException
    description: This @'System.Type' object is a @'System.Reflection.Emit.TypeBuilder' whose @'System.Reflection.Emit.TypeBuilder.CreateType' method has not yet been called.
- uid: System.Type.GetFields
  id: GetFields
  parent: System.Type
  href: System.Type.yml
  name: GetFields()
  fullName: System.Type.GetFields()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 569
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns all the public fields of the current @'System.Type'.
  syntax:
    content: public FieldInfo[] GetFields()
    content.vb: Public Function GetFields As FieldInfo()
    return:
      type: System.Reflection.FieldInfo[]
      description: An array of @'System.Reflection.FieldInfo' objects representing all the public fields defined for the current @'System.Type'.-or- An empty array of type @'System.Reflection.FieldInfo', if no public fields are defined for the current @'System.Type'.
- uid: System.Type.GetFields(System.Reflection.BindingFlags)
  id: GetFields(System.Reflection.BindingFlags)
  parent: System.Type
  href: System.Type.yml
  name: GetFields(BindingFlags)
  fullName: System.Type.GetFields(System.Reflection.BindingFlags)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 572
  assemblies:
  - mscorlib
  namespace: System
  summary: When overridden in a derived class, searches for the fields defined for the current @'System.Type', using the specified binding constraints.
  syntax:
    content: public abstract FieldInfo[] GetFields(BindingFlags bindingAttr)
    content.vb: Public MustOverride Function GetFields(bindingAttr As BindingFlags) As FieldInfo()
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A bitmask comprised of one or more @'System.Reflection.BindingFlags' that specify how the search is conducted.-or- Zero, to return null.
    return:
      type: System.Reflection.FieldInfo[]
      description: An array of @'System.Reflection.FieldInfo' objects representing all fields defined for the current @'System.Type' that match the specified binding constraints.-or- An empty array of type @'System.Reflection.FieldInfo', if no fields are defined for the current @'System.Type', or if none of the defined fields match the binding constraints.
- uid: System.Type.GetInterface(System.String)
  id: GetInterface(System.String)
  parent: System.Type
  href: System.Type.yml
  name: GetInterface(String)
  fullName: System.Type.GetInterface(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 577
  assemblies:
  - mscorlib
  namespace: System
  summary: Searches for the interface with the specified name.
  syntax:
    content: public Type GetInterface(string name)
    content.vb: Public Function GetInterface(name As String) As Type
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the interface to get. For generic interfaces, this is the mangled name.
    return:
      type: System.Type
      description: An object representing the interface with the specified name, implemented or inherited by the current @'System.Type', if found; otherwise, null.
  exceptions:
  - type: System.ArgumentNullException
    description: '*name* is null.'
  - type: System.Reflection.AmbiguousMatchException
    description: The current @'System.Type' represents a type that implements the same generic interface with different type arguments.
- uid: System.Type.GetInterface(System.String,System.Boolean)
  id: GetInterface(System.String,System.Boolean)
  parent: System.Type
  href: System.Type.yml
  name: GetInterface(String, Boolean)
  fullName: System.Type.GetInterface(System.String, System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 580
  assemblies:
  - mscorlib
  namespace: System
  summary: When overridden in a derived class, searches for the specified interface, specifying whether to do a case-insensitive search for the interface name.
  syntax:
    content: public abstract Type GetInterface(string name, bool ignoreCase)
    content.vb: Public MustOverride Function GetInterface(name As String, ignoreCase As Boolean) As Type
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the interface to get. For generic interfaces, this is the mangled name.
    - id: ignoreCase
      type: System.Boolean
      description: true to ignore the case of that part of *name* that specifies the simple interface name (the part that specifies the namespace must be correctly cased).-or- false to perform a case-sensitive search for all parts of *name*.
    return:
      type: System.Type
      description: An object representing the interface with the specified name, implemented or inherited by the current @'System.Type', if found; otherwise, null.
  exceptions:
  - type: System.ArgumentNullException
    description: '*name* is null.'
  - type: System.Reflection.AmbiguousMatchException
    description: The current @'System.Type' represents a type that implements the same generic interface with different type arguments.
- uid: System.Type.GetInterfaces
  id: GetInterfaces
  parent: System.Type
  href: System.Type.yml
  name: GetInterfaces()
  fullName: System.Type.GetInterfaces()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 585
  assemblies:
  - mscorlib
  namespace: System
  summary: When overridden in a derived class, gets all the interfaces implemented or inherited by the current @'System.Type'.
  syntax:
    content: public abstract Type[] GetInterfaces()
    content.vb: Public MustOverride Function GetInterfaces As Type()
    return:
      type: System.Type[]
      description: An array of @'System.Type' objects representing all the interfaces implemented or inherited by the current @'System.Type'.-or- An empty array of type @'System.Type', if no interfaces are implemented or inherited by the current @'System.Type'.
  exceptions:
  - type: System.Reflection.TargetInvocationException
    description: A static initializer is invoked and throws an exception.
- uid: System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)
  id: FindInterfaces(System.Reflection.TypeFilter,System.Object)
  parent: System.Type
  href: System.Type.yml
  name: FindInterfaces(TypeFilter, Object)
  fullName: System.Type.FindInterfaces(System.Reflection.TypeFilter, System.Object)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 589
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns an array of @'System.Type' objects representing a filtered list of interfaces implemented or inherited by the current @'System.Type'.
  syntax:
    content: public virtual Type[] FindInterfaces(TypeFilter filter, object filterCriteria)
    content.vb: Public Overridable Function FindInterfaces(filter As TypeFilter, filterCriteria As Object) As Type()
    parameters:
    - id: filter
      type: System.Reflection.TypeFilter
      description: The delegate that compares the interfaces against *filterCriteria*.
    - id: filterCriteria
      type: System.Object
      description: The search criteria that determines whether an interface should be included in the returned array.
    return:
      type: System.Type[]
      description: An array of @'System.Type' objects representing a filtered list of the interfaces implemented or inherited by the current @'System.Type', or an empty array of type @'System.Type' if no interfaces matching the filter are implemented or inherited by the current @'System.Type'.
  exceptions:
  - type: System.ArgumentNullException
    description: '*filter* is null.'
  - type: System.Reflection.TargetInvocationException
    description: A static initializer is invoked and throws an exception.
- uid: System.Type.GetEvent(System.String)
  id: GetEvent(System.String)
  parent: System.Type
  href: System.Type.yml
  name: GetEvent(String)
  fullName: System.Type.GetEvent(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 619
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the @'System.Reflection.EventInfo' object representing the specified public event.
  syntax:
    content: public EventInfo GetEvent(string name)
    content.vb: Public Function GetEvent(name As String) As EventInfo
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of an event that is declared or inherited by the current @'System.Type'.
    return:
      type: System.Reflection.EventInfo
      description: The object representing the specified public event that is declared or inherited by the current @'System.Type', if found; otherwise, null.
  exceptions:
  - type: System.ArgumentNullException
    description: '*name* is null.'
- uid: System.Type.GetEvent(System.String,System.Reflection.BindingFlags)
  id: GetEvent(System.String,System.Reflection.BindingFlags)
  parent: System.Type
  href: System.Type.yml
  name: GetEvent(String, BindingFlags)
  fullName: System.Type.GetEvent(System.String, System.Reflection.BindingFlags)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 622
  assemblies:
  - mscorlib
  namespace: System
  summary: When overridden in a derived class, returns the @'System.Reflection.EventInfo' object representing the specified event, using the specified binding constraints.
  syntax:
    content: public abstract EventInfo GetEvent(string name, BindingFlags bindingAttr)
    content.vb: Public MustOverride Function GetEvent(name As String, bindingAttr As BindingFlags) As EventInfo
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of an event which is declared or inherited by the current @'System.Type'.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A bitmask comprised of one or more @'System.Reflection.BindingFlags' that specify how the search is conducted.-or- Zero, to return null.
    return:
      type: System.Reflection.EventInfo
      description: The object representing the specified event that is declared or inherited by the current @'System.Type', if found; otherwise, null.
  exceptions:
  - type: System.ArgumentNullException
    description: '*name* is null.'
- uid: System.Type.GetEvents
  id: GetEvents
  parent: System.Type
  href: System.Type.yml
  name: GetEvents()
  fullName: System.Type.GetEvents()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 627
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns all the public events that are declared or inherited by the current @'System.Type'.
  syntax:
    content: public virtual EventInfo[] GetEvents()
    content.vb: Public Overridable Function GetEvents As EventInfo()
    return:
      type: System.Reflection.EventInfo[]
      description: An array of @'System.Reflection.EventInfo' objects representing all the public events which are declared or inherited by the current @'System.Type'.-or- An empty array of type @'System.Reflection.EventInfo', if the current @'System.Type' does not have public events.
- uid: System.Type.GetEvents(System.Reflection.BindingFlags)
  id: GetEvents(System.Reflection.BindingFlags)
  parent: System.Type
  href: System.Type.yml
  name: GetEvents(BindingFlags)
  fullName: System.Type.GetEvents(System.Reflection.BindingFlags)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 630
  assemblies:
  - mscorlib
  namespace: System
  summary: When overridden in a derived class, searches for events that are declared or inherited by the current @'System.Type', using the specified binding constraints.
  syntax:
    content: public abstract EventInfo[] GetEvents(BindingFlags bindingAttr)
    content.vb: Public MustOverride Function GetEvents(bindingAttr As BindingFlags) As EventInfo()
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A bitmask comprised of one or more @'System.Reflection.BindingFlags' that specify how the search is conducted.-or- Zero, to return null.
    return:
      type: System.Reflection.EventInfo[]
      description: An array of @'System.Reflection.EventInfo' objects representing all events that are declared or inherited by the current @'System.Type' that match the specified binding constraints.-or- An empty array of type @'System.Reflection.EventInfo', if the current @'System.Type' does not have events, or if none of the events match the binding constraints.
- uid: System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  id: GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Type
  href: System.Type.yml
  name: GetProperty(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])
  name.vb: GetProperty(String, BindingFlags, Binder, Type, Type(), ParameterModifier())
  fullName: System.Type.GetProperty(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Type, System.Type[], System.Reflection.ParameterModifier[])
  fullName.vb: System.Type.GetProperty(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Type, System.Type(), System.Reflection.ParameterModifier())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 635
  assemblies:
  - mscorlib
  namespace: System
  summary: Searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.
  syntax:
    content: public PropertyInfo GetProperty(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers)
    content.vb: Public Function GetProperty(name As String, bindingAttr As BindingFlags, binder As Binder, returnType As Type, types As Type(), modifiers As ParameterModifier()) As PropertyInfo
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the property to get.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A bitmask comprised of one or more @'System.Reflection.BindingFlags' that specify how the search is conducted.-or- Zero, to return null.
    - id: binder
      type: System.Reflection.Binder
      description: An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- A null reference (Nothing in Visual Basic), to use the @'System.Type.DefaultBinder'.
    - id: returnType
      type: System.Type
      description: The return type of the property.
    - id: types
      type: System.Type[]
      description: An array of @'System.Type' objects representing the number, order, and type of the parameters for the indexed property to get.-or- An empty array of the type @'System.Type' (that is, Type[] types = new Type[0]) to get a property that is not indexed.
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: An array of @'System.Reflection.ParameterModifier' objects representing the attributes associated with the corresponding element in the *types* array. The default binder does not process this parameter.
    return:
      type: System.Reflection.PropertyInfo
      description: An object representing the property that matches the specified requirements, if found; otherwise, null.
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    description: More than one property is found with the specified name and matching the specified binding constraints.
  - type: System.ArgumentNullException
    description: '*name* is null.-or- *types* is null.'
  - type: System.ArgumentException
    description: '*types* is multidimensional.-or- *modifiers* is multidimensional.-or- *types* and *modifiers* do not have the same length.'
  - type: System.NullReferenceException
    description: An element of *types* is null.
- uid: System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  id: GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Type
  href: System.Type.yml
  name: GetProperty(String, Type, Type[], ParameterModifier[])
  name.vb: GetProperty(String, Type, Type(), ParameterModifier())
  fullName: System.Type.GetProperty(System.String, System.Type, System.Type[], System.Reflection.ParameterModifier[])
  fullName.vb: System.Type.GetProperty(System.String, System.Type, System.Type(), System.Reflection.ParameterModifier())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 646
  assemblies:
  - mscorlib
  namespace: System
  summary: Searches for the specified public property whose parameters match the specified argument types and modifiers.
  syntax:
    content: public PropertyInfo GetProperty(string name, Type returnType, Type[] types, ParameterModifier[] modifiers)
    content.vb: Public Function GetProperty(name As String, returnType As Type, types As Type(), modifiers As ParameterModifier()) As PropertyInfo
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the public property to get.
    - id: returnType
      type: System.Type
      description: The return type of the property.
    - id: types
      type: System.Type[]
      description: An array of @'System.Type' objects representing the number, order, and type of the parameters for the indexed property to get.-or- An empty array of the type @'System.Type' (that is, Type[] types = new Type[0]) to get a property that is not indexed.
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: An array of @'System.Reflection.ParameterModifier' objects representing the attributes associated with the corresponding element in the *types* array. The default binder does not process this parameter.
    return:
      type: System.Reflection.PropertyInfo
      description: An object representing the public property that matches the specified requirements, if found; otherwise, null.
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    description: More than one property is found with the specified name and matching the specified argument types and modifiers.
  - type: System.ArgumentNullException
    description: '*name* is null.-or- *types* is null.'
  - type: System.ArgumentException
    description: '*types* is multidimensional.-or- *modifiers* is multidimensional.-or- *types* and *modifiers* do not have the same length.'
  - type: System.NullReferenceException
    description: An element of *types* is null.
- uid: System.Type.GetProperty(System.String,System.Reflection.BindingFlags)
  id: GetProperty(System.String,System.Reflection.BindingFlags)
  parent: System.Type
  href: System.Type.yml
  name: GetProperty(String, BindingFlags)
  fullName: System.Type.GetProperty(System.String, System.Reflection.BindingFlags)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 656
  assemblies:
  - mscorlib
  namespace: System
  summary: Searches for the specified property, using the specified binding constraints.
  syntax:
    content: public PropertyInfo GetProperty(string name, BindingFlags bindingAttr)
    content.vb: Public Function GetProperty(name As String, bindingAttr As BindingFlags) As PropertyInfo
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the property to get.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A bitmask comprised of one or more @'System.Reflection.BindingFlags' that specify how the search is conducted.-or- Zero, to return null.
    return:
      type: System.Reflection.PropertyInfo
      description: An object representing the property that matches the specified requirements, if found; otherwise, null.
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    description: More than one property is found with the specified name and matching the specified binding constraints. See Remarks.
  - type: System.ArgumentNullException
    description: '*name* is null.'
- uid: System.Type.GetProperty(System.String,System.Type,System.Type[])
  id: GetProperty(System.String,System.Type,System.Type[])
  parent: System.Type
  href: System.Type.yml
  name: GetProperty(String, Type, Type[])
  name.vb: GetProperty(String, Type, Type())
  fullName: System.Type.GetProperty(System.String, System.Type, System.Type[])
  fullName.vb: System.Type.GetProperty(System.String, System.Type, System.Type())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 664
  assemblies:
  - mscorlib
  namespace: System
  summary: Searches for the specified public property whose parameters match the specified argument types.
  syntax:
    content: public PropertyInfo GetProperty(string name, Type returnType, Type[] types)
    content.vb: Public Function GetProperty(name As String, returnType As Type, types As Type()) As PropertyInfo
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the public property to get.
    - id: returnType
      type: System.Type
      description: The return type of the property.
    - id: types
      type: System.Type[]
      description: An array of @'System.Type' objects representing the number, order, and type of the parameters for the indexed property to get.-or- An empty array of the type @'System.Type' (that is, Type[] types = new Type[0]) to get a property that is not indexed.
    return:
      type: System.Reflection.PropertyInfo
      description: An object representing the public property whose parameters match the specified argument types, if found; otherwise, null.
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    description: More than one property is found with the specified name and matching the specified argument types.
  - type: System.ArgumentNullException
    description: '*name* is null.-or- *types* is null.'
  - type: System.ArgumentException
    description: '*types* is multidimensional.'
  - type: System.NullReferenceException
    description: An element of *types* is null.
- uid: System.Type.GetProperty(System.String,System.Type[])
  id: GetProperty(System.String,System.Type[])
  parent: System.Type
  href: System.Type.yml
  name: GetProperty(String, Type[])
  name.vb: GetProperty(String, Type())
  fullName: System.Type.GetProperty(System.String, System.Type[])
  fullName.vb: System.Type.GetProperty(System.String, System.Type())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 674
  assemblies:
  - mscorlib
  namespace: System
  summary: Searches for the specified public property whose parameters match the specified argument types.
  syntax:
    content: public PropertyInfo GetProperty(string name, Type[] types)
    content.vb: Public Function GetProperty(name As String, types As Type()) As PropertyInfo
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the public property to get.
    - id: types
      type: System.Type[]
      description: An array of @'System.Type' objects representing the number, order, and type of the parameters for the indexed property to get.-or- An empty array of the type @'System.Type' (that is, Type[] types = new Type[0]) to get a property that is not indexed.
    return:
      type: System.Reflection.PropertyInfo
      description: An object representing the public property whose parameters match the specified argument types, if found; otherwise, null.
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    description: More than one property is found with the specified name and matching the specified argument types.
  - type: System.ArgumentNullException
    description: '*name* is null.-or- *types* is null.'
  - type: System.ArgumentException
    description: '*types* is multidimensional.'
  - type: System.NullReferenceException
    description: An element of *types* is null.
- uid: System.Type.GetProperty(System.String,System.Type)
  id: GetProperty(System.String,System.Type)
  parent: System.Type
  href: System.Type.yml
  name: GetProperty(String, Type)
  fullName: System.Type.GetProperty(System.String, System.Type)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 684
  assemblies:
  - mscorlib
  namespace: System
  summary: Searches for the public property with the specified name and return type.
  syntax:
    content: public PropertyInfo GetProperty(string name, Type returnType)
    content.vb: Public Function GetProperty(name As String, returnType As Type) As PropertyInfo
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the public property to get.
    - id: returnType
      type: System.Type
      description: The return type of the property.
    return:
      type: System.Reflection.PropertyInfo
      description: An object representing the public property with the specified name, if found; otherwise, null.
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    description: More than one property is found with the specified name.
  - type: System.ArgumentNullException
    description: '*name* is null, or *returnType* is null.'
- uid: System.Type.GetProperty(System.String)
  id: GetProperty(System.String)
  parent: System.Type
  href: System.Type.yml
  name: GetProperty(String)
  fullName: System.Type.GetProperty(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 704
  assemblies:
  - mscorlib
  namespace: System
  summary: Searches for the public property with the specified name.
  syntax:
    content: public PropertyInfo GetProperty(string name)
    content.vb: Public Function GetProperty(name As String) As PropertyInfo
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the public property to get.
    return:
      type: System.Reflection.PropertyInfo
      description: An object representing the public property with the specified name, if found; otherwise, null.
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    description: More than one property is found with the specified name. See Remarks.
  - type: System.ArgumentNullException
    description: '*name* is null.'
- uid: System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  id: GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Type
  href: System.Type.yml
  name: GetPropertyImpl(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])
  name.vb: GetPropertyImpl(String, BindingFlags, Binder, Type, Type(), ParameterModifier())
  fullName: System.Type.GetPropertyImpl(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Type, System.Type[], System.Reflection.ParameterModifier[])
  fullName.vb: System.Type.GetPropertyImpl(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Type, System.Type(), System.Reflection.ParameterModifier())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 712
  assemblies:
  - mscorlib
  namespace: System
  summary: When overridden in a derived class, searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.
  syntax:
    content: protected abstract PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers)
    content.vb: Protected MustOverride Function GetPropertyImpl(name As String, bindingAttr As BindingFlags, binder As Binder, returnType As Type, types As Type(), modifiers As ParameterModifier()) As PropertyInfo
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the property to get.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A bitmask comprised of one or more @'System.Reflection.BindingFlags' that specify how the search is conducted.-or- Zero, to return null.
    - id: binder
      type: System.Reflection.Binder
      description: An object that defines a set of properties and enables binding, which can involve selection of an overloaded member, coercion of argument types, and invocation of a member through reflection.-or- A null reference (Nothing in Visual Basic), to use the @'System.Type.DefaultBinder'.
    - id: returnType
      type: System.Type
      description: The return type of the property.
    - id: types
      type: System.Type[]
      description: An array of @'System.Type' objects representing the number, order, and type of the parameters for the indexed property to get.-or- An empty array of the type @'System.Type' (that is, Type[] types = new Type[0]) to get a property that is not indexed.
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: An array of @'System.Reflection.ParameterModifier' objects representing the attributes associated with the corresponding element in the *types* array. The default binder does not process this parameter.
    return:
      type: System.Reflection.PropertyInfo
      description: An object representing the property that matches the specified requirements, if found; otherwise, null.
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    description: More than one property is found with the specified name and matching the specified binding constraints.
  - type: System.ArgumentNullException
    description: '*name* is null.-or- *types* is null.-or- One of the elements in *types* is null.'
  - type: System.ArgumentException
    description: '*types* is multidimensional.-or- *modifiers* is multidimensional.-or- *types* and *modifiers* do not have the same length.'
  - type: System.NotSupportedException
    description: The current type is a @'System.Reflection.Emit.TypeBuilder', @'System.Reflection.Emit.EnumBuilder', or @'System.Reflection.Emit.GenericTypeParameterBuilder'.
- uid: System.Type.GetProperties(System.Reflection.BindingFlags)
  id: GetProperties(System.Reflection.BindingFlags)
  parent: System.Type
  href: System.Type.yml
  name: GetProperties(BindingFlags)
  fullName: System.Type.GetProperties(System.Reflection.BindingFlags)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 719
  assemblies:
  - mscorlib
  namespace: System
  summary: When overridden in a derived class, searches for the properties of the current @'System.Type', using the specified binding constraints.
  syntax:
    content: public abstract PropertyInfo[] GetProperties(BindingFlags bindingAttr)
    content.vb: Public MustOverride Function GetProperties(bindingAttr As BindingFlags) As PropertyInfo()
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A bitmask comprised of one or more @'System.Reflection.BindingFlags' that specify how the search is conducted.-or- Zero, to return null.
    return:
      type: System.Reflection.PropertyInfo[]
      description: An array of @'System.Reflection.PropertyInfo' objects representing all properties of the current @'System.Type' that match the specified binding constraints.-or- An empty array of type @'System.Reflection.PropertyInfo', if the current @'System.Type' does not have properties, or if none of the properties match the binding constraints.
- uid: System.Type.GetProperties
  id: GetProperties
  parent: System.Type
  href: System.Type.yml
  name: GetProperties()
  fullName: System.Type.GetProperties()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 720
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns all the public properties of the current @'System.Type'.
  syntax:
    content: public PropertyInfo[] GetProperties()
    content.vb: Public Function GetProperties As PropertyInfo()
    return:
      type: System.Reflection.PropertyInfo[]
      description: An array of @'System.Reflection.PropertyInfo' objects representing all public properties of the current @'System.Type'.-or- An empty array of type @'System.Reflection.PropertyInfo', if the current @'System.Type' does not have public properties.
- uid: System.Type.GetNestedTypes
  id: GetNestedTypes
  parent: System.Type
  href: System.Type.yml
  name: GetNestedTypes()
  fullName: System.Type.GetNestedTypes()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 729
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the public types nested in the current @'System.Type'.
  syntax:
    content: public Type[] GetNestedTypes()
    content.vb: Public Function GetNestedTypes As Type()
    return:
      type: System.Type[]
      description: An array of @'System.Type' objects representing the public types nested in the current @'System.Type' (the search is not recursive), or an empty array of type @'System.Type' if no public types are nested in the current @'System.Type'.
- uid: System.Type.GetNestedTypes(System.Reflection.BindingFlags)
  id: GetNestedTypes(System.Reflection.BindingFlags)
  parent: System.Type
  href: System.Type.yml
  name: GetNestedTypes(BindingFlags)
  fullName: System.Type.GetNestedTypes(System.Reflection.BindingFlags)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 734
  assemblies:
  - mscorlib
  namespace: System
  summary: When overridden in a derived class, searches for the types nested in the current @'System.Type', using the specified binding constraints.
  syntax:
    content: public abstract Type[] GetNestedTypes(BindingFlags bindingAttr)
    content.vb: Public MustOverride Function GetNestedTypes(bindingAttr As BindingFlags) As Type()
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A bitmask comprised of one or more @'System.Reflection.BindingFlags' that specify how the search is conducted.-or- Zero, to return null.
    return:
      type: System.Type[]
      description: An array of @'System.Type' objects representing all the types nested in the current @'System.Type' that match the specified binding constraints (the search is not recursive), or an empty array of type @'System.Type', if no nested types are found that match the binding constraints.
- uid: System.Type.GetNestedType(System.String)
  id: GetNestedType(System.String)
  parent: System.Type
  href: System.Type.yml
  name: GetNestedType(String)
  fullName: System.Type.GetNestedType(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 739
  assemblies:
  - mscorlib
  namespace: System
  summary: Searches for the public nested type with the specified name.
  syntax:
    content: public Type GetNestedType(string name)
    content.vb: Public Function GetNestedType(name As String) As Type
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the nested type to get.
    return:
      type: System.Type
      description: An object representing the public nested type with the specified name, if found; otherwise, null.
  exceptions:
  - type: System.ArgumentNullException
    description: '*name* is null.'
- uid: System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)
  id: GetNestedType(System.String,System.Reflection.BindingFlags)
  parent: System.Type
  href: System.Type.yml
  name: GetNestedType(String, BindingFlags)
  fullName: System.Type.GetNestedType(System.String, System.Reflection.BindingFlags)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 744
  assemblies:
  - mscorlib
  namespace: System
  summary: When overridden in a derived class, searches for the specified nested type, using the specified binding constraints.
  syntax:
    content: public abstract Type GetNestedType(string name, BindingFlags bindingAttr)
    content.vb: Public MustOverride Function GetNestedType(name As String, bindingAttr As BindingFlags) As Type
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the nested type to get.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A bitmask comprised of one or more @'System.Reflection.BindingFlags' that specify how the search is conducted.-or- Zero, to return null.
    return:
      type: System.Type
      description: An object representing the nested type that matches the specified requirements, if found; otherwise, null.
  exceptions:
  - type: System.ArgumentNullException
    description: '*name* is null.'
- uid: System.Type.GetMember(System.String)
  id: GetMember(System.String)
  parent: System.Type
  href: System.Type.yml
  name: GetMember(String)
  fullName: System.Type.GetMember(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 749
  assemblies:
  - mscorlib
  namespace: System
  summary: Searches for the public members with the specified name.
  syntax:
    content: public MemberInfo[] GetMember(string name)
    content.vb: Public Function GetMember(name As String) As MemberInfo()
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the public members to get.
    return:
      type: System.Reflection.MemberInfo[]
      description: An array of @'System.Reflection.MemberInfo' objects representing the public members with the specified name, if found; otherwise, an empty array.
  exceptions:
  - type: System.ArgumentNullException
    description: '*name* is null.'
- uid: System.Type.GetMember(System.String,System.Reflection.BindingFlags)
  id: GetMember(System.String,System.Reflection.BindingFlags)
  parent: System.Type
  href: System.Type.yml
  name: GetMember(String, BindingFlags)
  fullName: System.Type.GetMember(System.String, System.Reflection.BindingFlags)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 753
  assemblies:
  - mscorlib
  namespace: System
  summary: Searches for the specified members, using the specified binding constraints.
  syntax:
    content: public virtual MemberInfo[] GetMember(string name, BindingFlags bindingAttr)
    content.vb: Public Overridable Function GetMember(name As String, bindingAttr As BindingFlags) As MemberInfo()
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the members to get.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A bitmask comprised of one or more @'System.Reflection.BindingFlags' that specify how the search is conducted.-or- Zero, to return an empty array.
    return:
      type: System.Reflection.MemberInfo[]
      description: An array of @'System.Reflection.MemberInfo' objects representing the public members with the specified name, if found; otherwise, an empty array.
  exceptions:
  - type: System.ArgumentNullException
    description: '*name* is null.'
- uid: System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)
  id: GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)
  parent: System.Type
  href: System.Type.yml
  name: GetMember(String, MemberTypes, BindingFlags)
  fullName: System.Type.GetMember(System.String, System.Reflection.MemberTypes, System.Reflection.BindingFlags)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 758
  assemblies:
  - mscorlib
  namespace: System
  summary: Searches for the specified members of the specified member type, using the specified binding constraints.
  syntax:
    content: public virtual MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr)
    content.vb: Public Overridable Function GetMember(name As String, type As MemberTypes, bindingAttr As BindingFlags) As MemberInfo()
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the members to get.
    - id: type
      type: System.Reflection.MemberTypes
      description: The value to search for.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A bitmask comprised of one or more @'System.Reflection.BindingFlags' that specify how the search is conducted.-or- Zero, to return an empty array.
    return:
      type: System.Reflection.MemberInfo[]
      description: An array of @'System.Reflection.MemberInfo' objects representing the public members with the specified name, if found; otherwise, an empty array.
  exceptions:
  - type: System.ArgumentNullException
    description: '*name* is null.'
  - type: System.NotSupportedException
    description: A derived class must provide an implementation.
- uid: System.Type.GetMembers
  id: GetMembers
  parent: System.Type
  href: System.Type.yml
  name: GetMembers()
  fullName: System.Type.GetMembers()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 766
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns all the public members of the current @'System.Type'.
  syntax:
    content: public MemberInfo[] GetMembers()
    content.vb: Public Function GetMembers As MemberInfo()
    return:
      type: System.Reflection.MemberInfo[]
      description: An array of @'System.Reflection.MemberInfo' objects representing all the public members of the current @'System.Type'.-or- An empty array of type @'System.Reflection.MemberInfo', if the current @'System.Type' does not have public members.
- uid: System.Type.GetMembers(System.Reflection.BindingFlags)
  id: GetMembers(System.Reflection.BindingFlags)
  parent: System.Type
  href: System.Type.yml
  name: GetMembers(BindingFlags)
  fullName: System.Type.GetMembers(System.Reflection.BindingFlags)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 769
  assemblies:
  - mscorlib
  namespace: System
  summary: When overridden in a derived class, searches for the members defined for the current @'System.Type', using the specified binding constraints.
  syntax:
    content: public abstract MemberInfo[] GetMembers(BindingFlags bindingAttr)
    content.vb: Public MustOverride Function GetMembers(bindingAttr As BindingFlags) As MemberInfo()
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A bitmask comprised of one or more @'System.Reflection.BindingFlags' that specify how the search is conducted.-or- Zero (@'System.Reflection.BindingFlags.Default'), to return an empty array.
    return:
      type: System.Reflection.MemberInfo[]
      description: An array of @'System.Reflection.MemberInfo' objects representing all members defined for the current @'System.Type' that match the specified binding constraints.-or- An empty array of type @'System.Reflection.MemberInfo', if no members are defined for the current @'System.Type', or if none of the defined members match the binding constraints.
- uid: System.Type.GetDefaultMembers
  id: GetDefaultMembers
  parent: System.Type
  href: System.Type.yml
  name: GetDefaultMembers()
  fullName: System.Type.GetDefaultMembers()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 774
  assemblies:
  - mscorlib
  namespace: System
  summary: Searches for the members defined for the current @'System.Type' whose @'System.Reflection.DefaultMemberAttribute' is set.
  syntax:
    content: public virtual MemberInfo[] GetDefaultMembers()
    content.vb: Public Overridable Function GetDefaultMembers As MemberInfo()
    return:
      type: System.Reflection.MemberInfo[]
      description: An array of @'System.Reflection.MemberInfo' objects representing all default members of the current @'System.Type'.-or- An empty array of type @'System.Reflection.MemberInfo', if the current @'System.Type' does not have default members.
- uid: System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)
  id: FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)
  parent: System.Type
  href: System.Type.yml
  name: FindMembers(MemberTypes, BindingFlags, MemberFilter, Object)
  fullName: System.Type.FindMembers(System.Reflection.MemberTypes, System.Reflection.BindingFlags, System.Reflection.MemberFilter, System.Object)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 781
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a filtered array of @'System.Reflection.MemberInfo' objects of the specified member type.
  syntax:
    content: public virtual MemberInfo[] FindMembers(MemberTypes memberType, BindingFlags bindingAttr, MemberFilter filter, object filterCriteria)
    content.vb: Public Overridable Function FindMembers(memberType As MemberTypes, bindingAttr As BindingFlags, filter As MemberFilter, filterCriteria As Object) As MemberInfo()
    parameters:
    - id: memberType
      type: System.Reflection.MemberTypes
      description: An object that indicates the type of member to search for.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A bitmask comprised of one or more @'System.Reflection.BindingFlags' that specify how the search is conducted.-or- Zero, to return null.
    - id: filter
      type: System.Reflection.MemberFilter
      description: The delegate that does the comparisons, returning true if the member currently being inspected matches the *filterCriteria* and false otherwise. You can use the FilterAttribute, FilterName, and FilterNameIgnoreCase delegates supplied by this class. The first uses the fields of FieldAttributes, MethodAttributes, and MethodImplAttributes as search criteria, and the other two delegates use String objects as the search criteria.
    - id: filterCriteria
      type: System.Object
      description: The search criteria that determines whether a member is returned in the array of MemberInfo objects.The fields of FieldAttributes, MethodAttributes, and MethodImplAttributes can be used in conjunction with the FilterAttribute delegate supplied by this class.
    return:
      type: System.Reflection.MemberInfo[]
      description: A filtered array of @'System.Reflection.MemberInfo' objects of the specified member type.-or- An empty array of type @'System.Reflection.MemberInfo', if the current @'System.Type' does not have members of type *memberType* that match the filter criteria.
  exceptions:
  - type: System.ArgumentNullException
    description: '*filter* is null.'
- uid: System.Type.IsNested
  id: IsNested
  parent: System.Type
  href: System.Type.yml
  name: IsNested
  fullName: System.Type.IsNested
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 939
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether the current @'System.Type' object represents a type whose definition is nested inside the definition of another type.
  syntax:
    content: public bool IsNested { get; }
    content.vb: Public ReadOnly Property IsNested As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the @'System.Type' is nested inside another type; otherwise, false.
- uid: System.Type.Attributes
  id: Attributes
  parent: System.Type
  href: System.Type.yml
  name: Attributes
  fullName: System.Type.Attributes
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 949
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the attributes associated with the @'System.Type'.
  syntax:
    content: public TypeAttributes Attributes { get; }
    content.vb: Public ReadOnly Property Attributes As TypeAttributes
    parameters: []
    return:
      type: System.Reflection.TypeAttributes
      description: A @'System.Reflection.TypeAttributes' object representing the attribute set of the @'System.Type', unless the @'System.Type' represents a generic type parameter, in which case the value is unspecified.
- uid: System.Type.GenericParameterAttributes
  id: GenericParameterAttributes
  parent: System.Type
  href: System.Type.yml
  name: GenericParameterAttributes
  fullName: System.Type.GenericParameterAttributes
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 954
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a combination of @'System.Reflection.GenericParameterAttributes' flags that describe the covariance and special constraints of the current generic type parameter.
  syntax:
    content: public virtual GenericParameterAttributes GenericParameterAttributes { get; }
    content.vb: Public Overridable ReadOnly Property GenericParameterAttributes As GenericParameterAttributes
    parameters: []
    return:
      type: System.Reflection.GenericParameterAttributes
      description: A bitwise combination of @'System.Reflection.GenericParameterAttributes' values that describes the covariance and special constraints of the current generic type parameter.
  exceptions:
  - type: System.InvalidOperationException
    description: The current @'System.Type' object is not a generic type parameter. That is, the @'System.Type.IsGenericParameter' property returns false.
  - type: System.NotSupportedException
    description: The invoked method is not supported in the base class.
- uid: System.Type.IsVisible
  id: IsVisible
  parent: System.Type
  href: System.Type.yml
  name: IsVisible
  fullName: System.Type.IsVisible
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 959
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether the @'System.Type' can be accessed by code outside the assembly.
  syntax:
    content: public bool IsVisible { get; }
    content.vb: Public ReadOnly Property IsVisible As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the current @'System.Type' is a public type or a public nested type such that all the enclosing types are public; otherwise, false.
- uid: System.Type.IsNotPublic
  id: IsNotPublic
  parent: System.Type
  href: System.Type.yml
  name: IsNotPublic
  fullName: System.Type.IsNotPublic
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1001
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether the @'System.Type' is not declared public.
  syntax:
    content: public bool IsNotPublic { get; }
    content.vb: Public ReadOnly Property IsNotPublic As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the @'System.Type' is not declared public and is not a nested type; otherwise, false.
- uid: System.Type.IsPublic
  id: IsPublic
  parent: System.Type
  href: System.Type.yml
  name: IsPublic
  fullName: System.Type.IsPublic
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1007
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether the @'System.Type' is declared public.
  syntax:
    content: public bool IsPublic { get; }
    content.vb: Public ReadOnly Property IsPublic As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the @'System.Type' is declared public and is not a nested type; otherwise, false.
- uid: System.Type.IsNestedPublic
  id: IsNestedPublic
  parent: System.Type
  href: System.Type.yml
  name: IsNestedPublic
  fullName: System.Type.IsNestedPublic
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1012
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether a class is nested and declared public.
  syntax:
    content: public bool IsNestedPublic { get; }
    content.vb: Public ReadOnly Property IsNestedPublic As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the class is nested and declared public; otherwise, false.
- uid: System.Type.IsNestedPrivate
  id: IsNestedPrivate
  parent: System.Type
  href: System.Type.yml
  name: IsNestedPrivate
  fullName: System.Type.IsNestedPrivate
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1017
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether the @'System.Type' is nested and declared private.
  syntax:
    content: public bool IsNestedPrivate { get; }
    content.vb: Public ReadOnly Property IsNestedPrivate As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the @'System.Type' is nested and declared private; otherwise, false.
- uid: System.Type.IsNestedFamily
  id: IsNestedFamily
  parent: System.Type
  href: System.Type.yml
  name: IsNestedFamily
  fullName: System.Type.IsNestedFamily
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1021
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether the @'System.Type' is nested and visible only within its own family.
  syntax:
    content: public bool IsNestedFamily { get; }
    content.vb: Public ReadOnly Property IsNestedFamily As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the @'System.Type' is nested and visible only within its own family; otherwise, false.
- uid: System.Type.IsNestedAssembly
  id: IsNestedAssembly
  parent: System.Type
  href: System.Type.yml
  name: IsNestedAssembly
  fullName: System.Type.IsNestedAssembly
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1025
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether the @'System.Type' is nested and visible only within its own assembly.
  syntax:
    content: public bool IsNestedAssembly { get; }
    content.vb: Public ReadOnly Property IsNestedAssembly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the @'System.Type' is nested and visible only within its own assembly; otherwise, false.
- uid: System.Type.IsNestedFamANDAssem
  id: IsNestedFamANDAssem
  parent: System.Type
  href: System.Type.yml
  name: IsNestedFamANDAssem
  fullName: System.Type.IsNestedFamANDAssem
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1029
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether the @'System.Type' is nested and visible only to classes that belong to both its own family and its own assembly.
  syntax:
    content: public bool IsNestedFamANDAssem { get; }
    content.vb: Public ReadOnly Property IsNestedFamANDAssem As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the @'System.Type' is nested and visible only to classes that belong to both its own family and its own assembly; otherwise, false.
- uid: System.Type.IsNestedFamORAssem
  id: IsNestedFamORAssem
  parent: System.Type
  href: System.Type.yml
  name: IsNestedFamORAssem
  fullName: System.Type.IsNestedFamORAssem
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1033
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether the @'System.Type' is nested and visible only to classes that belong to either its own family or to its own assembly.
  syntax:
    content: public bool IsNestedFamORAssem { get; }
    content.vb: Public ReadOnly Property IsNestedFamORAssem As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the @'System.Type' is nested and visible only to classes that belong to its own family or to its own assembly; otherwise, false.
- uid: System.Type.IsAutoLayout
  id: IsAutoLayout
  parent: System.Type
  href: System.Type.yml
  name: IsAutoLayout
  fullName: System.Type.IsAutoLayout
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1038
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether the fields of the current type are laid out automatically by the common language runtime.
  syntax:
    content: public bool IsAutoLayout { get; }
    content.vb: Public ReadOnly Property IsAutoLayout As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the @'System.Type.Attributes' property of the current type includes @'System.Reflection.TypeAttributes.AutoLayout'; otherwise, false.
- uid: System.Type.IsLayoutSequential
  id: IsLayoutSequential
  parent: System.Type
  href: System.Type.yml
  name: IsLayoutSequential
  fullName: System.Type.IsLayoutSequential
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1042
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether the fields of the current type are laid out sequentially, in the order that they were defined or emitted to the metadata.
  syntax:
    content: public bool IsLayoutSequential { get; }
    content.vb: Public ReadOnly Property IsLayoutSequential As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the @'System.Type.Attributes' property of the current type includes @'System.Reflection.TypeAttributes.SequentialLayout'; otherwise, false.
- uid: System.Type.IsExplicitLayout
  id: IsExplicitLayout
  parent: System.Type
  href: System.Type.yml
  name: IsExplicitLayout
  fullName: System.Type.IsExplicitLayout
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1046
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether the fields of the current type are laid out at explicitly specified offsets.
  syntax:
    content: public bool IsExplicitLayout { get; }
    content.vb: Public ReadOnly Property IsExplicitLayout As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the @'System.Type.Attributes' property of the current type includes @'System.Reflection.TypeAttributes.ExplicitLayout'; otherwise, false.
- uid: System.Type.IsClass
  id: IsClass
  parent: System.Type
  href: System.Type.yml
  name: IsClass
  fullName: System.Type.IsClass
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1051
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether the @'System.Type' is a class or a delegate; that is, not a value type or interface.
  syntax:
    content: public bool IsClass { get; }
    content.vb: Public ReadOnly Property IsClass As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the @'System.Type' is a class; otherwise, false.
- uid: System.Type.IsInterface
  id: IsInterface
  parent: System.Type
  href: System.Type.yml
  name: IsInterface
  fullName: System.Type.IsInterface
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1056
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether the @'System.Type' is an interface; that is, not a class or a value type.
  syntax:
    content: public bool IsInterface { get; }
    content.vb: Public ReadOnly Property IsInterface As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the @'System.Type' is an interface; otherwise, false.
- uid: System.Type.IsValueType
  id: IsValueType
  parent: System.Type
  href: System.Type.yml
  name: IsValueType
  fullName: System.Type.IsValueType
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1069
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether the @'System.Type' is a value type.
  syntax:
    content: public bool IsValueType { get; }
    content.vb: Public ReadOnly Property IsValueType As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the @'System.Type' is a value type; otherwise, false.
- uid: System.Type.IsAbstract
  id: IsAbstract
  parent: System.Type
  href: System.Type.yml
  name: IsAbstract
  fullName: System.Type.IsAbstract
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1074
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether the @'System.Type' is abstract and must be overridden.
  syntax:
    content: public bool IsAbstract { get; }
    content.vb: Public ReadOnly Property IsAbstract As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the @'System.Type' is abstract; otherwise, false.
- uid: System.Type.IsSealed
  id: IsSealed
  parent: System.Type
  href: System.Type.yml
  name: IsSealed
  fullName: System.Type.IsSealed
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1079
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether the @'System.Type' is declared sealed.
  syntax:
    content: public bool IsSealed { get; }
    content.vb: Public ReadOnly Property IsSealed As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the @'System.Type' is declared sealed; otherwise, false.
- uid: System.Type.IsEnum
  id: IsEnum
  parent: System.Type
  href: System.Type.yml
  name: IsEnum
  fullName: System.Type.IsEnum
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1085
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether the current @'System.Type' represents an enumeration.
  syntax:
    content: public bool IsEnum { get; }
    content.vb: Public ReadOnly Property IsEnum As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the current @'System.Type' represents an enumeration; otherwise, false.
- uid: System.Type.IsSpecialName
  id: IsSpecialName
  parent: System.Type
  href: System.Type.yml
  name: IsSpecialName
  fullName: System.Type.IsSpecialName
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1097
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether the type has a name that requires special handling.
  syntax:
    content: public bool IsSpecialName { get; }
    content.vb: Public ReadOnly Property IsSpecialName As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the type has a name that requires special handling; otherwise, false.
- uid: System.Type.IsImport
  id: IsImport
  parent: System.Type
  href: System.Type.yml
  name: IsImport
  fullName: System.Type.IsImport
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1102
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether the @'System.Type' has a @'System.Runtime.InteropServices.ComImportAttribute' attribute applied, indicating that it was imported from a COM type library.
  syntax:
    content: public bool IsImport { get; }
    content.vb: Public ReadOnly Property IsImport As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the @'System.Type' has a @'System.Runtime.InteropServices.ComImportAttribute'; otherwise, false.
- uid: System.Type.IsSerializable
  id: IsSerializable
  parent: System.Type
  href: System.Type.yml
  name: IsSerializable
  fullName: System.Type.IsSerializable
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1107
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether the @'System.Type' is serializable.
  syntax:
    content: public virtual bool IsSerializable { get; }
    content.vb: Public Overridable ReadOnly Property IsSerializable As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the @'System.Type' is serializable; otherwise, false.
- uid: System.Type.IsAnsiClass
  id: IsAnsiClass
  parent: System.Type
  href: System.Type.yml
  name: IsAnsiClass
  fullName: System.Type.IsAnsiClass
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1124
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether the string format attribute AnsiClass is selected for the @'System.Type'.
  syntax:
    content: public bool IsAnsiClass { get; }
    content.vb: Public ReadOnly Property IsAnsiClass As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the string format attribute AnsiClass is selected for the @'System.Type'; otherwise, false.
- uid: System.Type.IsUnicodeClass
  id: IsUnicodeClass
  parent: System.Type
  href: System.Type.yml
  name: IsUnicodeClass
  fullName: System.Type.IsUnicodeClass
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1129
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether the string format attribute UnicodeClass is selected for the @'System.Type'.
  syntax:
    content: public bool IsUnicodeClass { get; }
    content.vb: Public ReadOnly Property IsUnicodeClass As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the string format attribute UnicodeClass is selected for the @'System.Type'; otherwise, false.
- uid: System.Type.IsAutoClass
  id: IsAutoClass
  parent: System.Type
  href: System.Type.yml
  name: IsAutoClass
  fullName: System.Type.IsAutoClass
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1134
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether the string format attribute AutoClass is selected for the @'System.Type'.
  syntax:
    content: public bool IsAutoClass { get; }
    content.vb: Public ReadOnly Property IsAutoClass As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the string format attribute AutoClass is selected for the @'System.Type'; otherwise, false.
- uid: System.Type.IsArray
  id: IsArray
  parent: System.Type
  href: System.Type.yml
  name: IsArray
  fullName: System.Type.IsArray
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1141
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value that indicates whether the type is an array.
  syntax:
    content: public bool IsArray { get; }
    content.vb: Public ReadOnly Property IsArray As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the current type is an array; otherwise, false.
- uid: System.Type.IsGenericType
  id: IsGenericType
  parent: System.Type
  href: System.Type.yml
  name: IsGenericType
  fullName: System.Type.IsGenericType
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1151
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether the current type is a generic type.
  syntax:
    content: public virtual bool IsGenericType { get; }
    content.vb: Public Overridable ReadOnly Property IsGenericType As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the current type is a generic type; otherwise, false.
- uid: System.Type.IsGenericTypeDefinition
  id: IsGenericTypeDefinition
  parent: System.Type
  href: System.Type.yml
  name: IsGenericTypeDefinition
  fullName: System.Type.IsGenericTypeDefinition
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1156
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether the current @'System.Type' represents a generic type definition, from which other generic types can be constructed.
  syntax:
    content: public virtual bool IsGenericTypeDefinition { get; }
    content.vb: Public Overridable ReadOnly Property IsGenericTypeDefinition As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the @'System.Type' object represents a generic type definition; otherwise, false.
- uid: System.Type.IsConstructedGenericType
  id: IsConstructedGenericType
  parent: System.Type
  href: System.Type.yml
  name: IsConstructedGenericType
  fullName: System.Type.IsConstructedGenericType
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1161
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value that indicates whether this object represents a constructed generic type. You can create instances of a constructed generic type.
  syntax:
    content: public virtual bool IsConstructedGenericType { get; }
    content.vb: Public Overridable ReadOnly Property IsConstructedGenericType As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if this object represents a constructed generic type; otherwise, false.
- uid: System.Type.IsGenericParameter
  id: IsGenericParameter
  parent: System.Type
  href: System.Type.yml
  name: IsGenericParameter
  fullName: System.Type.IsGenericParameter
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1167
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether the current @'System.Type' represents a type parameter in the definition of a generic type or method.
  syntax:
    content: public virtual bool IsGenericParameter { get; }
    content.vb: Public Overridable ReadOnly Property IsGenericParameter As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the @'System.Type' object represents a type parameter of a generic type definition or generic method definition; otherwise, false.
- uid: System.Type.GenericParameterPosition
  id: GenericParameterPosition
  parent: System.Type
  href: System.Type.yml
  name: GenericParameterPosition
  fullName: System.Type.GenericParameterPosition
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1173
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter, when the @'System.Type' object represents a type parameter of a generic type or a generic method.
  syntax:
    content: public virtual int GenericParameterPosition { get; }
    content.vb: Public Overridable ReadOnly Property GenericParameterPosition As Integer
    parameters: []
    return:
      type: System.Int32
      description: The position of a type parameter in the type parameter list of the generic type or method that defines the parameter. Position numbers begin at 0.
  exceptions:
  - type: System.InvalidOperationException
    description: The current type does not represent a type parameter. That is, @'System.Type.IsGenericParameter' returns false.
- uid: System.Type.ContainsGenericParameters
  id: ContainsGenericParameters
  parent: System.Type
  href: System.Type.yml
  name: ContainsGenericParameters
  fullName: System.Type.ContainsGenericParameters
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1178
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether the current @'System.Type' object has type parameters that have not been replaced by specific types.
  syntax:
    content: public virtual bool ContainsGenericParameters { get; }
    content.vb: Public Overridable ReadOnly Property ContainsGenericParameters As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the @'System.Type' object is itself a generic type parameter or has type parameters for which specific types have not been supplied; otherwise, false.
- uid: System.Type.GetGenericParameterConstraints
  id: GetGenericParameterConstraints
  parent: System.Type
  href: System.Type.yml
  name: GetGenericParameterConstraints()
  fullName: System.Type.GetGenericParameterConstraints()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1203
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns an array of @'System.Type' objects that represent the constraints on the current generic type parameter.
  syntax:
    content: public virtual Type[] GetGenericParameterConstraints()
    content.vb: Public Overridable Function GetGenericParameterConstraints As Type()
    return:
      type: System.Type[]
      description: An array of @'System.Type' objects that represent the constraints on the current generic type parameter.
  exceptions:
  - type: System.InvalidOperationException
    description: The current @'System.Type' object is not a generic type parameter. That is, the @'System.Type.IsGenericParameter' property returns false.
- uid: System.Type.IsByRef
  id: IsByRef
  parent: System.Type
  href: System.Type.yml
  name: IsByRef
  fullName: System.Type.IsByRef
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1213
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether the @'System.Type' is passed by reference.
  syntax:
    content: public bool IsByRef { get; }
    content.vb: Public ReadOnly Property IsByRef As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the @'System.Type' is passed by reference; otherwise, false.
- uid: System.Type.IsPointer
  id: IsPointer
  parent: System.Type
  href: System.Type.yml
  name: IsPointer
  fullName: System.Type.IsPointer
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1217
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether the @'System.Type' is a pointer.
  syntax:
    content: public bool IsPointer { get; }
    content.vb: Public ReadOnly Property IsPointer As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the @'System.Type' is a pointer; otherwise, false.
- uid: System.Type.IsPrimitive
  id: IsPrimitive
  parent: System.Type
  href: System.Type.yml
  name: IsPrimitive
  fullName: System.Type.IsPrimitive
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1221
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether the @'System.Type' is one of the primitive types.
  syntax:
    content: public bool IsPrimitive { get; }
    content.vb: Public ReadOnly Property IsPrimitive As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the @'System.Type' is one of the primitive types; otherwise, false.
- uid: System.Type.IsCOMObject
  id: IsCOMObject
  parent: System.Type
  href: System.Type.yml
  name: IsCOMObject
  fullName: System.Type.IsCOMObject
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1225
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether the @'System.Type' is a COM object.
  syntax:
    content: public bool IsCOMObject { get; }
    content.vb: Public ReadOnly Property IsCOMObject As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the @'System.Type' is a COM object; otherwise, false.
- uid: System.Type.HasElementType
  id: HasElementType
  parent: System.Type
  href: System.Type.yml
  name: HasElementType
  fullName: System.Type.HasElementType
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1242
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether the current @'System.Type' encompasses or refers to another type; that is, whether the current @'System.Type' is an array, a pointer, or is passed by reference.
  syntax:
    content: public bool HasElementType { get; }
    content.vb: Public ReadOnly Property HasElementType As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the @'System.Type' is an array, a pointer, or is passed by reference; otherwise, false.
- uid: System.Type.IsContextful
  id: IsContextful
  parent: System.Type
  href: System.Type.yml
  name: IsContextful
  fullName: System.Type.IsContextful
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1247
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether the @'System.Type' can be hosted in a context.
  syntax:
    content: public bool IsContextful { get; }
    content.vb: Public ReadOnly Property IsContextful As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the @'System.Type' can be hosted in a context; otherwise, false.
- uid: System.Type.IsMarshalByRef
  id: IsMarshalByRef
  parent: System.Type
  href: System.Type.yml
  name: IsMarshalByRef
  fullName: System.Type.IsMarshalByRef
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1252
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether the @'System.Type' is marshaled by reference.
  syntax:
    content: public bool IsMarshalByRef { get; }
    content.vb: Public ReadOnly Property IsMarshalByRef As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the @'System.Type' is marshaled by reference; otherwise, false.
- uid: System.Type.IsValueTypeImpl
  id: IsValueTypeImpl
  parent: System.Type
  href: System.Type.yml
  name: IsValueTypeImpl()
  fullName: System.Type.IsValueTypeImpl()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1264
  assemblies:
  - mscorlib
  namespace: System
  summary: Implements the @'System.Type.IsValueType' property and determines whether the @'System.Type' is a value type; that is, not a class or an interface.
  syntax:
    content: protected virtual bool IsValueTypeImpl()
    content.vb: Protected Overridable Function IsValueTypeImpl As Boolean
    return:
      type: System.Boolean
      description: true if the @'System.Type' is a value type; otherwise, false.
- uid: System.Type.GetAttributeFlagsImpl
  id: GetAttributeFlagsImpl
  parent: System.Type
  href: System.Type.yml
  name: GetAttributeFlagsImpl()
  fullName: System.Type.GetAttributeFlagsImpl()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1277
  assemblies:
  - mscorlib
  namespace: System
  summary: When overridden in a derived class, implements the @'System.Type.Attributes' property and gets a bitmask indicating the attributes associated with the @'System.Type'.
  syntax:
    content: protected abstract TypeAttributes GetAttributeFlagsImpl()
    content.vb: Protected MustOverride Function GetAttributeFlagsImpl As TypeAttributes
    return:
      type: System.Reflection.TypeAttributes
      description: A @'System.Reflection.TypeAttributes' object representing the attribute set of the @'System.Type'.
- uid: System.Type.IsArrayImpl
  id: IsArrayImpl
  parent: System.Type
  href: System.Type.yml
  name: IsArrayImpl()
  fullName: System.Type.IsArrayImpl()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1280
  assemblies:
  - mscorlib
  namespace: System
  summary: When overridden in a derived class, implements the @'System.Type.IsArray' property and determines whether the @'System.Type' is an array.
  syntax:
    content: protected abstract bool IsArrayImpl()
    content.vb: Protected MustOverride Function IsArrayImpl As Boolean
    return:
      type: System.Boolean
      description: true if the @'System.Type' is an array; otherwise, false.
- uid: System.Type.IsByRefImpl
  id: IsByRefImpl
  parent: System.Type
  href: System.Type.yml
  name: IsByRefImpl()
  fullName: System.Type.IsByRefImpl()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1283
  assemblies:
  - mscorlib
  namespace: System
  summary: When overridden in a derived class, implements the @'System.Type.IsByRef' property and determines whether the @'System.Type' is passed by reference.
  syntax:
    content: protected abstract bool IsByRefImpl()
    content.vb: Protected MustOverride Function IsByRefImpl As Boolean
    return:
      type: System.Boolean
      description: true if the @'System.Type' is passed by reference; otherwise, false.
- uid: System.Type.IsPointerImpl
  id: IsPointerImpl
  parent: System.Type
  href: System.Type.yml
  name: IsPointerImpl()
  fullName: System.Type.IsPointerImpl()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1286
  assemblies:
  - mscorlib
  namespace: System
  summary: When overridden in a derived class, implements the @'System.Type.IsPointer' property and determines whether the @'System.Type' is a pointer.
  syntax:
    content: protected abstract bool IsPointerImpl()
    content.vb: Protected MustOverride Function IsPointerImpl As Boolean
    return:
      type: System.Boolean
      description: true if the @'System.Type' is a pointer; otherwise, false.
- uid: System.Type.IsPrimitiveImpl
  id: IsPrimitiveImpl
  parent: System.Type
  href: System.Type.yml
  name: IsPrimitiveImpl()
  fullName: System.Type.IsPrimitiveImpl()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1289
  assemblies:
  - mscorlib
  namespace: System
  summary: When overridden in a derived class, implements the @'System.Type.IsPrimitive' property and determines whether the @'System.Type' is one of the primitive types.
  syntax:
    content: protected abstract bool IsPrimitiveImpl()
    content.vb: Protected MustOverride Function IsPrimitiveImpl As Boolean
    return:
      type: System.Boolean
      description: true if the @'System.Type' is one of the primitive types; otherwise, false.
- uid: System.Type.IsCOMObjectImpl
  id: IsCOMObjectImpl
  parent: System.Type
  href: System.Type.yml
  name: IsCOMObjectImpl()
  fullName: System.Type.IsCOMObjectImpl()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1292
  assemblies:
  - mscorlib
  namespace: System
  summary: When overridden in a derived class, implements the @'System.Type.IsCOMObject' property and determines whether the @'System.Type' is a COM object.
  syntax:
    content: protected abstract bool IsCOMObjectImpl()
    content.vb: Protected MustOverride Function IsCOMObjectImpl As Boolean
    return:
      type: System.Boolean
      description: true if the @'System.Type' is a COM object; otherwise, false.
- uid: System.Type.MakeGenericType(System.Type[])
  id: MakeGenericType(System.Type[])
  parent: System.Type
  href: System.Type.yml
  name: MakeGenericType(Type[])
  name.vb: MakeGenericType(Type())
  fullName: System.Type.MakeGenericType(System.Type[])
  fullName.vb: System.Type.MakeGenericType(System.Type())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1306
  assemblies:
  - mscorlib
  namespace: System
  summary: Substitutes the elements of an array of types for the type parameters of the current generic type definition and returns a @'System.Type' object representing the resulting constructed type.
  syntax:
    content: public virtual Type MakeGenericType(params Type[] typeArguments)
    content.vb: Public Overridable Function MakeGenericType(ParamArray typeArguments As Type()) As Type
    parameters:
    - id: typeArguments
      type: System.Type[]
      description: An array of types to be substituted for the type parameters of the current generic type.
    return:
      type: System.Type
      description: A @'System.Type' representing the constructed type formed by substituting the elements of *typeArguments* for the type parameters of the current generic type.
  exceptions:
  - type: System.InvalidOperationException
    description: The current type does not represent a generic type definition. That is, @'System.Type.IsGenericTypeDefinition' returns false.
  - type: System.ArgumentNullException
    description: '*typeArguments* is null.-or- Any element of *typeArguments* is null.'
  - type: System.ArgumentException
    description: The number of elements in *typeArguments* is not the same as the number of type parameters in the current generic type definition.-or- Any element of *typeArguments* does not satisfy the constraints specified for the corresponding type parameter of the current generic type. -or- *typeArguments* contains an element that is a pointer type (@'System.Type.IsPointer' returns true), a by-ref type (@'System.Type.IsByRef' returns true), or @'System.Void'.
  - type: System.NotSupportedException
    description: The invoked method is not supported in the base class. Derived classes must provide an implementation.
- uid: System.Type.IsContextfulImpl
  id: IsContextfulImpl
  parent: System.Type
  href: System.Type.yml
  name: IsContextfulImpl()
  fullName: System.Type.IsContextfulImpl()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1313
  assemblies:
  - mscorlib
  namespace: System
  summary: Implements the @'System.Type.IsContextful' property and determines whether the @'System.Type' can be hosted in a context.
  syntax:
    content: protected virtual bool IsContextfulImpl()
    content.vb: Protected Overridable Function IsContextfulImpl As Boolean
    return:
      type: System.Boolean
      description: true if the @'System.Type' can be hosted in a context; otherwise, false.
- uid: System.Type.IsMarshalByRefImpl
  id: IsMarshalByRefImpl
  parent: System.Type
  href: System.Type.yml
  name: IsMarshalByRefImpl()
  fullName: System.Type.IsMarshalByRefImpl()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1319
  assemblies:
  - mscorlib
  namespace: System
  summary: Implements the @'System.Type.IsMarshalByRef' property and determines whether the @'System.Type' is marshaled by reference.
  syntax:
    content: protected virtual bool IsMarshalByRefImpl()
    content.vb: Protected Overridable Function IsMarshalByRefImpl As Boolean
    return:
      type: System.Boolean
      description: true if the @'System.Type' is marshaled by reference; otherwise, false.
- uid: System.Type.GetElementType
  id: GetElementType
  parent: System.Type
  href: System.Type.yml
  name: GetElementType()
  fullName: System.Type.GetElementType()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1329
  assemblies:
  - mscorlib
  namespace: System
  summary: When overridden in a derived class, returns the @'System.Type' of the object encompassed or referred to by the current array, pointer or reference type.
  syntax:
    content: public abstract Type GetElementType()
    content.vb: Public MustOverride Function GetElementType As Type
    return:
      type: System.Type
      description: The @'System.Type' of the object encompassed or referred to by the current array, pointer, or reference type, or null if the current @'System.Type' is not an array or a pointer, or is not passed by reference, or represents a generic type or a type parameter in the definition of a generic type or generic method.
- uid: System.Type.GetGenericArguments
  id: GetGenericArguments
  parent: System.Type
  href: System.Type.yml
  name: GetGenericArguments()
  fullName: System.Type.GetGenericArguments()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1332
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns an array of @'System.Type' objects that represent the type arguments of a closed generic type or the type parameters of a generic type definition.
  syntax:
    content: public virtual Type[] GetGenericArguments()
    content.vb: Public Overridable Function GetGenericArguments As Type()
    return:
      type: System.Type[]
      description: An array of @'System.Type' objects that represent the type arguments of a generic type. Returns an empty array if the current type is not a generic type.
  exceptions:
  - type: System.NotSupportedException
    description: The invoked method is not supported in the base class. Derived classes must provide an implementation.
- uid: System.Type.GenericTypeArguments
  id: GenericTypeArguments
  parent: System.Type
  href: System.Type.yml
  name: GenericTypeArguments
  fullName: System.Type.GenericTypeArguments
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1338
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets an array of the generic type arguments for this type.
  syntax:
    content: public virtual Type[] GenericTypeArguments { get; }
    content.vb: Public Overridable ReadOnly Property GenericTypeArguments As Type()
    parameters: []
    return:
      type: System.Type[]
      description: An array of the generic type arguments for this type.
- uid: System.Type.GetGenericTypeDefinition
  id: GetGenericTypeDefinition
  parent: System.Type
  href: System.Type.yml
  name: GetGenericTypeDefinition()
  fullName: System.Type.GetGenericTypeDefinition()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1350
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a @'System.Type' object that represents a generic type definition from which the current generic type can be constructed.
  syntax:
    content: public virtual Type GetGenericTypeDefinition()
    content.vb: Public Overridable Function GetGenericTypeDefinition As Type
    return:
      type: System.Type
      description: A @'System.Type' object representing a generic type from which the current type can be constructed.
  exceptions:
  - type: System.InvalidOperationException
    description: The current type is not a generic type.  That is, @'System.Type.IsGenericType' returns false.
  - type: System.NotSupportedException
    description: The invoked method is not supported in the base class. Derived classes must provide an implementation.
- uid: System.Type.HasElementTypeImpl
  id: HasElementTypeImpl
  parent: System.Type
  href: System.Type.yml
  name: HasElementTypeImpl()
  fullName: System.Type.HasElementTypeImpl()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1357
  assemblies:
  - mscorlib
  namespace: System
  summary: When overridden in a derived class, implements the @'System.Type.HasElementType' property and determines whether the current @'System.Type' encompasses or refers to another type; that is, whether the current @'System.Type' is an array, a pointer, or is passed by reference.
  syntax:
    content: protected abstract bool HasElementTypeImpl()
    content.vb: Protected MustOverride Function HasElementTypeImpl As Boolean
    return:
      type: System.Boolean
      description: true if the @'System.Type' is an array, a pointer, or is passed by reference; otherwise, false.
- uid: System.Type.GetEnumNames
  id: GetEnumNames
  parent: System.Type
  href: System.Type.yml
  name: GetEnumNames()
  fullName: System.Type.GetEnumNames()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1375
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the names of the members of the current enumeration type.
  syntax:
    content: public virtual string[] GetEnumNames()
    content.vb: Public Overridable Function GetEnumNames As String()
    return:
      type: System.String[]
      description: An array that contains the names of the members of the enumeration.
  exceptions:
  - type: System.ArgumentException
    description: The current type is not an enumeration.
- uid: System.Type.GetEnumValues
  id: GetEnumValues
  parent: System.Type
  href: System.Type.yml
  name: GetEnumValues()
  fullName: System.Type.GetEnumValues()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1389
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns an array of the values of the constants in the current enumeration type.
  syntax:
    content: public virtual Array GetEnumValues()
    content.vb: Public Overridable Function GetEnumValues As Array
    return:
      type: System.Array
      description: An array that contains the values. The elements of the array are sorted by the binary values (that is, the unsigned values) of the enumeration constants.
  exceptions:
  - type: System.ArgumentException
    description: The current type is not an enumeration.
- uid: System.Type.GetEnumUnderlyingType
  id: GetEnumUnderlyingType
  parent: System.Type
  href: System.Type.yml
  name: GetEnumUnderlyingType()
  fullName: System.Type.GetEnumUnderlyingType()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1457
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the underlying type of the current enumeration type.
  syntax:
    content: public virtual Type GetEnumUnderlyingType()
    content.vb: Public Overridable Function GetEnumUnderlyingType As Type
    return:
      type: System.Type
      description: The underlying type of the current enumeration.
  exceptions:
  - type: System.ArgumentException
    description: The current type is not an enumeration.-or-The enumeration type is not valid, because it contains more than one instance field.
- uid: System.Type.IsEnumDefined(System.Object)
  id: IsEnumDefined(System.Object)
  parent: System.Type
  href: System.Type.yml
  name: IsEnumDefined(Object)
  fullName: System.Type.IsEnumDefined(System.Object)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1470
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a value that indicates whether the specified value exists in the current enumeration type.
  syntax:
    content: public virtual bool IsEnumDefined(object value)
    content.vb: Public Overridable Function IsEnumDefined(value As Object) As Boolean
    parameters:
    - id: value
      type: System.Object
      description: The value to be tested.
    return:
      type: System.Boolean
      description: true if the specified value is a member of the current enumeration type; otherwise, false.
  exceptions:
  - type: System.ArgumentException
    description: The current type is not an enumeration.
  - type: System.ArgumentNullException
    description: '*value* is null.'
  - type: System.InvalidOperationException
    description: '*value* is of a type that cannot be the underlying type of an enumeration.'
- uid: System.Type.GetEnumName(System.Object)
  id: GetEnumName(System.Object)
  parent: System.Type
  href: System.Type.yml
  name: GetEnumName(Object)
  fullName: System.Type.GetEnumName(System.Object)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1524
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the name of the constant that has the specified value, for the current enumeration type.
  syntax:
    content: public virtual string GetEnumName(object value)
    content.vb: Public Overridable Function GetEnumName(value As Object) As String
    parameters:
    - id: value
      type: System.Object
      description: The value whose name is to be retrieved.
    return:
      type: System.String
      description: The name of the member of the current enumeration type that has the specified value, or null if no such constant is found.
  exceptions:
  - type: System.ArgumentException
    description: The current type is not an enumeration.-or-*value* is neither of the current type nor does it have the same underlying type as the current type.
  - type: System.ArgumentNullException
    description: '*value* is null.'
- uid: System.Type.IsSecurityCritical
  id: IsSecurityCritical
  parent: System.Type
  href: System.Type.yml
  name: IsSecurityCritical
  fullName: System.Type.IsSecurityCritical
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1577
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value that indicates whether the current type is security-critical or security-safe-critical at the current trust level, and therefore can perform critical operations.
  syntax:
    content: public virtual bool IsSecurityCritical { get; }
    content.vb: Public Overridable ReadOnly Property IsSecurityCritical As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the current type is security-critical or security-safe-critical at the current trust level; false if it is transparent.
- uid: System.Type.IsSecuritySafeCritical
  id: IsSecuritySafeCritical
  parent: System.Type
  href: System.Type.yml
  name: IsSecuritySafeCritical
  fullName: System.Type.IsSecuritySafeCritical
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1579
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value that indicates whether the current type is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.
  syntax:
    content: public virtual bool IsSecuritySafeCritical { get; }
    content.vb: Public Overridable ReadOnly Property IsSecuritySafeCritical As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the current type is security-safe-critical at the current trust level; false if it is security-critical or transparent.
- uid: System.Type.IsSecurityTransparent
  id: IsSecurityTransparent
  parent: System.Type
  href: System.Type.yml
  name: IsSecurityTransparent
  fullName: System.Type.IsSecurityTransparent
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1581
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value that indicates whether the current type is transparent at the current trust level, and therefore cannot perform critical operations.
  syntax:
    content: public virtual bool IsSecurityTransparent { get; }
    content.vb: Public Overridable ReadOnly Property IsSecurityTransparent As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the type is security-transparent at the current trust level; otherwise, false.
- uid: System.Type.UnderlyingSystemType
  id: UnderlyingSystemType
  parent: System.Type
  href: System.Type.yml
  name: UnderlyingSystemType
  fullName: System.Type.UnderlyingSystemType
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1623
  assemblies:
  - mscorlib
  namespace: System
  summary: Indicates the type provided by the common language runtime that represents this type.
  syntax:
    content: public abstract Type UnderlyingSystemType { get; }
    content.vb: Public MustOverride ReadOnly Property UnderlyingSystemType As Type
    parameters: []
    return:
      type: System.Type
      description: The underlying system type for the @'System.Type'.
- uid: System.Type.IsSubclassOf(System.Type)
  id: IsSubclassOf(System.Type)
  parent: System.Type
  href: System.Type.yml
  name: IsSubclassOf(Type)
  fullName: System.Type.IsSubclassOf(System.Type)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1631
  assemblies:
  - mscorlib
  namespace: System
  summary: Determines whether the current @'System.Type' derives from the specified @'System.Type'.
  syntax:
    content: public virtual bool IsSubclassOf(Type c)
    content.vb: Public Overridable Function IsSubclassOf(c As Type) As Boolean
    parameters:
    - id: c
      type: System.Type
      description: The type to compare with the current type.
    return:
      type: System.Boolean
      description: true if the current Type derives from *c*; otherwise, false. This method also returns false if *c* and the current Type are equal.
  exceptions:
  - type: System.ArgumentNullException
    description: '*c* is null.'
- uid: System.Type.IsInstanceOfType(System.Object)
  id: IsInstanceOfType(System.Object)
  parent: System.Type
  href: System.Type.yml
  name: IsInstanceOfType(Object)
  fullName: System.Type.IsInstanceOfType(System.Object)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1649
  assemblies:
  - mscorlib
  namespace: System
  summary: Determines whether the specified object is an instance of the current @'System.Type'.
  syntax:
    content: public virtual bool IsInstanceOfType(object o)
    content.vb: Public Overridable Function IsInstanceOfType(o As Object) As Boolean
    parameters:
    - id: o
      type: System.Object
      description: The object to compare with the current type.
    return:
      type: System.Boolean
      description: true if the current Type is in the inheritance hierarchy of the object represented by *o*, or if the current Type is an interface that *o* implements. false if neither of these conditions is the case, if *o* is null, or if the current Type is an open generic type (that is, @'System.Type.ContainsGenericParameters' returns true).
- uid: System.Type.IsAssignableFrom(System.Type)
  id: IsAssignableFrom(System.Type)
  parent: System.Type
  href: System.Type.yml
  name: IsAssignableFrom(Type)
  fullName: System.Type.IsAssignableFrom(System.Type)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1664
  assemblies:
  - mscorlib
  namespace: System
  summary: Determines whether an instance of a specified type can be assigned to the current type instance.
  syntax:
    content: public virtual bool IsAssignableFrom(Type c)
    content.vb: Public Overridable Function IsAssignableFrom(c As Type) As Boolean
    parameters:
    - id: c
      type: System.Type
      description: The type to compare with the current type.
    return:
      type: System.Boolean
      description: 'true if any of the following conditions is true:  *c* and the current instance represent the same type. *c* is derived either directly or indirectly from the current instance. The current instance is an interface that *c* implements. *c* is a generic type parameter, and the current instance represents one of the constraints of *c*. *c* represents a value type, and the current instance represents Nullable&lt;c&gt; (Nullable(Of c) in Visual Basic).false if none of these conditions are true, or if *c* is null.'
- uid: System.Type.IsEquivalentTo(System.Type)
  id: IsEquivalentTo(System.Type)
  parent: System.Type
  href: System.Type.yml
  name: IsEquivalentTo(Type)
  fullName: System.Type.IsEquivalentTo(System.Type)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1701
  assemblies:
  - mscorlib
  namespace: System
  summary: Determines whether two COM types have the same identity and are eligible for type equivalence.
  syntax:
    content: public virtual bool IsEquivalentTo(Type other)
    content.vb: Public Overridable Function IsEquivalentTo(other As Type) As Boolean
    parameters:
    - id: other
      type: System.Type
      description: The COM type that is tested for equivalence with the current type.
    return:
      type: System.Boolean
      description: true if the COM types are equivalent; otherwise, false. This method also returns false if one type is in an assembly that is loaded for execution, and the other is in an assembly that is loaded into the reflection-only context.
- uid: System.Type.ToString
  id: ToString
  parent: System.Type
  href: System.Type.yml
  name: ToString()
  fullName: System.Type.ToString()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1747
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a String representing the name of the current Type.
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: A @'System.String' representing the name of the current @'System.Type'.
  overridden: System.Object.ToString
- uid: System.Type.GetTypeArray(System.Object[])
  id: GetTypeArray(System.Object[])
  parent: System.Type
  href: System.Type.yml
  name: GetTypeArray(Object[])
  name.vb: GetTypeArray(Object())
  fullName: System.Type.GetTypeArray(System.Object[])
  fullName.vb: System.Type.GetTypeArray(System.Object())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1755
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the types of the objects in the specified array.
  syntax:
    content: public static Type[] GetTypeArray(object[] args)
    content.vb: Public Shared Function GetTypeArray(args As Object()) As Type()
    parameters:
    - id: args
      type: System.Object[]
      description: An array of objects whose types to determine.
    return:
      type: System.Type[]
      description: An array of @'System.Type' objects representing the types of the corresponding elements in *args*.
  exceptions:
  - type: System.ArgumentNullException
    description: '*args* is null.'
  - type: System.Reflection.TargetInvocationException
    description: The class initializers are invoked and at least one throws an exception.
- uid: System.Type.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Type
  href: System.Type.yml
  name: Equals(Object)
  fullName: System.Type.Equals(System.Object)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1769
  assemblies:
  - mscorlib
  namespace: System
  summary: Determines if the underlying system type of the current @'System.Type' is the same as the underlying system type of the specified @'System.Object'.
  syntax:
    content: public override bool Equals(object o)
    content.vb: Public Overrides Function Equals(o As Object) As Boolean
    parameters:
    - id: o
      type: System.Object
      description: The object whose underlying system type is to be compared with the underlying system type of the current @'System.Type'.
    return:
      type: System.Boolean
      description: true if the underlying system type of *o* is the same as the underlying system type of the current @'System.Type'; otherwise, false. This method also returns false if the object specified by the *o* parameter is not a Type.
  overridden: System.Reflection.MemberInfo.Equals(System.Object)
- uid: System.Type.Equals(System.Type)
  id: Equals(System.Type)
  parent: System.Type
  href: System.Type.yml
  name: Equals(Type)
  fullName: System.Type.Equals(System.Type)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1779
  assemblies:
  - mscorlib
  namespace: System
  summary: Determines if the underlying system type of the current @'System.Type' is the same as the underlying system type of the specified @'System.Type'.
  syntax:
    content: public bool Equals(Type o)
    content.vb: Public Function Equals(o As Type) As Boolean
    parameters:
    - id: o
      type: System.Type
      description: The object whose underlying system type is to be compared with the underlying system type of the current @'System.Type'.
    return:
      type: System.Boolean
      description: true if the underlying system type of *o* is the same as the underlying system type of the current @'System.Type'; otherwise, false.
- uid: System.Type.GetHashCode
  id: GetHashCode
  parent: System.Type
  href: System.Type.yml
  name: GetHashCode()
  fullName: System.Type.GetHashCode()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1804
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the hash code for this instance.
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: The hash code for this instance.
  overridden: System.Reflection.MemberInfo.GetHashCode
- uid: System.Type.GetInterfaceMap(System.Type)
  id: GetInterfaceMap(System.Type)
  parent: System.Type
  href: System.Type.yml
  name: GetInterfaceMap(Type)
  fullName: System.Type.GetInterfaceMap(System.Type)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Type.cs
    startLine: 1817
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns an interface mapping for the specified interface type.
  syntax:
    content: public virtual InterfaceMapping GetInterfaceMap(Type interfaceType)
    content.vb: Public Overridable Function GetInterfaceMap(interfaceType As Type) As InterfaceMapping
    parameters:
    - id: interfaceType
      type: System.Type
      description: The interface type to retrieve a mapping for.
    return:
      type: System.Reflection.InterfaceMapping
      description: An object that represents the interface mapping for *interfaceType*.
  exceptions:
  - type: System.ArgumentException
    description: '*interfaceType* is not implemented by the current type. -or-The *interfaceType* parameter does not refer to an interface. -or-*interfaceType* is a generic interface, and the current type is an array type.'
  - type: System.ArgumentNullException
    description: '*interfaceType* is null.'
  - type: System.InvalidOperationException
    description: The current @'System.Type' represents a generic type parameter; that is, @'System.Type.IsGenericParameter' is true.
  - type: System.NotSupportedException
    description: The invoked method is not supported in the base class. Derived classes must provide an implementation.
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Object
  parent: System
  isExternal: false
  href: System.Object.yml
  name: Object
  fullName: System.Object
  type: Class
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  href: System.Reflection.MemberInfo.yml
  name: MemberInfo
  fullName: System.Reflection.MemberInfo
  type: Class
- uid: System.Reflection.MemberInfo.Name
  parent: System.Reflection.MemberInfo
  isExternal: false
  href: System.Reflection.MemberInfo.yml
  name: Name
  fullName: System.Reflection.MemberInfo.Name
- uid: System.Reflection.MemberInfo.CustomAttributes
  parent: System.Reflection.MemberInfo
  isExternal: false
  href: System.Reflection.MemberInfo.yml
  name: CustomAttributes
  fullName: System.Reflection.MemberInfo.CustomAttributes
- uid: System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)
  parent: System.Reflection.MemberInfo
  isExternal: false
  href: System.Reflection.MemberInfo.yml
  name: GetCustomAttributes(Boolean)
  fullName: System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)
  spec.csharp:
  - uid: System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)
    name: GetCustomAttributes
    fullName: System.Reflection.MemberInfo.GetCustomAttributes
    href: System.Reflection.MemberInfo.yml
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    href: System.Boolean.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)
    name: GetCustomAttributes
    fullName: System.Reflection.MemberInfo.GetCustomAttributes
    href: System.Reflection.MemberInfo.yml
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    href: System.Boolean.yml
  - name: )
    fullName: )
- uid: System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.MemberInfo
  isExternal: false
  href: System.Reflection.MemberInfo.yml
  name: GetCustomAttributes(Type, Boolean)
  fullName: System.Reflection.MemberInfo.GetCustomAttributes(System.Type, System.Boolean)
  spec.csharp:
  - uid: System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)
    name: GetCustomAttributes
    fullName: System.Reflection.MemberInfo.GetCustomAttributes
    href: System.Reflection.MemberInfo.yml
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    href: System.Type.yml
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    href: System.Boolean.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)
    name: GetCustomAttributes
    fullName: System.Reflection.MemberInfo.GetCustomAttributes
    href: System.Reflection.MemberInfo.yml
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    href: System.Type.yml
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    href: System.Boolean.yml
  - name: )
    fullName: )
- uid: System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.MemberInfo
  isExternal: false
  href: System.Reflection.MemberInfo.yml
  name: IsDefined(Type, Boolean)
  fullName: System.Reflection.MemberInfo.IsDefined(System.Type, System.Boolean)
  spec.csharp:
  - uid: System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)
    name: IsDefined
    fullName: System.Reflection.MemberInfo.IsDefined
    href: System.Reflection.MemberInfo.yml
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    href: System.Type.yml
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    href: System.Boolean.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)
    name: IsDefined
    fullName: System.Reflection.MemberInfo.IsDefined
    href: System.Reflection.MemberInfo.yml
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    href: System.Type.yml
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    href: System.Boolean.yml
  - name: )
    fullName: )
- uid: System.Reflection.MemberInfo.GetCustomAttributesData
  parent: System.Reflection.MemberInfo
  isExternal: false
  href: System.Reflection.MemberInfo.yml
  name: GetCustomAttributesData()
  fullName: System.Reflection.MemberInfo.GetCustomAttributesData()
  spec.csharp:
  - uid: System.Reflection.MemberInfo.GetCustomAttributesData
    name: GetCustomAttributesData
    fullName: System.Reflection.MemberInfo.GetCustomAttributesData
    href: System.Reflection.MemberInfo.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.GetCustomAttributesData
    name: GetCustomAttributesData
    fullName: System.Reflection.MemberInfo.GetCustomAttributesData
    href: System.Reflection.MemberInfo.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Reflection.MemberInfo.MetadataToken
  parent: System.Reflection.MemberInfo
  isExternal: false
  href: System.Reflection.MemberInfo.yml
  name: MetadataToken
  fullName: System.Reflection.MemberInfo.MetadataToken
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    href: System.Object.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
  type: Namespace
- uid: System.Reflection.MemberInfo.MemberType
  parent: System.Reflection.MemberInfo
  isExternal: false
  href: System.Reflection.MemberInfo.yml
  name: MemberType
  fullName: System.Reflection.MemberInfo.MemberType
- uid: System.Reflection.MemberTypes
  parent: System.Reflection
  isExternal: false
  href: System.Reflection.MemberTypes.yml
  name: MemberTypes
  fullName: System.Reflection.MemberTypes
  type: Enum
- uid: System.Reflection.MemberInfo.DeclaringType
  parent: System.Reflection.MemberInfo
  isExternal: false
  href: System.Reflection.MemberInfo.yml
  name: DeclaringType
  fullName: System.Reflection.MemberInfo.DeclaringType
- uid: System.Type
  parent: System
  isExternal: false
  href: System.Type.yml
  name: Type
  fullName: System.Type
  type: Class
- uid: System.Reflection.MethodBase
  parent: System.Reflection
  isExternal: false
  href: System.Reflection.MethodBase.yml
  name: MethodBase
  fullName: System.Reflection.MethodBase
  type: Class
- uid: System.Reflection.MemberInfo.ReflectedType
  parent: System.Reflection.MemberInfo
  isExternal: false
  href: System.Reflection.MemberInfo.yml
  name: ReflectedType
  fullName: System.Reflection.MemberInfo.ReflectedType
- uid: System.String
  parent: System
  isExternal: false
  href: System.String.yml
  name: String
  fullName: System.String
  type: Class
- uid: System.Boolean
  parent: System
  isExternal: false
  href: System.Boolean.yml
  name: Boolean
  fullName: System.Boolean
  type: Struct
- uid: System.Runtime.InteropServices.StructLayoutAttribute
  parent: System.Runtime.InteropServices
  isExternal: false
  href: System.Runtime.InteropServices.StructLayoutAttribute.yml
  name: StructLayoutAttribute
  fullName: System.Runtime.InteropServices.StructLayoutAttribute
  type: Class
- uid: System.Runtime.InteropServices
  isExternal: false
  name: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
  type: Namespace
- uid: System.Int32
  parent: System
  isExternal: false
  href: System.Int32.yml
  name: Int32
  fullName: System.Int32
  type: Struct
- uid: System.Guid
  parent: System
  isExternal: false
  href: System.Guid.yml
  name: Guid
  fullName: System.Guid
  type: Struct
- uid: System.TypeCode
  parent: System
  isExternal: false
  href: System.TypeCode.yml
  name: TypeCode
  fullName: System.TypeCode
  type: Enum
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  href: System.Reflection.Binder.yml
  name: Binder
  fullName: System.Reflection.Binder
  type: Class
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  href: System.Reflection.BindingFlags.yml
  name: BindingFlags
  fullName: System.Reflection.BindingFlags
  type: Enum
- uid: System.Object[]
  isExternal: false
  href: System.Object.yml
  name: Object[]
  name.vb: Object()
  fullName: System.Object[]
  fullName.vb: System.Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: ()
    fullName: ()
- uid: System.Reflection.ParameterModifier[]
  isExternal: false
  href: System.Reflection.ParameterModifier.yml
  name: ParameterModifier[]
  name.vb: ParameterModifier()
  fullName: System.Reflection.ParameterModifier[]
  fullName.vb: System.Reflection.ParameterModifier()
  spec.csharp:
  - uid: System.Reflection.ParameterModifier
    name: ParameterModifier
    fullName: System.Reflection.ParameterModifier
    href: System.Reflection.ParameterModifier.yml
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.ParameterModifier
    name: ParameterModifier
    fullName: System.Reflection.ParameterModifier
    href: System.Reflection.ParameterModifier.yml
  - name: ()
    fullName: ()
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: false
  href: System.Globalization.CultureInfo.yml
  name: CultureInfo
  fullName: System.Globalization.CultureInfo
  type: Class
- uid: System.String[]
  isExternal: false
  href: System.String.yml
  name: String[]
  name.vb: String()
  fullName: System.String[]
  fullName.vb: System.String()
  spec.csharp:
  - uid: System.String
    name: String
    fullName: System.String
    href: System.String.yml
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    fullName: System.String
    href: System.String.yml
  - name: ()
    fullName: ()
- uid: System.Globalization
  isExternal: false
  name: System.Globalization
  fullName: System.Globalization
  type: Namespace
- uid: System.Reflection.Module
  parent: System.Reflection
  isExternal: false
  href: System.Reflection.Module.yml
  name: Module
  fullName: System.Reflection.Module
  type: Class
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: false
  href: System.Reflection.Assembly.yml
  name: Assembly
  fullName: System.Reflection.Assembly
  type: Class
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: false
  href: System.RuntimeTypeHandle.yml
  name: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle
  type: Struct
- uid: System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: false
  href: System.Reflection.CallingConventions.yml
  name: CallingConventions
  fullName: System.Reflection.CallingConventions
  type: Enum
- uid: System.Type[]
  isExternal: false
  href: System.Type.yml
  name: Type[]
  name.vb: Type()
  fullName: System.Type[]
  fullName.vb: System.Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    fullName: System.Type
    href: System.Type.yml
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    fullName: System.Type
    href: System.Type.yml
  - name: ()
    fullName: ()
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  href: System.Reflection.ConstructorInfo.yml
  name: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
  type: Class
- uid: System.Reflection.ConstructorInfo[]
  isExternal: false
  href: System.Reflection.ConstructorInfo.yml
  name: ConstructorInfo[]
  name.vb: ConstructorInfo()
  fullName: System.Reflection.ConstructorInfo[]
  fullName.vb: System.Reflection.ConstructorInfo()
  spec.csharp:
  - uid: System.Reflection.ConstructorInfo
    name: ConstructorInfo
    fullName: System.Reflection.ConstructorInfo
    href: System.Reflection.ConstructorInfo.yml
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.ConstructorInfo
    name: ConstructorInfo
    fullName: System.Reflection.ConstructorInfo
    href: System.Reflection.ConstructorInfo.yml
  - name: ()
    fullName: ()
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  href: System.Reflection.MethodInfo.yml
  name: MethodInfo
  fullName: System.Reflection.MethodInfo
  type: Class
- uid: System.Reflection.MethodInfo[]
  isExternal: false
  href: System.Reflection.MethodInfo.yml
  name: MethodInfo[]
  name.vb: MethodInfo()
  fullName: System.Reflection.MethodInfo[]
  fullName.vb: System.Reflection.MethodInfo()
  spec.csharp:
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    fullName: System.Reflection.MethodInfo
    href: System.Reflection.MethodInfo.yml
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    fullName: System.Reflection.MethodInfo
    href: System.Reflection.MethodInfo.yml
  - name: ()
    fullName: ()
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: false
  href: System.Reflection.FieldInfo.yml
  name: FieldInfo
  fullName: System.Reflection.FieldInfo
  type: Class
- uid: System.Reflection.FieldInfo[]
  isExternal: false
  href: System.Reflection.FieldInfo.yml
  name: FieldInfo[]
  name.vb: FieldInfo()
  fullName: System.Reflection.FieldInfo[]
  fullName.vb: System.Reflection.FieldInfo()
  spec.csharp:
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    fullName: System.Reflection.FieldInfo
    href: System.Reflection.FieldInfo.yml
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    fullName: System.Reflection.FieldInfo
    href: System.Reflection.FieldInfo.yml
  - name: ()
    fullName: ()
- uid: System.Reflection.TypeFilter
  parent: System.Reflection
  isExternal: false
  href: System.Reflection.TypeFilter.yml
  name: TypeFilter
  fullName: System.Reflection.TypeFilter
  type: Delegate
- uid: System.Reflection.EventInfo
  parent: System.Reflection
  isExternal: false
  href: System.Reflection.EventInfo.yml
  name: EventInfo
  fullName: System.Reflection.EventInfo
  type: Class
- uid: System.Reflection.EventInfo[]
  isExternal: false
  href: System.Reflection.EventInfo.yml
  name: EventInfo[]
  name.vb: EventInfo()
  fullName: System.Reflection.EventInfo[]
  fullName.vb: System.Reflection.EventInfo()
  spec.csharp:
  - uid: System.Reflection.EventInfo
    name: EventInfo
    fullName: System.Reflection.EventInfo
    href: System.Reflection.EventInfo.yml
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.EventInfo
    name: EventInfo
    fullName: System.Reflection.EventInfo
    href: System.Reflection.EventInfo.yml
  - name: ()
    fullName: ()
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: false
  href: System.Reflection.PropertyInfo.yml
  name: PropertyInfo
  fullName: System.Reflection.PropertyInfo
  type: Class
- uid: System.Reflection.PropertyInfo[]
  isExternal: false
  href: System.Reflection.PropertyInfo.yml
  name: PropertyInfo[]
  name.vb: PropertyInfo()
  fullName: System.Reflection.PropertyInfo[]
  fullName.vb: System.Reflection.PropertyInfo()
  spec.csharp:
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    fullName: System.Reflection.PropertyInfo
    href: System.Reflection.PropertyInfo.yml
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    fullName: System.Reflection.PropertyInfo
    href: System.Reflection.PropertyInfo.yml
  - name: ()
    fullName: ()
- uid: System.Reflection.MemberInfo[]
  isExternal: false
  href: System.Reflection.MemberInfo.yml
  name: MemberInfo[]
  name.vb: MemberInfo()
  fullName: System.Reflection.MemberInfo[]
  fullName.vb: System.Reflection.MemberInfo()
  spec.csharp:
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    fullName: System.Reflection.MemberInfo
    href: System.Reflection.MemberInfo.yml
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    fullName: System.Reflection.MemberInfo
    href: System.Reflection.MemberInfo.yml
  - name: ()
    fullName: ()
- uid: System.Reflection.MemberFilter
  parent: System.Reflection
  isExternal: false
  href: System.Reflection.MemberFilter.yml
  name: MemberFilter
  fullName: System.Reflection.MemberFilter
  type: Delegate
- uid: System.Reflection.TypeAttributes
  parent: System.Reflection
  isExternal: false
  href: System.Reflection.TypeAttributes.yml
  name: TypeAttributes
  fullName: System.Reflection.TypeAttributes
  type: Enum
- uid: System.Reflection.GenericParameterAttributes
  parent: System.Reflection
  isExternal: false
  href: System.Reflection.GenericParameterAttributes.yml
  name: GenericParameterAttributes
  fullName: System.Reflection.GenericParameterAttributes
  type: Enum
- uid: System.Array
  parent: System
  isExternal: false
  href: System.Array.yml
  name: Array
  fullName: System.Array
  type: Class
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  href: System.Object.yml
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    href: System.Object.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Reflection.MemberInfo.Equals(System.Object)
  parent: System.Reflection.MemberInfo
  isExternal: false
  href: System.Reflection.MemberInfo.yml
  name: Equals(Object)
  fullName: System.Reflection.MemberInfo.Equals(System.Object)
  spec.csharp:
  - uid: System.Reflection.MemberInfo.Equals(System.Object)
    name: Equals
    fullName: System.Reflection.MemberInfo.Equals
    href: System.Reflection.MemberInfo.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.Equals(System.Object)
    name: Equals
    fullName: System.Reflection.MemberInfo.Equals
    href: System.Reflection.MemberInfo.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.Reflection.MemberInfo.GetHashCode
  parent: System.Reflection.MemberInfo
  isExternal: false
  href: System.Reflection.MemberInfo.yml
  name: GetHashCode()
  fullName: System.Reflection.MemberInfo.GetHashCode()
  spec.csharp:
  - uid: System.Reflection.MemberInfo.GetHashCode
    name: GetHashCode
    fullName: System.Reflection.MemberInfo.GetHashCode
    href: System.Reflection.MemberInfo.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.GetHashCode
    name: GetHashCode
    fullName: System.Reflection.MemberInfo.GetHashCode
    href: System.Reflection.MemberInfo.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Reflection.InterfaceMapping
  parent: System.Reflection
  isExternal: false
  href: System.Reflection.InterfaceMapping.yml
  name: InterfaceMapping
  fullName: System.Reflection.InterfaceMapping
  type: Struct
