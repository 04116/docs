items:
- uid: System.Security.Cryptography.HashAlgorithm
  id: HashAlgorithm
  parent: System.Security.Cryptography
  children:
  - System.Security.Cryptography.HashAlgorithm.#ctor
  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  - System.Security.Cryptography.HashAlgorithm.Clear
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  - System.Security.Cryptography.HashAlgorithm.Create
  - System.Security.Cryptography.HashAlgorithm.Create(System.String)
  - System.Security.Cryptography.HashAlgorithm.Dispose
  - System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.HashAlgorithm.Hash
  - System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.HashFinal
  - System.Security.Cryptography.HashAlgorithm.HashSize
  - System.Security.Cryptography.HashAlgorithm.HashSizeValue
  - System.Security.Cryptography.HashAlgorithm.HashValue
  - System.Security.Cryptography.HashAlgorithm.Initialize
  - System.Security.Cryptography.HashAlgorithm.InputBlockSize
  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  - System.Security.Cryptography.HashAlgorithm.State
  - System.Security.Cryptography.HashAlgorithm.System#IDisposable#Dispose
  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  href: System.Security.Cryptography.HashAlgorithm.yml
  name: HashAlgorithm
  fullName: System.Security.Cryptography.HashAlgorithm
  type: Class
  source:
    remote: &o0
      path: src/mscorlib/src/System/Security/Cryptography/HashAlgorithm.cs
      branch: master
      repo: https://github.com/chenkennt/coreclr.git
    path: src/mscorlib/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 7
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Represents the base class from which all implementations of cryptographic hash algorithms must derive.
  syntax:
    content: 'public abstract class HashAlgorithm : ICryptoTransform, IDisposable'
    content.vb: Public MustInherit Class HashAlgorithm Implements ICryptoTransform, IDisposable
  inheritance:
  - System.Object
  implements:
  - System.Security.Cryptography.ICryptoTransform
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Security.Cryptography.HashAlgorithm.HashSizeValue
  id: HashSizeValue
  parent: System.Security.Cryptography.HashAlgorithm
  href: System.Security.Cryptography.HashAlgorithm.yml
  name: HashSizeValue
  fullName: System.Security.Cryptography.HashAlgorithm.HashSizeValue
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 9
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Represents the size, in bits, of the computed hash code.
  syntax:
    content: protected int HashSizeValue
    content.vb: Protected HashSizeValue As Integer
- uid: System.Security.Cryptography.HashAlgorithm.HashValue
  id: HashValue
  parent: System.Security.Cryptography.HashAlgorithm
  href: System.Security.Cryptography.HashAlgorithm.yml
  name: HashValue
  fullName: System.Security.Cryptography.HashAlgorithm.HashValue
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 10
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Represents the value of the computed hash code.
  syntax:
    content: protected byte[] HashValue
    content.vb: Protected HashValue As Byte()
- uid: System.Security.Cryptography.HashAlgorithm.State
  id: State
  parent: System.Security.Cryptography.HashAlgorithm
  href: System.Security.Cryptography.HashAlgorithm.yml
  name: State
  fullName: System.Security.Cryptography.HashAlgorithm.State
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 11
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Represents the state of the hash computation.
  syntax:
    content: protected int State
    content.vb: Protected State As Integer
- uid: System.Security.Cryptography.HashAlgorithm.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.HashAlgorithm
  href: System.Security.Cryptography.HashAlgorithm.yml
  name: HashAlgorithm()
  fullName: System.Security.Cryptography.HashAlgorithm.HashAlgorithm()
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 15
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the @'System.Security.Cryptography.HashAlgorithm' class.
  syntax:
    content: protected HashAlgorithm()
    content.vb: Protected Sub New
- uid: System.Security.Cryptography.HashAlgorithm.HashSize
  id: HashSize
  parent: System.Security.Cryptography.HashAlgorithm
  href: System.Security.Cryptography.HashAlgorithm.yml
  name: HashSize
  fullName: System.Security.Cryptography.HashAlgorithm.HashSize
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 21
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Gets the size, in bits, of the computed hash code.
  syntax:
    content: public virtual int HashSize { get; }
    content.vb: Public Overridable ReadOnly Property HashSize As Integer
    parameters: []
    return:
      type: System.Int32
- uid: System.Security.Cryptography.HashAlgorithm.Hash
  id: Hash
  parent: System.Security.Cryptography.HashAlgorithm
  href: System.Security.Cryptography.HashAlgorithm.yml
  name: Hash
  fullName: System.Security.Cryptography.HashAlgorithm.Hash
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 25
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Gets the value of the computed hash code.
  syntax:
    content: public virtual byte[] Hash { get; }
    content.vb: Public Overridable ReadOnly Property Hash As Byte()
    parameters: []
    return:
      type: System.Byte[]
  exceptions:
  - type: System.Security.Cryptography.CryptographicUnexpectedOperationException
    description: '@''System.Security.Cryptography.HashAlgorithm.HashValue'' is null.'
  - type: System.ObjectDisposedException
    description: The object has already been disposed.
- uid: System.Security.Cryptography.HashAlgorithm.Create
  id: Create
  parent: System.Security.Cryptography.HashAlgorithm
  href: System.Security.Cryptography.HashAlgorithm.yml
  name: Create()
  fullName: System.Security.Cryptography.HashAlgorithm.Create()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 39
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Creates an instance of the default implementation of a hash algorithm.
  syntax:
    content: public static HashAlgorithm Create()
    content.vb: Public Shared Function Create As HashAlgorithm
    return:
      type: System.Security.Cryptography.HashAlgorithm
- uid: System.Security.Cryptography.HashAlgorithm.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.HashAlgorithm
  href: System.Security.Cryptography.HashAlgorithm.yml
  name: Create(String)
  fullName: System.Security.Cryptography.HashAlgorithm.Create(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 43
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Creates an instance of the specified implementation of a hash algorithm.
  syntax:
    content: public static HashAlgorithm Create(string hashName)
    content.vb: Public Shared Function Create(hashName As String) As HashAlgorithm
    parameters:
    - id: hashName
      type: System.String
      description: The hash algorithm implementation to use. The following table shows the valid values for the *hashName* parameter and the algorithms they map to. Parameter value Implements SHA @'System.Security.Cryptography.SHA1CryptoServiceProvider'SHA1 @'System.Security.Cryptography.SHA1CryptoServiceProvider'System.Security.Cryptography.SHA1 @'System.Security.Cryptography.SHA1CryptoServiceProvider'System.Security.Cryptography.HashAlgorithm @'System.Security.Cryptography.SHA1CryptoServiceProvider'MD5 @'System.Security.Cryptography.MD5CryptoServiceProvider'System.Security.Cryptography.MD5 @'System.Security.Cryptography.MD5CryptoServiceProvider'SHA256 @'System.Security.Cryptography.SHA256Managed'SHA-256 @'System.Security.Cryptography.SHA256Managed'System.Security.Cryptography.SHA256 @'System.Security.Cryptography.SHA256Managed'SHA384 @'System.Security.Cryptography.SHA384Managed'SHA-384 @'System.Security.Cryptography.SHA384Managed'System.Security.Cryptography.SHA384 @'System.Security.Cryptography.SHA384Managed'SHA512 @'System.Security.Cryptography.SHA512Managed'SHA-512 @'System.Security.Cryptography.SHA512Managed'System.Security.Cryptography.SHA512 @'System.Security.Cryptography.SHA512Managed'
    return:
      type: System.Security.Cryptography.HashAlgorithm
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  id: ComputeHash(System.IO.Stream)
  parent: System.Security.Cryptography.HashAlgorithm
  href: System.Security.Cryptography.HashAlgorithm.yml
  name: ComputeHash(Stream)
  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 47
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Computes the hash value for the specified @'System.IO.Stream' object.
  syntax:
    content: public byte[] ComputeHash(Stream inputStream)
    content.vb: Public Function ComputeHash(inputStream As Stream) As Byte()
    parameters:
    - id: inputStream
      type: System.IO.Stream
      description: The input to compute the hash code for.
    return:
      type: System.Byte[]
  exceptions:
  - type: System.ObjectDisposedException
    description: The object has already been disposed.
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  id: ComputeHash(System.Byte[])
  parent: System.Security.Cryptography.HashAlgorithm
  href: System.Security.Cryptography.HashAlgorithm.yml
  name: ComputeHash(Byte[])
  name.vb: ComputeHash(Byte())
  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  fullName.vb: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 67
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Computes the hash value for the specified byte array.
  syntax:
    content: public byte[] ComputeHash(byte[] buffer)
    content.vb: Public Function ComputeHash(buffer As Byte()) As Byte()
    parameters:
    - id: buffer
      type: System.Byte[]
      description: The input to compute the hash code for.
    return:
      type: System.Byte[]
  exceptions:
  - type: System.ArgumentNullException
    description: '*buffer* is null.'
  - type: System.ObjectDisposedException
    description: The object has already been disposed.
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  id: ComputeHash(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  href: System.Security.Cryptography.HashAlgorithm.yml
  name: ComputeHash(Byte[], Int32, Int32)
  name.vb: ComputeHash(Byte(), Int32, Int32)
  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[], System.Int32, System.Int32)
  fullName.vb: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte(), System.Int32, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 81
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Computes the hash value for the specified region of the specified byte array.
  syntax:
    content: public byte[] ComputeHash(byte[] buffer, int offset, int count)
    content.vb: Public Function ComputeHash(buffer As Byte(), offset As Integer, count As Integer) As Byte()
    parameters:
    - id: buffer
      type: System.Byte[]
      description: The input to compute the hash code for.
    - id: offset
      type: System.Int32
      description: The offset into the byte array from which to begin using data.
    - id: count
      type: System.Int32
      description: The number of bytes in the array to use as data.
    return:
      type: System.Byte[]
  exceptions:
  - type: System.ArgumentException
    description: '*count* is an invalid value.-or-*buffer* length is invalid.'
  - type: System.ArgumentNullException
    description: '*buffer* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*offset* is out of range. This parameter requires a non-negative number.'
  - type: System.ObjectDisposedException
    description: The object has already been disposed.
- uid: System.Security.Cryptography.HashAlgorithm.InputBlockSize
  id: InputBlockSize
  parent: System.Security.Cryptography.HashAlgorithm
  href: System.Security.Cryptography.HashAlgorithm.yml
  name: InputBlockSize
  fullName: System.Security.Cryptography.HashAlgorithm.InputBlockSize
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 106
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, gets the input block size.
  syntax:
    content: public virtual int InputBlockSize { get; }
    content.vb: Public Overridable ReadOnly Property InputBlockSize As Integer
    parameters: []
    return:
      type: System.Int32
- uid: System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  id: OutputBlockSize
  parent: System.Security.Cryptography.HashAlgorithm
  href: System.Security.Cryptography.HashAlgorithm.yml
  name: OutputBlockSize
  fullName: System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 110
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, gets the output block size.
  syntax:
    content: public virtual int OutputBlockSize { get; }
    content.vb: Public Overridable ReadOnly Property OutputBlockSize As Integer
    parameters: []
    return:
      type: System.Int32
- uid: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  id: CanTransformMultipleBlocks
  parent: System.Security.Cryptography.HashAlgorithm
  href: System.Security.Cryptography.HashAlgorithm.yml
  name: CanTransformMultipleBlocks
  fullName: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 114
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, gets a value indicating whether multiple blocks can be transformed.
  syntax:
    content: public virtual bool CanTransformMultipleBlocks { get; }
    content.vb: Public Overridable ReadOnly Property CanTransformMultipleBlocks As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  id: CanReuseTransform
  parent: System.Security.Cryptography.HashAlgorithm
  href: System.Security.Cryptography.HashAlgorithm.yml
  name: CanReuseTransform
  fullName: System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 118
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Gets a value indicating whether the current transform can be reused.
  syntax:
    content: public virtual bool CanReuseTransform { get; }
    content.vb: Public Overridable ReadOnly Property CanReuseTransform As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  id: TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  href: System.Security.Cryptography.HashAlgorithm.yml
  name: TransformBlock(Byte[], Int32, Int32, Byte[], Int32)
  name.vb: TransformBlock(Byte(), Int32, Int32, Byte(), Int32)
  fullName: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[], System.Int32, System.Int32, System.Byte[], System.Int32)
  fullName.vb: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte(), System.Int32, System.Int32, System.Byte(), System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 123
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Computes the hash value for the specified region of the input byte array and copies the specified region of the input byte array to the specified region of the output byte array.
  syntax:
    content: public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset)
    content.vb: Public Function TransformBlock(inputBuffer As Byte(), inputOffset As Integer, inputCount As Integer, outputBuffer As Byte(), outputOffset As Integer) As Integer
    parameters:
    - id: inputBuffer
      type: System.Byte[]
      description: The input to compute the hash code for.
    - id: inputOffset
      type: System.Int32
      description: The offset into the input byte array from which to begin using data.
    - id: inputCount
      type: System.Int32
      description: The number of bytes in the input byte array to use as data.
    - id: outputBuffer
      type: System.Byte[]
      description: A copy of the part of the input array used to compute the hash code.
    - id: outputOffset
      type: System.Int32
      description: The offset into the output byte array from which to begin writing data.
    return:
      type: System.Int32
  exceptions:
  - type: System.ArgumentException
    description: '*inputCount* uses an invalid value.-or-*inputBuffer* has an invalid length.'
  - type: System.ArgumentNullException
    description: '*inputBuffer* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*inputOffset* is out of range. This parameter requires a non-negative number.'
  - type: System.ObjectDisposedException
    description: The object has already been disposed.
- uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  id: TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  href: System.Security.Cryptography.HashAlgorithm.yml
  name: TransformFinalBlock(Byte[], Int32, Int32)
  name.vb: TransformFinalBlock(Byte(), Int32, Int32)
  fullName: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[], System.Int32, System.Int32)
  fullName.vb: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte(), System.Int32, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 146
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Computes the hash value for the specified region of the specified byte array.
  syntax:
    content: public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount)
    content.vb: Public Function TransformFinalBlock(inputBuffer As Byte(), inputOffset As Integer, inputCount As Integer) As Byte()
    parameters:
    - id: inputBuffer
      type: System.Byte[]
      description: The input to compute the hash code for.
    - id: inputOffset
      type: System.Int32
      description: The offset into the byte array from which to begin using data.
    - id: inputCount
      type: System.Int32
      description: The number of bytes in the byte array to use as data.
    return:
      type: System.Byte[]
  exceptions:
  - type: System.ArgumentException
    description: '*inputCount* uses an invalid value.-or-*inputBuffer* has an invalid offset length.'
  - type: System.ArgumentNullException
    description: '*inputBuffer* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*inputOffset* is out of range. This parameter requires a non-negative number.'
  - type: System.ObjectDisposedException
    description: The object has already been disposed.
- uid: System.Security.Cryptography.HashAlgorithm.System#IDisposable#Dispose
  id: System#IDisposable#Dispose
  parent: System.Security.Cryptography.HashAlgorithm
  href: System.Security.Cryptography.HashAlgorithm.yml
  name: IDisposable.Dispose()
  name.vb: System.IDisposable.Dispose()
  fullName: System.Security.Cryptography.HashAlgorithm.System.IDisposable.Dispose()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 183
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  syntax:
    content: void IDisposable.Dispose()
    content.vb: Sub System.IDisposable.Dispose Implements IDisposable.Dispose
- uid: System.Security.Cryptography.HashAlgorithm.Dispose
  id: Dispose
  parent: System.Security.Cryptography.HashAlgorithm
  href: System.Security.Cryptography.HashAlgorithm.yml
  name: Dispose()
  fullName: System.Security.Cryptography.HashAlgorithm.Dispose()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 189
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Releases all resources used by the current instance of the @'System.Security.Cryptography.HashAlgorithm' class.
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
- uid: System.Security.Cryptography.HashAlgorithm.Clear
  id: Clear
  parent: System.Security.Cryptography.HashAlgorithm
  href: System.Security.Cryptography.HashAlgorithm.yml
  name: Clear()
  fullName: System.Security.Cryptography.HashAlgorithm.Clear()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 195
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Releases all resources used by the @'System.Security.Cryptography.HashAlgorithm' class.
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
- uid: System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.HashAlgorithm
  href: System.Security.Cryptography.HashAlgorithm.yml
  name: Dispose(Boolean)
  fullName: System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 199
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Releases the unmanaged resources used by the @'System.Security.Cryptography.HashAlgorithm' and optionally releases the managed resources.
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: true to release both managed and unmanaged resources; false to release only unmanaged resources.
- uid: System.Security.Cryptography.HashAlgorithm.Initialize
  id: Initialize
  parent: System.Security.Cryptography.HashAlgorithm
  href: System.Security.Cryptography.HashAlgorithm.yml
  name: Initialize()
  fullName: System.Security.Cryptography.HashAlgorithm.Initialize()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 212
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Initializes an implementation of the @'System.Security.Cryptography.HashAlgorithm' class.
  syntax:
    content: public abstract void Initialize()
    content.vb: Public MustOverride Sub Initialize
- uid: System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)
  id: HashCore(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  href: System.Security.Cryptography.HashAlgorithm.yml
  name: HashCore(Byte[], Int32, Int32)
  name.vb: HashCore(Byte(), Int32, Int32)
  fullName: System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[], System.Int32, System.Int32)
  fullName.vb: System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte(), System.Int32, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 214
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, routes data written to the object into the hash algorithm for computing the hash.
  syntax:
    content: protected abstract void HashCore(byte[] array, int ibStart, int cbSize)
    content.vb: Protected MustOverride Sub HashCore(array As Byte(), ibStart As Integer, cbSize As Integer)
    parameters:
    - id: array
      type: System.Byte[]
      description: The input to compute the hash code for.
    - id: ibStart
      type: System.Int32
      description: The offset into the byte array from which to begin using data.
    - id: cbSize
      type: System.Int32
      description: The number of bytes in the byte array to use as data.
- uid: System.Security.Cryptography.HashAlgorithm.HashFinal
  id: HashFinal
  parent: System.Security.Cryptography.HashAlgorithm
  href: System.Security.Cryptography.HashAlgorithm.yml
  name: HashFinal()
  fullName: System.Security.Cryptography.HashAlgorithm.HashFinal()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 216
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic stream object.
  syntax:
    content: protected abstract byte[] HashFinal()
    content.vb: Protected MustOverride Function HashFinal As Byte()
    return:
      type: System.Byte[]
references:
- uid: System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  fullName: System.Security.Cryptography
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  fullName: System.Int32
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  name.vb: Byte()
  fullName: System.Byte[]
  fullName.vb: System.Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Security.Cryptography.HashAlgorithm
  parent: System.Security.Cryptography
  isExternal: true
  name: HashAlgorithm
  fullName: System.Security.Cryptography.HashAlgorithm
- uid: System.String
  parent: System
  isExternal: true
  name: String
  fullName: System.String
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  fullName: System.IO.Stream
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  fullName: System.Boolean
