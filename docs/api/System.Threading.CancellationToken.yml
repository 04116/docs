items:
- uid: System.Threading.CancellationToken
  id: CancellationToken
  parent: System.Threading
  children:
  - System.Threading.CancellationToken.#ctor(System.Boolean)
  - System.Threading.CancellationToken.CanBeCanceled
  - System.Threading.CancellationToken.Equals(System.Object)
  - System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)
  - System.Threading.CancellationToken.GetHashCode
  - System.Threading.CancellationToken.IsCancellationRequested
  - System.Threading.CancellationToken.None
  - System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)
  - System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)
  - System.Threading.CancellationToken.Register(System.Action)
  - System.Threading.CancellationToken.Register(System.Action,System.Boolean)
  - System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)
  - System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)
  - System.Threading.CancellationToken.ThrowIfCancellationRequested
  - System.Threading.CancellationToken.WaitHandle
  href: System.Threading.CancellationToken.yml
  name: CancellationToken
  fullName: System.Threading.CancellationToken
  type: Struct
  source:
    remote: &o0
      path: src/mscorlib/src/System/Threading/CancellationToken.cs
      branch: master
      repo: https://github.com/chenkennt/coreclr.git
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 39
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Propagates notification that operations should be canceled.
  remarks: >-
    <para>

    A @'System.Threading.CancellationToken' may be created directly in an unchangeable canceled or non-canceled state

    using the CancellationToken's constructors. However, to have a CancellationToken that can change

    from a non-canceled to a canceled state,

    @'System.Threading.CancellationTokenSource' must be used.

    CancellationTokenSource exposes the associated CancellationToken that may be canceled by the source through its

    @'System.Threading.CancellationTokenSource.Token' property.

    </para>

    <para>

    Once canceled, a token may not transition to a non-canceled state, and a token whose

    @'System.Threading.CancellationToken.CanBeCanceled' is false will never change to one that can be canceled.

    </para>

    <para>

    All members of this struct are thread-safe and may be used concurrently from multiple threads.

    </para>
  syntax:
    content: public struct CancellationToken
    content.vb: Public Structure CancellationToken
  inheritedMembers:
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
- uid: System.Threading.CancellationToken.None
  id: None
  parent: System.Threading.CancellationToken
  href: System.Threading.CancellationToken.yml
  name: None
  fullName: System.Threading.CancellationToken.None
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 58
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Returns an empty @'System.Threading.CancellationToken' value.
  remarks: The @'System.Threading.CancellationToken' value returned by this property will be non-cancelable by default.
  syntax:
    content: public static CancellationToken None { get; }
    content.vb: Public Shared ReadOnly Property None As CancellationToken
    parameters: []
    return:
      type: System.Threading.CancellationToken
- uid: System.Threading.CancellationToken.IsCancellationRequested
  id: IsCancellationRequested
  parent: System.Threading.CancellationToken
  href: System.Threading.CancellationToken.yml
  name: IsCancellationRequested
  fullName: System.Threading.CancellationToken.IsCancellationRequested
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 82
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Gets whether cancellation has been requested for this token.
  remarks: >-
    <para>

    This property indicates whether cancellation has been requested for this token,

    either through the token initially being construted in a canceled state, or through

    calling @'System.Threading.CancellationTokenSource.Cancel'

    on the token's associated @'System.Threading.CancellationTokenSource'.

    </para>

    <para>

    If this property is true, it only guarantees that cancellation has been requested.

    It does not guarantee that every registered handler

    has finished executing, nor that cancellation requests have finished propagating

    to all registered handlers.  Additional synchronization may be required,

    particularly in situations where related objects are being canceled concurrently.

    </para>
  syntax:
    content: public bool IsCancellationRequested { get; }
    content.vb: Public ReadOnly Property IsCancellationRequested As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Threading.CancellationToken.CanBeCanceled
  id: CanBeCanceled
  parent: System.Threading.CancellationToken
  href: System.Threading.CancellationToken.yml
  name: CanBeCanceled
  fullName: System.Threading.CancellationToken.CanBeCanceled
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 98
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Gets whether this token is capable of being in the canceled state.
  remarks: >-
    If CanBeCanceled returns false, it is guaranteed that the token will never transition

    into a canceled state, meaning that @'System.Threading.CancellationToken.IsCancellationRequested' will never

    return true.
  syntax:
    content: public bool CanBeCanceled { get; }
    content.vb: Public ReadOnly Property CanBeCanceled As Boolean
    parameters: []
    return:
      type: System.Boolean
- uid: System.Threading.CancellationToken.WaitHandle
  id: WaitHandle
  parent: System.Threading.CancellationToken
  href: System.Threading.CancellationToken.yml
  name: WaitHandle
  fullName: System.Threading.CancellationToken.WaitHandle
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 116
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Gets a @'System.Threading.WaitHandle' that is signaled when the token is canceled.
  remarks: >-
    Accessing this property causes a @'System.Threading.WaitHandle'

    to be instantiated.  It is preferable to only use this property when necessary, and to then

    dispose the associated @'System.Threading.CancellationTokenSource' instance at the earliest opportunity (disposing

    the source will dispose of this allocated handle).  The handle should not be closed or disposed directly.
  syntax:
    content: public WaitHandle WaitHandle { get; }
    content.vb: Public ReadOnly Property WaitHandle As WaitHandle
    parameters: []
    return:
      type: System.Threading.WaitHandle
  exceptions:
  - type: System.ObjectDisposedException
    description: The associated @'System.Threading.CancellationTokenSource' has been disposed.
- uid: System.Threading.CancellationToken.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Threading.CancellationToken
  href: System.Threading.CancellationToken.yml
  name: CancellationToken(Boolean)
  fullName: System.Threading.CancellationToken.CancellationToken(System.Boolean)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 154
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Initializes the @'System.Threading.CancellationToken'.
  remarks: >-
    Tokens created with this constructor will remain in the canceled state specified

    by the <paramref name="canceled" /> parameter.  If <paramref name="canceled" /> is false,

    both @'System.Threading.CancellationToken.CanBeCanceled' and @'System.Threading.CancellationToken.IsCancellationRequested' will be false.

    If <paramref name="canceled" /> is true,

    both @'System.Threading.CancellationToken.CanBeCanceled' and @'System.Threading.CancellationToken.IsCancellationRequested' will be true.
  syntax:
    content: public CancellationToken(bool canceled)
    content.vb: Public Sub New(canceled As Boolean)
    parameters:
    - id: canceled
      type: System.Boolean
      description: The canceled state for the token.
- uid: System.Threading.CancellationToken.Register(System.Action)
  id: Register(System.Action)
  parent: System.Threading.CancellationToken
  href: System.Threading.CancellationToken.yml
  name: Register(Action)
  fullName: System.Threading.CancellationToken.Register(System.Action)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 190
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Registers a delegate that will be called when this @'System.Threading.CancellationToken' is canceled.
  remarks: >-
    <para>

    If this token is already in the canceled state, the

    delegate will be run immediately and synchronously. Any exception the delegate generates will be

    propagated out of this method call.

    </para>

    <para>

    The current @'System.Threading.ExecutionContext', if one exists, will be captured

    along with the delegate and will be used when executing it.

    </para>
  syntax:
    content: public CancellationTokenRegistration Register(Action callback)
    content.vb: Public Function Register(callback As Action) As CancellationTokenRegistration
    parameters:
    - id: callback
      type: System.Action
      description: The delegate to be executed when the @'System.Threading.CancellationToken' is canceled.
    return:
      type: System.Threading.CancellationTokenRegistration
      description: >-
        The @'System.Threading.CancellationTokenRegistration' instance that can

        be used to deregister the callback.
  exceptions:
  - type: System.ObjectDisposedException
    description: The associated @'System.Threading.CancellationTokenSource' has been disposed.
  - type: System.ArgumentNullException
    description: '*callback* is null.'
- uid: System.Threading.CancellationToken.Register(System.Action,System.Boolean)
  id: Register(System.Action,System.Boolean)
  parent: System.Threading.CancellationToken
  href: System.Threading.CancellationToken.yml
  name: Register(Action, Boolean)
  fullName: System.Threading.CancellationToken.Register(System.Action, System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 225
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Registers a delegate that will be called when this @'System.Threading.CancellationToken' is canceled.
  remarks: >-
    <para>

    If this token is already in the canceled state, the

    delegate will be run immediately and synchronously. Any exception the delegate generates will be

    propagated out of this method call.

    </para>

    <para>

    The current @'System.Threading.ExecutionContext', if one exists, will be captured

    along with the delegate and will be used when executing it.

    </para>
  syntax:
    content: public CancellationTokenRegistration Register(Action callback, bool useSynchronizationContext)
    content.vb: Public Function Register(callback As Action, useSynchronizationContext As Boolean) As CancellationTokenRegistration
    parameters:
    - id: callback
      type: System.Action
      description: The delegate to be executed when the @'System.Threading.CancellationToken' is canceled.
    - id: useSynchronizationContext
      type: System.Boolean
      description: A Boolean value that indicates whether to capture the current @'System.Threading.SynchronizationContext' and use it when invoking the *callback*.
    return:
      type: System.Threading.CancellationTokenRegistration
      description: >-
        The @'System.Threading.CancellationTokenRegistration' instance that can

        be used to deregister the callback.
  exceptions:
  - type: System.ObjectDisposedException
    description: The associated @'System.Threading.CancellationTokenSource' has been disposed.
  - type: System.ArgumentNullException
    description: '*callback* is null.'
- uid: System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)
  id: Register(System.Action{System.Object},System.Object)
  parent: System.Threading.CancellationToken
  href: System.Threading.CancellationToken.yml
  name: Register(Action<Object>, Object)
  name.vb: Register(Action(Of Object), Object)
  fullName: System.Threading.CancellationToken.Register(System.Action<System.Object>, System.Object)
  fullName.vb: System.Threading.CancellationToken.Register(System.Action(Of System.Object), System.Object)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 258
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Registers a delegate that will be called when this @'System.Threading.CancellationToken' is canceled.
  remarks: >-
    <para>

    If this token is already in the canceled state, the

    delegate will be run immediately and synchronously. Any exception the delegate generates will be

    propagated out of this method call.

    </para>

    <para>

    The current @'System.Threading.ExecutionContext', if one exists, will be captured

    along with the delegate and will be used when executing it.

    </para>
  syntax:
    content: public CancellationTokenRegistration Register(Action<object> callback, object state)
    content.vb: Public Function Register(callback As Action(Of Object), state As Object) As CancellationTokenRegistration
    parameters:
    - id: callback
      type: System.Action{System.Object}
      description: The delegate to be executed when the @'System.Threading.CancellationToken' is canceled.
    - id: state
      type: System.Object
      description: The state to pass to the *callback* when the delegate is invoked. This may be null.
    return:
      type: System.Threading.CancellationTokenRegistration
      description: >-
        The @'System.Threading.CancellationTokenRegistration' instance that can

        be used to deregister the callback.
  exceptions:
  - type: System.ObjectDisposedException
    description: The associated @'System.Threading.CancellationTokenSource' has been disposed.
  - type: System.ArgumentNullException
    description: '*callback* is null.'
- uid: System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)
  id: Register(System.Action{System.Object},System.Object,System.Boolean)
  parent: System.Threading.CancellationToken
  href: System.Threading.CancellationToken.yml
  name: Register(Action<Object>, Object, Boolean)
  name.vb: Register(Action(Of Object), Object, Boolean)
  fullName: System.Threading.CancellationToken.Register(System.Action<System.Object>, System.Object, System.Boolean)
  fullName.vb: System.Threading.CancellationToken.Register(System.Action(Of System.Object), System.Object, System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 296
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Registers a delegate that will be called when this @'System.Threading.CancellationToken' is canceled.
  remarks: >-
    <para>

    If this token is already in the canceled state, the

    delegate will be run immediately and synchronously. Any exception the delegate generates will be

    propagated out of this method call.

    </para>

    <para>

    The current @'System.Threading.ExecutionContext', if one exists,

    will be captured along with the delegate and will be used when executing it.

    </para>
  syntax:
    content: public CancellationTokenRegistration Register(Action<object> callback, object state, bool useSynchronizationContext)
    content.vb: Public Function Register(callback As Action(Of Object), state As Object, useSynchronizationContext As Boolean) As CancellationTokenRegistration
    parameters:
    - id: callback
      type: System.Action{System.Object}
      description: The delegate to be executed when the @'System.Threading.CancellationToken' is canceled.
    - id: state
      type: System.Object
      description: The state to pass to the *callback* when the delegate is invoked. This may be null.
    - id: useSynchronizationContext
      type: System.Boolean
      description: A Boolean value that indicates whether to capture the current @'System.Threading.SynchronizationContext' and use it when invoking the *callback*.
    return:
      type: System.Threading.CancellationTokenRegistration
      description: >-
        The @'System.Threading.CancellationTokenRegistration' instance that can

        be used to deregister the callback.
  exceptions:
  - type: System.ObjectDisposedException
    description: The associated @'System.Threading.CancellationTokenSource' has been disposed.
  - type: System.ArgumentNullException
    description: '*callback* is null.'
- uid: System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)
  id: Equals(System.Threading.CancellationToken)
  parent: System.Threading.CancellationToken
  href: System.Threading.CancellationToken.yml
  name: Equals(CancellationToken)
  fullName: System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 361
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Determines whether the current @'System.Threading.CancellationToken' instance is equal to the specified token.
  syntax:
    content: public bool Equals(CancellationToken other)
    content.vb: Public Function Equals(other As CancellationToken) As Boolean
    parameters:
    - id: other
      type: System.Threading.CancellationToken
      description: The other @'System.Threading.CancellationToken' to which to compare this instance.
    return:
      type: System.Boolean
      description: >-
        True if the instances are equal; otherwise, false. Two tokens are equal if they are associated

        with the same @'System.Threading.CancellationTokenSource' or if they were both constructed

        from public CancellationToken constructors and their @'System.Threading.CancellationToken.IsCancellationRequested' values are equal.
- uid: System.Threading.CancellationToken.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Threading.CancellationToken
  href: System.Threading.CancellationToken.yml
  name: Equals(Object)
  fullName: System.Threading.CancellationToken.Equals(System.Object)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 397
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Determines whether the current @'System.Threading.CancellationToken' instance is equal to the specified @'System.Object'.
  syntax:
    content: public override bool Equals(object other)
    content.vb: Public Overrides Function Equals(other As Object) As Boolean
    parameters:
    - id: other
      type: System.Object
      description: The other object to which to compare this instance.
    return:
      type: System.Boolean
      description: >-
        True if <paramref name="other" /> is a @'System.Threading.CancellationToken'

        and if the two instances are equal; otherwise, false. Two tokens are equal if they are associated

        with the same @'System.Threading.CancellationTokenSource' or if they were both constructed

        from public CancellationToken constructors and their @'System.Threading.CancellationToken.IsCancellationRequested' values are equal.
  overridden: System.ValueType.Equals(System.Object)
  exceptions:
  - type: System.ObjectDisposedException
    description: An associated @'System.Threading.CancellationTokenSource' has been disposed.
- uid: System.Threading.CancellationToken.GetHashCode
  id: GetHashCode
  parent: System.Threading.CancellationToken
  href: System.Threading.CancellationToken.yml
  name: GetHashCode()
  fullName: System.Threading.CancellationToken.GetHashCode()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 411
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Serves as a hash function for a @'System.Threading.CancellationToken'.
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: A hash code for the current @'System.Threading.CancellationToken' instance.
  overridden: System.ValueType.GetHashCode
- uid: System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)
  id: op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)
  parent: System.Threading.CancellationToken
  href: System.Threading.CancellationToken.yml
  name: Equality(CancellationToken, CancellationToken)
  fullName: System.Threading.CancellationToken.Equality(System.Threading.CancellationToken, System.Threading.CancellationToken)
  type: Operator
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 430
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Determines whether two @'System.Threading.CancellationToken' instances are equal.
  syntax:
    content: public static bool operator ==(CancellationToken left, CancellationToken right)
    content.vb: Public Shared Operator =(left As CancellationToken, right As CancellationToken) As Boolean
    parameters:
    - id: left
      type: System.Threading.CancellationToken
      description: The first instance.
    - id: right
      type: System.Threading.CancellationToken
      description: The second instance.
    return:
      type: System.Boolean
      description: True if the instances are equal; otherwise, false.
  exceptions:
  - type: System.ObjectDisposedException
    description: An associated @'System.Threading.CancellationTokenSource' has been disposed.
- uid: System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)
  id: op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)
  parent: System.Threading.CancellationToken
  href: System.Threading.CancellationToken.yml
  name: Inequality(CancellationToken, CancellationToken)
  fullName: System.Threading.CancellationToken.Inequality(System.Threading.CancellationToken, System.Threading.CancellationToken)
  type: Operator
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 443
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Determines whether two @'System.Threading.CancellationToken' instances are not equal.
  syntax:
    content: public static bool operator !=(CancellationToken left, CancellationToken right)
    content.vb: Public Shared Operator <>(left As CancellationToken, right As CancellationToken) As Boolean
    parameters:
    - id: left
      type: System.Threading.CancellationToken
      description: The first instance.
    - id: right
      type: System.Threading.CancellationToken
      description: The second instance.
    return:
      type: System.Boolean
      description: True if the instances are not equal; otherwise, false.
  exceptions:
  - type: System.ObjectDisposedException
    description: An associated @'System.Threading.CancellationTokenSource' has been disposed.
- uid: System.Threading.CancellationToken.ThrowIfCancellationRequested
  id: ThrowIfCancellationRequested
  parent: System.Threading.CancellationToken
  href: System.Threading.CancellationToken.yml
  name: ThrowIfCancellationRequested()
  fullName: System.Threading.CancellationToken.ThrowIfCancellationRequested()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 462
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Throws a @'System.OperationCanceledException' if this token has had cancellation requested.
  remarks: >-
    This method provides functionality equivalent to:

    <code>

    if (token.IsCancellationRequested)

    throw new OperationCanceledException(token);

    </code>
  syntax:
    content: public void ThrowIfCancellationRequested()
    content.vb: Public Sub ThrowIfCancellationRequested
  exceptions:
  - type: System.OperationCanceledException
    description: The token has had cancellation requested.
  - type: System.ObjectDisposedException
    description: The associated @'System.Threading.CancellationTokenSource' has been disposed.
references:
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.CancellationTokenSource
  parent: System.Threading
  isExternal: false
  href: System.Threading.CancellationTokenSource.yml
  name: CancellationTokenSource
  fullName: System.Threading.CancellationTokenSource
  type: Class
  summary: Signals to a @'System.Threading.CancellationToken' that it should be canceled.
- uid: System.Threading.CancellationTokenSource.Token
- uid: System.Threading.CancellationToken.CanBeCanceled
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  fullName: System.ValueType
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Threading.CancellationTokenSource.Cancel
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: System.Threading.CancellationToken.IsCancellationRequested
- uid: System.Threading.WaitHandle
  parent: System.Threading
  isExternal: true
  name: WaitHandle
  fullName: System.Threading.WaitHandle
- uid: System.ObjectDisposedException
- uid: System.Threading.ExecutionContext
  parent: System.Threading
  isExternal: false
  href: System.Threading.ExecutionContext.yml
  name: ExecutionContext
  fullName: System.Threading.ExecutionContext
  type: Class
- uid: System.Threading.CancellationTokenRegistration
  parent: System.Threading
  isExternal: false
  href: System.Threading.CancellationTokenRegistration.yml
  name: CancellationTokenRegistration
  fullName: System.Threading.CancellationTokenRegistration
  type: Struct
  summary: Represents a callback delegate that has been registered with a @'System.Threading.CancellationToken'.
- uid: System.ArgumentNullException
- uid: System.Action
- uid: System.Threading.SynchronizationContext
  parent: System.Threading
  isExternal: false
  href: System.Threading.SynchronizationContext.yml
  name: SynchronizationContext
  fullName: System.Threading.SynchronizationContext
  type: Class
- uid: System.Action{System.Object}
  parent: System
  definition: System.Action`1
  href: System.Action`1.yml
  name: Action<Object>
  name.vb: Action(Of Object)
  fullName: System.Action<System.Object>
  fullName.vb: System.Action(Of System.Object)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    href: System.Action`1.yml
  - name: <
    fullName: <
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    href: System.Action`1.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    fullName: System.Object
    href: System.Object.yml
  - name: )
    fullName: )
- uid: System.Action`1
  parent: System
  isExternal: true
  name: Action<T>
  name.vb: Action(Of T)
  fullName: System.Action<T>
  fullName.vb: System.Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  fullName: System.Int32
- uid: System.OperationCanceledException
