items:
- uid: System.Reflection.ExceptionHandlingClauseOptions
  id: ExceptionHandlingClauseOptions
  parent: System.Reflection
  children:
  - System.Reflection.ExceptionHandlingClauseOptions.Clause
  - System.Reflection.ExceptionHandlingClauseOptions.Fault
  - System.Reflection.ExceptionHandlingClauseOptions.Filter
  - System.Reflection.ExceptionHandlingClauseOptions.Finally
  href: System.Reflection.ExceptionHandlingClauseOptions.yml
  name: ExceptionHandlingClauseOptions
  fullName: System.Reflection.ExceptionHandlingClauseOptions
  type: Enum
  source:
    remote: &o0
      path: src/mscorlib/src/System/Reflection/MethodBody.cs
      branch: master
      repo: https://github.com/chenkennt/coreclr.git
    path: src/mscorlib/src/System/Reflection/MethodBody.cs
    startLine: 12
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Identifies kinds of exception-handling clauses.
  syntax:
    content: public enum ExceptionHandlingClauseOptions
    content.vb: Public Enum ExceptionHandlingClauseOptions
- uid: System.Reflection.ExceptionHandlingClauseOptions.Clause
  id: Clause
  parent: System.Reflection.ExceptionHandlingClauseOptions
  href: System.Reflection.ExceptionHandlingClauseOptions.yml
  name: Clause
  fullName: System.Reflection.ExceptionHandlingClauseOptions.Clause
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/MethodBody.cs
    startLine: 16
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: The clause accepts all exceptions that derive from a specified type.
  syntax:
    content: Clause = 0
- uid: System.Reflection.ExceptionHandlingClauseOptions.Filter
  id: Filter
  parent: System.Reflection.ExceptionHandlingClauseOptions
  href: System.Reflection.ExceptionHandlingClauseOptions.yml
  name: Filter
  fullName: System.Reflection.ExceptionHandlingClauseOptions.Filter
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/MethodBody.cs
    startLine: 17
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: The clause contains user-specified instructions that determine whether the exception should be ignored (that is, whether normal execution should resume), be handled by the associated handler, or be passed on to the next clause.
  syntax:
    content: Filter = 1
- uid: System.Reflection.ExceptionHandlingClauseOptions.Finally
  id: Finally
  parent: System.Reflection.ExceptionHandlingClauseOptions
  href: System.Reflection.ExceptionHandlingClauseOptions.yml
  name: Finally
  fullName: System.Reflection.ExceptionHandlingClauseOptions.Finally
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/MethodBody.cs
    startLine: 18
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: The clause is executed whenever the try block exits, whether through normal control flow or because of an unhandled exception.
  syntax:
    content: Finally = 2
- uid: System.Reflection.ExceptionHandlingClauseOptions.Fault
  id: Fault
  parent: System.Reflection.ExceptionHandlingClauseOptions
  href: System.Reflection.ExceptionHandlingClauseOptions.yml
  name: Fault
  fullName: System.Reflection.ExceptionHandlingClauseOptions.Fault
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/MethodBody.cs
    startLine: 19
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: The clause is executed if an exception occurs, but not on completion of normal control flow.
  syntax:
    content: Fault = 4
references:
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
  type: Namespace
